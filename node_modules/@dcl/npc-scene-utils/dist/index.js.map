{"version":3,"file":"index.js","sources":["../src/npc/faceUserSystem.ts","../src/utils/default-ui-components.ts","../src/utils/types.ts","../src/ui/resources.ts","../src/ui/index.ts","../src/utils/timerComponents.ts","../src/trigger/triggerSystem.ts","../src/npc/move.ts","../src/npc/npc.ts"],"sourcesContent":["@Component('trackUserFlag')\nexport class TrackUserFlag {\n  lockXZRotation: boolean = false\n  active: boolean = false\n  rotSpeed: number\n  constructor(lockXZRotation?: boolean, rotSpeed?: number, active?: boolean) {\n    if (!faceUserAdded) {\n      addFaceUserSystem()\n    }\n\n    this.lockXZRotation = lockXZRotation ? lockXZRotation : false\n\n    this.rotSpeed = rotSpeed ? rotSpeed : 2\n\n    if (active) {\n      this.active = true\n    }\n  }\n}\n\nlet faceUserAdded: boolean = false\nconst player = Camera.instance\n\n// Rotates NPC to face the user during interaction\nexport function addFaceUserSystem() {\n  faceUserAdded = true\n\n  engine.addSystem(new FaceUserSystem())\n}\n\nclass FaceUserSystem implements ISystem {\n  private followingNPCs = engine.getComponentGroup(TrackUserFlag)\n  update(dt: number) {\n    for (let npc of this.followingNPCs.entities) {\n      let transform = npc.getComponent(Transform)\n      let trackUser = npc.getComponent(TrackUserFlag)\n      if (trackUser.active) {\n        // Rotate to face the player\n        let lookAtTarget = new Vector3(player.position.x, player.position.y, player.position.z)\n        let direction = lookAtTarget.subtract(transform.position)\n        transform.rotation = Quaternion.Slerp(\n          transform.rotation,\n          Quaternion.LookRotation(direction),\n          dt * trackUser.rotSpeed\n        )\n\n        if (trackUser.lockXZRotation) {\n          transform.rotation.x = 0\n          transform.rotation.z = 0\n        }\n      }\n    }\n  }\n}\n","export const canvas = new UICanvas()\ncanvas.visible = true\n\nexport let SFFont = new Font(Fonts.SanFrancisco)\n\nexport let SFHeavyFont = new Font(Fonts.SanFrancisco_Heavy)\n\nexport let lightTheme = new Texture('https://decentraland.org/images/ui/light-atlas-v2.png')\nexport let darkTheme = new Texture('https://decentraland.org/images/ui/dark-atlas-v2.png')\n","/**\n * Fragment of a conversation with an NPC\n *\n * @typedef {Object} Dialog - An entry in an NPC conversation\n * @property {string} text The dialog text\n * @property {string} name Optional name of the dialog entry, to link other entries to this one and not worry about changes in the array length\n * @property {number} fontSize Size of the text\n * @property {number} offsetX Offset of the text on the X axis, relative to its normal position.\n * @property {number} offsetY Offset of the text on the Y axis, relative to its normal position.\n * @property {ImageData} portrait Sets the portrait image to use on the left. This field expects a `Portrait` object.\n * @property {ImageData} image Sets a second image to use on the right of the dialog, and slightly up. This field expects an `ImageData` object.\n * @property {number} typeSpeed The text appears one character at a time, simulating typing. Players can click to skip the animation. Tune the speed of this typing (30 by default) to go slower or faster. Set to _-1_ to skip the animation.\n * @property {boolean} isQuestion If true, allows to use buttons to trigger different actions\n * @property {boolean} isFixedScreen If true, has no buttons or \"next page\" functionality\n * @property {ButtonData[]} buttons An array of buttons `ButtonData` objects to use in a question entry\n * @property {string} audio Path to sound file to play when the dialog is shown in the UI\n *\n */\nexport type Dialog = {\n  text: string\n  name?: string\n  fontSize?: number\n  offsetX?: number\n  offsetY?: number\n  typeSpeed?: number\n  isEndOfDialog?: boolean\n  triggeredByNext?: () => void\n  portrait?: ImageData\n  image?: ImageData\n  isQuestion?: boolean\n  isFixedScreen?: boolean\n  buttons?: ButtonData[]\n  audio?: string\n}\n\n/**\n *\n * @typedef {Object} TriggerData - Object with data for a NPCTriggerComponent\n * @property {number} layer  layer of the Trigger, useful to discriminate between trigger events. You can set multiple layers by using a | symbol.\n * @property {number} triggeredByLayer against which layers to check collisions\n * @property {(entity: Entity) => void } onTriggerEnter callback when an entity of a valid layer enters the trigger area\n * @property {(entity: Entity) => void} onTriggerExit callback when an entity of a valid layer leaves the trigger area\n * @property {() => void} onCameraEnter callback when the player enters the trigger area\n * @property {() => void} onCameraExit callback when the player leaves the trigger area\n * @property {boolean} enableDebug when true makes the trigger area visible for debug purposes.\n */\nexport type TriggerData = {\n  layer?: number\n  triggeredByLayer?: number\n  onTriggerEnter?: (entity: Entity) => void\n  onTriggerExit?: (entity: Entity) => void\n  onCameraEnter?: () => void\n  onCameraExit?: () => void\n  enableDebug?: boolean\n}\n\n/**\n * Data for Button to show on a question in a Dialog entry\n *\n * @typedef {Object} ButtonData - Object with data for a Dialog UI button\n * @property {string|number} goToDialog The index or name of the next dialog entry to display when activated.\n * @property {string} label The label to show on the button.\n * @property {() => void} triggeredActions An additional function to run whenever the button is activated\n * @property {number} fontSize Font size of the text\n * @property {number}offsetX Offset of the text on the X axis, relative to its normal position.\n * @property {number} offsetY Offset of the text on the Y axis, relative to its normal position.\n *\n */\nexport type ButtonData = {\n  goToDialog: number | string\n  label: string\n  triggeredActions?: () => void\n  fontSize?: number\n  offsetX?: number\n  offsetY?: number\n}\n\nexport enum ButtonStyles {\n  E = `e`,\n  F = `f`,\n  DARK = `dark`,\n  RED = `red`,\n  ROUNDBLACK = `roundblack`,\n  ROUNDWHITE = `roundwhite`,\n  ROUNDSILVER = `roundsilver`,\n  ROUNDGOLD = `roundgold`,\n  SQUAREBLACK = `squareblack`,\n  SQUAREWHITE = `squarewhite`,\n  SQUARESILVER = `squaresilver`,\n  SQUAREGOLD = `squaregold`\n}\n\n/**\n * An NPC capable of having conversations with the player, and play different animations.\n *\n * @typedef {Object} NPCData Object with data to instance a new NPC\n * @property {string|ImageData} portrait 2D image to show on the left-hand side of the dialog window. The structure of an `ImageData` object is described in detail below.\n * @property {number} reactDistance Radius in meters for the player to activate the NPC or trigger the `onWalkAway()` function when leaving the radius.\n * @property {string} idleAnim Name of the idle animation in the model. This animation is always looped. After playing a non-looping animation it returns to looping this one.\n * @property {boolean} faceUser Set if the NPC rotates to face the user while active.\n * @property {boolean} onlyExternalTrigger If true, the NPC can't be activated by clicking or walking near. Just by calling its `activate()` function.\n * @property {boolean} onlyClickTrigger If true, the NPC can't be activated by walking near. Just by clicking on it or calling its `activate()` function.\n * @property {boolean} onlyETrigger If true, the NPC can't be activated by walking near. Just by pressing E on it or calling its `activate()` function.\n * @property {() => void} onWalkAway Function to call every time the player walks out of the `reactDistance` radius.\n * @property {boolean} continueOnWalkAway f true,when the player walks out of the `reactDistance` radius, the dialog window stays open and the NPC keeps turning to face the player (if applicable). It doesn't affect the triggering of the `onWalkAway()` function.\n * @property {boolean} darkUI If true, the dialog UI uses the dark theme.\n * @property {number} coolDownDuration Change the cooldown period for activating the NPC again. The number is in seconds.\n * @property {string} hoverText Set the UI hover feedback when pointing the cursor at the NPC. _TALK_ by default.\n * @property {string} dialogSound Path to sound file to play once for every line of dialog read on the UI.\n * @property {string} walkingAnim Animation to play when walking with followPath\n * @property {number} walkingSpeed Default speed to use when walking with followPath\n * @property {Vector3[]} path Array of Vector3 points representing the default path to walk over. The NPC will walk looping over these points\n *\n */\nexport type NPCData = {\n  portrait?: string | ImageData\n  reactDistance?: number\n  idleAnim?: string\n  faceUser?: boolean\n  turningSpeed?: number\n  onlyExternalTrigger?: boolean\n  onlyClickTrigger?: boolean\n  onlyETrigger?: boolean\n  onWalkAway?: () => void\n  continueOnWalkAway?: boolean\n  darkUI?: boolean\n  coolDownDuration?: number\n  hoverText?: string\n  dialogSound?: string\n  walkingAnim?: string\n  walkingSpeed?: number\n  path?: Vector3[]\n}\n\n/**\n * Make an NPC walk following a path\n *\n * @typedef {Object} FollowPathData - Object with data to describe a path that an NPC can walk\n * @property {Vector3[]} path Array of `Vector3` positions to walk over.\n * @property {number} speed Speed to move at while walking this path. If no `speed` or `totalDuration` is provided, it uses the NPC's `walkingSpeed`, which is _2_ by default.\n * @property {number} totalDuration The duration in _seconds_ that the whole path should take. The NPC will move at the constant speed required to finish in that time. This value overrides that of the _speed_.\n * @property {boolean} loop _boolean_ If true, the NPC walks in circles over the provided set of points in the path. _false_ by default, unless the NPC is initiated with a `path`, in which case it starts as _true_.\n * @property {boolean} curve _boolean_ If true, the path is traced a single smooth curve that passes over each of the indicated points. The curve is made out of straight-line segments, the path is stored with 4 times as many points as originally defined. _false_ by default.\n * @property {number} startingPoint Index position for what point to start from on the path. _0_ by default.\n * @property {() => void} onFinishCallback Function to call when the NPC finished walking over all the points on the path. This is only called when `loop` is _false_.\n * @property {() => void} onReachedPointCallback Function to call once every time the NPC reaches a point in the path.\n *\n */\nexport type FollowPathData = {\n  startingPoint?: number\n  loop?: boolean\n  curve?: boolean\n  totalDuration?: number\n  speed?: number\n  path?: Vector3[]\n  onFinishCallback?: () => void\n  onReachedPointCallback?: () => void\n}\n\n/**\n * Cut out a section of an image file\n *\n * @typedef {Object} ImageSection - Object with data to only display a section of an image\n * @property {number} sourceWidth Width in pixels to select from image, starting from the sourceLeft, going right\n * @property {number} sourceHeight Height in pixels to select from image, starting from the sourceTop, going down\n * @property {number} sourceLeft Leftmost pixel to select from image\n * @property {number} sourceTop Topmost pixel to select from image\n *\n */\nexport type ImageSection = {\n  sourceWidth: number\n  sourceHeight: number\n  sourceLeft?: number\n  sourceTop?: number\n}\n\n/**\n *\n *\n * @typedef {Object} ImageData - Object with data for displaying an image\n * @property {string} path Path to the image file.\n * @property {number} offsetX Offset on X, relative to the normal position of the image.\n * @property {number} offsetY Offset on Y, relative to the normal position of the image.\n * @property {number} height The height to show the image onscreen.\n * @property {number} width The width to show the image onscreen.\n * @property {ImageSection} section Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an `ImageSection` object, specifying `sourceWidth` and `sourceHeight`, and optionally also `sourceLeft` and `sourceTop`.\n *\n */\nexport type ImageData = {\n  path: string\n  offsetX?: number\n  offsetY?: number\n  height?: number\n  width?: number\n  section?: ImageSection\n}\n\nexport enum NPCState {\n  STANDING = 'standing',\n  TALKING = 'talking',\n  FOLLOWPATH = 'followPath'\n  //FOLLOWPLAYER = 'followPlayer'\n}\n","import { ImageSection } from '../utils/types'\n\nexport function setSection(image: UIImage, section: ImageSection) {\n  image.sourceWidth = section.sourceWidth\n  image.sourceHeight = section.sourceHeight\n  image.sourceLeft = section.sourceLeft ? section.sourceLeft : 0\n  image.sourceTop = section.sourceTop ? section.sourceTop : 0\n}\n\nexport function buttonIconPos(textLen: number) {\n  let pos = -10 - textLen * 4\n  return pos > -65 ? pos : -65\n}\n\nexport default {\n  buttons: {\n    buttonE: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 662\n    },\n    buttonF: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 612\n    },\n    buttonRed: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 662\n    },\n    buttonDark: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 612\n    },\n    roundBlack: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 458\n    },\n    squareBlack: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 457\n    },\n    roundWhite: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 494\n    },\n    squareWhite: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 493\n    },\n    roundSilver: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 531\n    },\n    squareSilver: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 531\n    },\n    roundGold: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 567\n    },\n    squareGold: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 567\n    }\n  },\n  buttonLabels: {\n    E: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 697,\n      sourceTop: 611\n    },\n    F: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 733,\n      sourceTop: 611\n    }\n  },\n  backgrounds: {\n    promptBackground: {\n      sourceWidth: 416,\n      sourceHeight: 352,\n      sourceLeft: 501,\n      sourceTop: 12\n    },\n    promptLargeBackground: {\n      sourceWidth: 480,\n      sourceHeight: 384,\n      sourceLeft: 7,\n      sourceTop: 12\n    },\n    promptSlantedBackground: {\n      sourceWidth: 486,\n      sourceHeight: 326,\n      sourceLeft: 7,\n      sourceTop: 413\n    },\n    NPCDialog: {\n      sourceWidth: 766,\n      sourceHeight: 248,\n      sourceLeft: 22,\n      sourceTop: 756\n    }\n  },\n  icons: {\n    closeW: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 942,\n      sourceTop: 306\n    },\n    closeD: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 986,\n      sourceTop: 306\n    },\n    closeWLarge: {\n      sourceWidth: 64,\n      sourceHeight: 64,\n      sourceLeft: 512,\n      sourceTop: 381\n    },\n    closeDLarge: {\n      sourceWidth: 64,\n      sourceHeight: 64,\n      sourceLeft: 583,\n      sourceTop: 381\n    },\n    closeWNoBack: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 946,\n      sourceTop: 252\n    },\n    closeDNoBack: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 946,\n      sourceTop: 214\n    },\n    closeWNoBackLarge: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 214\n    },\n    closeDNoBackLarge: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 260\n    },\n    FDark: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 4\n    },\n    FWhite: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 4\n    },\n    EDark: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 40\n    },\n    EWhite: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 40\n    },\n    Timer: {\n      sourceWidth: 24,\n      sourceHeight: 32.2,\n      sourceLeft: 718,\n      sourceTop: 388\n    },\n    TimerLarge: {\n      sourceWidth: 48,\n      sourceHeight: 68,\n      sourceLeft: 662,\n      sourceTop: 386\n    },\n    ClickWhite: {\n      sourceWidth: 32,\n      sourceHeight: 48,\n      sourceLeft: 799,\n      sourceTop: 389\n    },\n    ClickDark: {\n      sourceWidth: 32,\n      sourceHeight: 48,\n      sourceLeft: 757,\n      sourceTop: 389\n    }\n  },\n  checkboxes: {\n    wOff: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 987,\n      sourceTop: 76\n    },\n    wOn: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 987,\n      sourceTop: 104\n    },\n    dOff: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 958,\n      sourceTop: 76\n    },\n    dOn: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 958,\n      sourceTop: 104\n    },\n    wLargeOff: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 132\n    },\n    wLargeOn: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 168\n    },\n    dLargeOff: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 132\n    },\n    dLargeOn: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 168\n    }\n  },\n  switches: {\n    roundOff: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 783,\n      sourceTop: 454\n    },\n    roundRed: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 853,\n      sourceTop: 454\n    },\n    roundGreen: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 923,\n      sourceTop: 454\n    },\n    squareOff: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 783,\n      sourceTop: 501\n    },\n    squareRed: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 852,\n      sourceTop: 501\n    },\n    squareGreen: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 921,\n      sourceTop: 501\n    }\n  }\n}\n","import {\n  canvas,\n  SFFont,\n  lightTheme,\n  darkTheme,\n  SFHeavyFont\n} from './../utils/default-ui-components'\nimport { ImageData, Dialog, ButtonStyles } from '../utils/types'\nimport resources, { setSection, buttonIconPos } from './resources'\nimport { NPCDelay } from '../utils/timerComponents'\n\nexport enum ConfirmMode {\n  Confirm = 0,\n  Cancel = 1,\n  Next = 2,\n  Button3 = 3,\n  Button4 = 4\n}\n\nlet portraitXPos = -350\nlet portraitYPos = 0\n\nlet imageXPos = 350\nlet imageYPos = 50\n\nlet textSize = 24\nlet textYPos = 10\n\nlet buttonTextSise = 18\n\nlet button1XPos = 150\nlet button2XPos = -80\nlet button3XPos = -80\nlet button4XPos = 150\n\nlet button1YPos = -65\nlet button2YPos = -65\nlet button1YPos4 = -20\nlet button2YPos4 = -20\nlet button3YPos = -80\nlet button4YPos = -80\n\n/**\n * Displays a UI screen with text from an array of Dialog objects. Each entry can also include a portrait image, questions with triggered actions by each, etc.\n *\n * @param defaultPortrait ImageData object with soruce and dimension of default portrait image to use on the Dialog UI\n * @param useDarkTheme If true, use the dark theme for all the UI. Can also be an alternative `Texture` object to use a different themed atlas, with identical coordinates for each element.\n * @param sound Path to a sound file to play once for every dialog window shown.\n *\n */\nexport class DialogWindow {\n  public NPCScript: Dialog[] = []\n  private defaultPortrait: ImageData | null\n  public container: UIContainerRect\n  public panel: UIImage\n  public portrait: UIImage\n  public defaultPortraitTexture: Texture\n  public image: UIImage\n  public text: UIText\n  public button1: CustomDialogButton\n  public button2: CustomDialogButton\n  public button3: CustomDialogButton\n  public button4: CustomDialogButton\n\n  public leftClickIcon: UIImage\n  public isDialogOpen: boolean = false\n  public isQuestionPanel: boolean = false\n  public isFixedScreen: boolean = false\n  public activeTextId: number = 0\n  public uiTheme: Texture\n  private UIOpenTime: number = 0\n  public soundEnt: Entity\n  public defaultSound: string | null = null\n\n  canvas: UICanvas = canvas\n  ClickAction: null | (() => false | Subscription[]) = null\n  EButtonAction: null | (() => false | Subscription[]) = null\n  FButtonAction: null | (() => false | Subscription[]) = null\n\n  constructor(defaultPortrait?: ImageData, useDarkTheme?: boolean | Texture, sound?: string) {\n    this.defaultPortrait = defaultPortrait ? defaultPortrait : null\n\n    this.uiTheme =\n      useDarkTheme instanceof Texture ? useDarkTheme : useDarkTheme == true ? darkTheme : lightTheme\n    //this.uiTheme =useDarkTheme == true ? darkTheme : lightTheme\n\n    // Container\n    this.container = new UIContainerRect(canvas)\n    this.container.adaptWidth = true\n    this.container.width = '100%'\n    this.container.vAlign = 'bottom'\n    this.container.positionY = 140\n    this.container.visible = false\n\n    // Text Panel\n    this.panel = new UIImage(this.container, this.uiTheme)\n    setSection(this.panel, resources.backgrounds.NPCDialog)\n    this.panel.width = 766\n    this.panel.height = 248\n    this.panel.onClick = new OnClick((): void => {\n      this.confirmText(ConfirmMode.Next)\n    })\n\n    this.defaultPortraitTexture = new Texture(\n      defaultPortrait ? defaultPortrait.path : this.uiTheme.src\n    )\n\n    // Portrait\n    this.portrait = new UIImage(this.container, this.defaultPortraitTexture)\n\n    this.portrait.sourceWidth =\n      defaultPortrait && defaultPortrait.section ? defaultPortrait.section.sourceWidth : 256\n    this.portrait.sourceHeight =\n      defaultPortrait && defaultPortrait.section ? defaultPortrait.section.sourceHeight : 256\n    this.portrait.width = defaultPortrait && defaultPortrait.width ? defaultPortrait.width : 256\n    this.portrait.height = defaultPortrait && defaultPortrait.height ? defaultPortrait.height : 256\n    this.portrait.positionX =\n      defaultPortrait && defaultPortrait.offsetX\n        ? defaultPortrait.offsetX + portraitXPos\n        : portraitXPos\n    this.portrait.positionY =\n      defaultPortrait && defaultPortrait.offsetY\n        ? defaultPortrait.offsetY + portraitYPos\n        : portraitYPos\n    this.portrait.onClick = new OnClick((): void => {\n      this.confirmText(ConfirmMode.Next)\n    })\n\n    // Image\n    this.image = new UIImage(this.container, new Texture(this.uiTheme.src))\n\n    this.image.sourceWidth = 256\n    this.image.sourceHeight = 256\n    this.image.sourceTop = 0\n    this.image.sourceLeft = 0\n    this.image.width = 256\n    this.image.height = 256\n    this.image.positionX = imageXPos\n    this.image.positionY = imageYPos\n    this.image.onClick = new OnClick((): void => {\n      this.confirmText(ConfirmMode.Next)\n    })\n\n    // Dialog Text\n    this.text = new UIText(this.container)\n    this.text.adaptWidth = false\n    this.text.textWrapping = true\n    this.text.width = 450\n    this.text.positionX = 20\n    this.text.hAlign = 'center'\n    this.text.vAlign = 'center'\n    this.text.font = SFHeavyFont\n    this.text.fontSize = textSize\n    this.text.hTextAlign = 'center'\n    this.text.vTextAlign = 'center'\n    this.text.positionY = textYPos\n\n    this.text.fontWeight = 'normal'\n    this.text.color = useDarkTheme ? Color4.White() : Color4.Black()\n    this.text.isPointerBlocker = false\n\n    this.soundEnt = new Entity()\n    this.soundEnt.addComponent(new Transform())\n    engine.addEntity(this.soundEnt)\n    this.soundEnt.setParent(Attachable.AVATAR)\n\n    if (sound) {\n      this.soundEnt.addComponent(new AudioSource(new AudioClip(sound)))\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n\n      this.defaultSound = sound\n    }\n\n    this.button1 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'yes',\n      button1XPos,\n      button1YPos,\n      () => {\n        this.confirmText(ConfirmMode.Confirm)\n      },\n      false,\n      ButtonStyles.E\n    )\n    this.button1.hide()\n\n    this.button2 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'no',\n      button2XPos,\n      button2YPos,\n      () => {\n        this.confirmText(ConfirmMode.Cancel)\n      },\n      false,\n      ButtonStyles.F\n    )\n    this.button2.hide()\n\n    this.button3 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'maybe',\n      button3XPos,\n      button3YPos,\n      () => {\n        this.confirmText(ConfirmMode.Button3)\n      },\n      false,\n      ButtonStyles.DARK\n    )\n    this.button3.hide()\n\n    this.button4 = new CustomDialogButton(\n      this.container,\n      this.uiTheme,\n      'maybe',\n      button4XPos,\n      button4YPos,\n      () => {\n        this.confirmText(ConfirmMode.Button4)\n      },\n      false,\n      ButtonStyles.DARK\n    )\n    this.button4.hide()\n\n    // Left Click Icon\n    this.leftClickIcon = new UIImage(this.container, this.uiTheme)\n    this.leftClickIcon.width = 32\n    this.leftClickIcon.height = 48\n    this.leftClickIcon.positionX = 340\n    this.leftClickIcon.positionY = -80\n    this.leftClickIcon.visible = false\n    setSection(\n      this.leftClickIcon,\n      darkTheme ? resources.icons.ClickWhite : resources.icons.ClickDark\n    )\n\n    DialogTypeInSystem.createAndAddToEngine()\n  }\n\n  /**\n   * Opens a dialog UI to start a conversation.\n   * @param {Dialog[]} NPCScript  Instructions to follow during the conversation\n   * @param {number|string} textId Where to start in the script. Can refer to an index in the array or the `name` field of a Dialog entry.\n   */\n  public openDialogWindow(NPCScript: Dialog[], textId?: number | string): void {\n    this.UIOpenTime = +Date.now()\n\n    this.NPCScript = NPCScript\n\n    if (!textId) {\n      this.activeTextId = 0\n    } else if (typeof textId === 'number') {\n      this.activeTextId = textId\n    } else {\n      this.activeTextId = findDialogByName(NPCScript, textId)\n    }\n\n    let currentText: Dialog = NPCScript[this.activeTextId]\n      ? NPCScript[this.activeTextId]\n      : { text: '' }\n\n    if (currentText.audio) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(currentText.audio)))\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    } else if (this.defaultSound) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound)))\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    }\n\n    // Set portrait\n\n    if (currentText.portrait) {\n      this.portrait.source = new Texture(currentText.portrait.path)\n\n      this.portrait.positionX = currentText.portrait.offsetX\n        ? currentText.portrait.offsetX + portraitXPos\n        : portraitXPos\n\n      this.portrait.positionY = currentText.portrait.offsetY\n        ? currentText.portrait.offsetY + portraitYPos\n        : portraitYPos\n\n      this.portrait.width = currentText.portrait.width ? currentText.portrait.width : 256\n\n      this.portrait.height = currentText.portrait.height ? currentText.portrait.height : 256\n\n      if (currentText.portrait.section) {\n        setSection(this.portrait, currentText.portrait.section)\n      }\n      this.portrait.visible = true\n    } else if (this.defaultPortrait) {\n      this.portrait.source = this.defaultPortraitTexture\n\n      this.portrait.positionX =\n        this.defaultPortrait && this.defaultPortrait.offsetX\n          ? this.defaultPortrait.offsetX + portraitXPos\n          : portraitXPos\n      this.portrait.positionY =\n        this.defaultPortrait && this.defaultPortrait.offsetY\n          ? this.defaultPortrait.offsetY + portraitYPos\n          : portraitYPos\n      this.portrait.width =\n        this.defaultPortrait && this.defaultPortrait.width ? this.defaultPortrait.width : 256\n      this.portrait.height =\n        this.defaultPortrait && this.defaultPortrait.height ? this.defaultPortrait.height : 256\n\n      if (this.defaultPortrait.section) {\n        setSection(this.portrait, this.defaultPortrait.section)\n      }\n      this.portrait.visible = true\n    } else {\n      log('No portrait')\n      this.portrait.visible = false\n    }\n\n    // Set image on the right\n    if (currentText.image) {\n      let image: ImageData = currentText.image\n      log('setting image to ', image.path)\n      this.image.source = new Texture(image.path)\n\n      this.image.positionX = image.offsetX ? image.offsetX + imageXPos : imageXPos\n      this.image.positionY = image.offsetY ? image.offsetY + imageYPos : imageYPos\n\n      this.image.width = image.width ? image.width : 256\n      this.portrait.height = image.height ? image.height : 256\n\n      if (image.section) {\n        setSection(this.image, image.section)\n      }\n      this.image.visible = true\n    } else {\n      this.image.visible = false\n    }\n\n    // Set text\n    //this.text.value = currentText.text\n    this.text.fontSize = currentText.fontSize ? currentText.fontSize : textSize\n    this.text.positionY = currentText.offsetY ? currentText.offsetY + textYPos : textYPos\n    this.text.positionX = currentText.offsetX ? currentText.offsetX : 0\n    this.text.visible = true\n    this.container.visible = true\n\n    DialogTypeInSystem._instance!.newText(\n      this,\n      currentText.text,\n      this.activeTextId,\n      currentText.typeSpeed ? currentText.typeSpeed : undefined\n    )\n\n    // Global button events\n    if (!this.ClickAction) {\n      this.ClickAction = Input.instance.subscribe('BUTTON_DOWN', ActionButton.POINTER, false, e => {\n        if (!this.isDialogOpen || +Date.now() - this.UIOpenTime < 100) return\n\n        if (!DialogTypeInSystem._instance!.done) {\n          DialogTypeInSystem._instance!.rush()\n          return\n        } else if (!this.isQuestionPanel && !this.isFixedScreen) {\n          this.confirmText(ConfirmMode.Next)\n        }\n      })\n      this.EButtonAction = Input.instance.subscribe(\n        'BUTTON_DOWN',\n        ActionButton.PRIMARY,\n        false,\n        e => {\n          if (\n            this.isDialogOpen &&\n            this.isQuestionPanel &&\n            DialogTypeInSystem._instance!.done &&\n            +Date.now() - this.UIOpenTime > 100\n          ) {\n            this.confirmText(ConfirmMode.Confirm)\n          }\n        }\n      )\n      this.FButtonAction = Input.instance.subscribe(\n        'BUTTON_DOWN',\n        ActionButton.SECONDARY,\n        false,\n        e => {\n          if (\n            this.isDialogOpen &&\n            this.isQuestionPanel &&\n            DialogTypeInSystem._instance!.done &&\n            +Date.now() - this.UIOpenTime > 100\n          ) {\n            this.confirmText(ConfirmMode.Cancel)\n          }\n        }\n      )\n    }\n\n    this.layoutDialogWindow(this.activeTextId)\n    this.isDialogOpen = true\n  }\n\n  // Progresses text\n  public confirmText(mode: ConfirmMode): void {\n    let currentText = this.NPCScript[this.activeTextId]\n\n    // Update active text\n    if (mode == ConfirmMode.Next) {\n      if (!currentText.isQuestion) {\n        if (currentText.triggeredByNext) {\n          currentText.triggeredByNext()\n        }\n        if (currentText.isEndOfDialog) {\n          this.closeDialogWindow()\n          return\n        }\n        this.activeTextId++\n      }\n    }\n\n    if (mode == ConfirmMode.Confirm) {\n      if (currentText.buttons && currentText.buttons.length >= 1) {\n        if (typeof currentText.buttons[0].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[0].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[0].goToDialog)\n        }\n        if (currentText.buttons[0].triggeredActions) {\n          currentText.buttons[0].triggeredActions()\n        }\n      }\n    }\n\n    if (mode == ConfirmMode.Cancel) {\n      if (currentText.buttons && currentText.buttons.length >= 2) {\n        if (typeof currentText.buttons[1].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[1].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[1].goToDialog)\n        }\n        if (currentText.buttons[1].triggeredActions) {\n          currentText.buttons[1].triggeredActions()\n        }\n      }\n    }\n\n    if (mode == ConfirmMode.Button3) {\n      if (currentText.buttons && currentText.buttons.length >= 3) {\n        if (typeof currentText.buttons[2].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[2].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[2].goToDialog)\n        }\n        if (currentText.buttons[2].triggeredActions) {\n          currentText.buttons[2].triggeredActions()\n        }\n      }\n    }\n\n    if (mode == ConfirmMode.Button4) {\n      if (currentText.buttons && currentText.buttons.length >= 4) {\n        if (typeof currentText.buttons[3].goToDialog === 'number') {\n          this.activeTextId = currentText.buttons[3].goToDialog\n        } else {\n          this.activeTextId = findDialogByName(this.NPCScript, currentText.buttons[3].goToDialog)\n        }\n        if (currentText.buttons[3].triggeredActions) {\n          currentText.buttons[3].triggeredActions()\n        }\n      }\n    }\n    // Update active text with new active text\n    currentText = this.NPCScript[this.activeTextId]\n\n    DialogTypeInSystem._instance!.newText(\n      this,\n      currentText.text,\n      this.activeTextId,\n      currentText.typeSpeed ? currentText.typeSpeed : undefined\n    )\n  }\n\n  // Adds the buttons or mouse icon depending on the type of window\n  public layoutDialogWindow(textId: number): void {\n    let currentText: Dialog = this.NPCScript[textId] ? this.NPCScript[textId] : { text: '' }\n\n    // Update text\n    let textY = currentText.offsetY ? currentText.offsetY + textYPos : textYPos\n\n    if (currentText.buttons && currentText.buttons.length >= 3) {\n      textY += 50\n    } else if (currentText.buttons && currentText.buttons.length >= 1) {\n      textY += 24\n    }\n\n    this.text.fontSize = currentText.fontSize ? currentText.fontSize : textSize\n    this.text.positionY = textY\n\n    if (currentText.audio) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(currentText.audio)))\n      this.soundEnt.getComponent(AudioSource).volume = 0.5\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    } else if (this.defaultSound) {\n      this.soundEnt.addComponentOrReplace(new AudioSource(new AudioClip(this.defaultSound)))\n      this.soundEnt.getComponent(AudioSource).playOnce()\n    }\n\n    if (currentText.portrait) {\n      this.portrait.source = new Texture(currentText.portrait.path)\n\n      this.portrait.positionX = currentText.portrait.offsetX\n        ? currentText.portrait.offsetX + portraitXPos\n        : portraitXPos\n\n      this.portrait.positionY = currentText.portrait.offsetY\n        ? currentText.portrait.offsetY + portraitYPos\n        : portraitYPos\n\n      this.portrait.width = currentText.portrait.width ? currentText.portrait.width : 256\n\n      this.portrait.height = currentText.portrait.height ? currentText.portrait.height : 256\n\n      if (currentText.portrait.section) {\n        setSection(this.portrait, currentText.portrait.section)\n      }\n      this.portrait.visible = true\n    } else if (this.defaultPortrait) {\n      this.portrait.source = new Texture(this.defaultPortrait.path)\n\n      this.portrait.positionX =\n        this.defaultPortrait && this.defaultPortrait.offsetX\n          ? this.defaultPortrait.offsetX + portraitXPos\n          : portraitXPos\n      this.portrait.positionY =\n        this.defaultPortrait && this.defaultPortrait.offsetY\n          ? this.defaultPortrait.offsetY + portraitYPos\n          : portraitYPos\n\n      this.portrait.width =\n        this.defaultPortrait && this.defaultPortrait.width ? this.defaultPortrait.width : 256\n      this.portrait.height =\n        this.defaultPortrait && this.defaultPortrait.height ? this.defaultPortrait.height : 256\n\n      if (this.defaultPortrait.section) {\n        setSection(this.portrait, this.defaultPortrait.section)\n      }\n      this.portrait.visible = true\n    } else {\n      log('No portrait')\n      this.portrait.visible = false\n    }\n\n    this.image.visible = false\n\n    // Set image on the right\n    if (currentText.image) {\n      let image: ImageData = currentText.image\n      log('setting image to ', image.path)\n      this.image.source = new Texture(image.path)\n\n      this.image.positionX = image.offsetX ? image.offsetX + imageXPos : imageXPos\n      this.image.positionY = image.offsetY ? image.offsetY + imageYPos : imageYPos\n\n      this.image.width = currentText.image.width ? currentText.image.width : 256\n      this.image.height = currentText.image.height ? currentText.image.height : 256\n\n      if (image.section) {\n        setSection(this.image, image.section)\n      }\n      this.image.visible = true\n    } else {\n      this.image.visible = false\n    }\n\n    this.isQuestionPanel = currentText.isQuestion ? currentText.isQuestion : false\n\n    this.isFixedScreen = currentText.isFixedScreen ? currentText.isFixedScreen : false\n    this.button1.hide()\n    this.button2.hide()\n    this.button3.hide()\n    this.button4.hide()\n\n    // Mouse icon\n    this.leftClickIcon.visible = false\n\n    if (currentText.isQuestion) {\n      // Button E\n      if (currentText.buttons && currentText.buttons.length >= 1) {\n        this.button1.update(\n          currentText.buttons[0].label,\n          currentText.buttons[0].offsetX\n            ? currentText.buttons[0].offsetX + button1XPos\n            : button1XPos,\n          currentText.buttons.length >= 3\n            ? currentText.buttons[0].offsetY\n              ? currentText.buttons[0].offsetY + button1YPos4\n              : button1YPos4\n            : currentText.buttons[0].offsetY\n            ? currentText.buttons[0].offsetY + button1YPos\n            : button1YPos\n        )\n      }\n\n      // Button F\n      if (currentText.buttons && currentText.buttons.length >= 2) {\n        this.button2.update(\n          currentText.buttons[1].label,\n          currentText.buttons[1].offsetX\n            ? currentText.buttons[1].offsetX + button2XPos\n            : button2XPos,\n          currentText.buttons.length >= 3\n            ? currentText.buttons[1].offsetY\n              ? currentText.buttons[1].offsetY + button2YPos4\n              : button2YPos4\n            : currentText.buttons[1].offsetY\n            ? currentText.buttons[1].offsetY + button2YPos\n            : button2YPos\n        )\n      }\n\n      // Button 3\n      if (currentText.buttons && currentText.buttons.length >= 3) {\n        this.button3.update(\n          currentText.buttons[2].label,\n          currentText.buttons[2].offsetX\n            ? currentText.buttons[2].offsetX + button3XPos\n            : button3XPos,\n          currentText.buttons[2].offsetY\n            ? currentText.buttons[2].offsetY + button3YPos\n            : button3YPos\n        )\n      }\n\n      // Button 4\n      if (currentText.buttons && currentText.buttons.length >= 4) {\n        this.button4.update(\n          currentText.buttons[3].label,\n          currentText.buttons[3].offsetX\n            ? currentText.buttons[3].offsetX + button4XPos\n            : button4XPos,\n          currentText.buttons[3].offsetY\n            ? currentText.buttons[3].offsetY + button4YPos\n            : button4YPos\n        )\n      }\n\n      dummyQuestionDelays.addComponentOrReplace(\n        new NPCDelay(0.7, () => {\n          // Button E\n          if (currentText.buttons && currentText.buttons.length >= 1) {\n            this.button1.show()\n          }\n          // Button F\n          if (currentText.buttons && currentText.buttons.length >= 2) {\n            this.button2.show()\n          }\n\n          // Button 3\n          if (currentText.buttons && currentText.buttons.length >= 3) {\n            this.button3.show()\n          }\n\n          // Button 4\n          if (currentText.buttons && currentText.buttons.length >= 4) {\n            this.button4.show()\n          }\n        })\n      )\n    } else if (!this.isFixedScreen) {\n      this.leftClickIcon.visible = true\n    }\n  }\n\n  /**\n   * Closes a dialog UI.\n   */\n  public closeDialogWindow(): void {\n    if (this.isDialogOpen) {\n      this.isDialogOpen = false\n\n      this.portrait.visible = false\n      this.text.value = ''\n      this.text.visible = false\n      this.button1.hide()\n      this.button2.hide()\n      this.button3.hide()\n      this.button4.hide()\n      this.leftClickIcon.visible = false\n      this.container.visible = false\n    }\n  }\n}\n\nconst DEFAULT_SPEED = 30\n\nexport class DialogTypeInSystem implements ISystem {\n  static _instance: DialogTypeInSystem | null = null\n\n  timer: number = 0\n  speed: number = DEFAULT_SPEED\n  visibleChars: number = 0\n  fullText: string = ''\n  UIText: UIText | null = null\n  done: boolean = true\n\n  static createAndAddToEngine(): DialogTypeInSystem {\n    if (this._instance == null) {\n      this._instance = new DialogTypeInSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    DialogTypeInSystem._instance = this\n  }\n\n  update(dt: number) {\n    if (this.done) return\n\n    this.timer += dt\n    if (this.timer >= 2 / this.speed) {\n      let charsToAdd = Math.floor(this.timer / (1 / this.speed))\n      this.timer = 0\n      this.visibleChars += charsToAdd\n      if (this.visibleChars >= this.fullText.length) {\n        this.done = true\n        this.visibleChars = this.fullText.length\n      }\n      if (this.UIText) {\n        this.UIText.value = this.fullText.substr(0, this.visibleChars)\n      }\n    }\n  }\n\n  newText(dialog: DialogWindow, text: string, textId: number, speed?: number) {\n    this.timer = 0\n    this.done = false\n    this.UIText = dialog.text\n    this.fullText = text\n    this.visibleChars = 0\n\n    if (speed && speed <= 0) {\n      this.rush()\n    } else if (speed) {\n      this.speed = speed\n    } else {\n      this.speed = DEFAULT_SPEED\n    }\n\n    // Buttons & action icons\n    dialog.layoutDialogWindow(textId)\n  }\n  rush() {\n    this.done = true\n    this.timer = 0\n    this.visibleChars = this.fullText.length\n\n    if (this.UIText) {\n      this.UIText.value = this.fullText\n    }\n  }\n}\n\nexport class CustomDialogButton extends Entity {\n  label: UIText\n  image: UIImage\n  icon: UIImage | null = null\n  style: ButtonStyles | null\n  onClick: () => void\n  constructor(\n    parent: UIContainerRect,\n    texture: Texture,\n    //UIOpenTime: number,\n    label: string,\n    posX: number,\n    posY: number,\n    onClick: () => void,\n    useDarkTheme?: boolean,\n    style?: ButtonStyles\n  ) {\n    super()\n    this.image = new UIImage(parent, texture)\n    this.image.positionX = posX\n    this.image.positionY = posY\n    this.image.width = 174\n    this.image.height = 46\n\n    this.label = new UIText(this.image)\n    this.style = style ? style : null\n\n    this.onClick = onClick\n\n    if (this.style) {\n      switch (this.style) {\n        case ButtonStyles.E:\n          setSection(this.image, resources.buttons.buttonE)\n          this.label.positionX = 25\n\n          this.icon = new UIImage(this.image, useDarkTheme == true ? darkTheme : lightTheme)\n          this.icon.width = 26\n          this.icon.height = 26\n          // this.button1Icon.positionY = 15\n          this.icon.hAlign = 'center'\n          this.icon.vAlign = 'center'\n          this.icon.isPointerBlocker = false\n          setSection(this.icon, resources.buttonLabels.E)\n          this.icon.positionX = buttonIconPos(label.length)\n\n          break\n        case ButtonStyles.F:\n          setSection(this.image, resources.buttons.buttonF)\n          this.label.positionX = 25\n\n          this.icon = new UIImage(this.image, useDarkTheme == true ? darkTheme : lightTheme)\n          this.icon.width = 26\n          this.icon.height = 26\n          // this.button1Icon.positionY = 15\n          this.icon.hAlign = 'center'\n          this.icon.vAlign = 'center'\n          this.icon.isPointerBlocker = false\n          setSection(this.icon, resources.buttonLabels.F)\n          this.icon.positionX = buttonIconPos(label.length)\n          break\n        case ButtonStyles.RED:\n          setSection(this.image, resources.buttons.buttonRed)\n          break\n        case ButtonStyles.DARK:\n          setSection(this.image, resources.buttons.buttonDark)\n          break\n        case ButtonStyles.ROUNDBLACK:\n          setSection(this.image, resources.buttons.roundBlack)\n          break\n        case ButtonStyles.ROUNDWHITE:\n          setSection(this.image, resources.buttons.roundWhite)\n          break\n        case ButtonStyles.ROUNDSILVER:\n          setSection(this.image, resources.buttons.roundSilver)\n          break\n        case ButtonStyles.ROUNDGOLD:\n          setSection(this.image, resources.buttons.roundGold)\n          break\n        case ButtonStyles.SQUAREBLACK:\n          setSection(this.image, resources.buttons.squareBlack)\n          break\n        case ButtonStyles.SQUAREWHITE:\n          setSection(this.image, resources.buttons.squareWhite)\n          break\n        case ButtonStyles.SQUARESILVER:\n          setSection(this.image, resources.buttons.squareSilver)\n          break\n        case ButtonStyles.SQUAREGOLD:\n          setSection(this.image, resources.buttons.squareGold)\n          break\n      }\n    } else {\n      setSection(this.image, resources.buttons.roundSilver)\n    }\n\n    this.label.value = label\n    this.label.hTextAlign = 'center'\n    this.label.vTextAlign = 'center'\n    this.label.fontSize = 20\n    this.label.font = SFFont\n    this.label.color =\n      style == ButtonStyles.ROUNDWHITE || style == ButtonStyles.SQUAREWHITE\n        ? Color4.Black()\n        : Color4.White()\n    this.label.isPointerBlocker = false\n\n    this.image.onClick = new OnClick(() => {\n      this.onClick()\n    })\n\n    if (style == ButtonStyles.E) {\n      Input.instance.subscribe('BUTTON_DOWN', ActionButton.PRIMARY, false, e => {\n        if (this.image.visible) {\n          // && +Date.now() - UIOpenTime > 100) {\n          this.onClick()\n        }\n      })\n    } else if (style == ButtonStyles.F) {\n      Input.instance.subscribe('BUTTON_DOWN', ActionButton.SECONDARY, false, e => {\n        if (this.image.visible) {\n          // && +Date.now() - UIOpenTime > 100) {\n          this.onClick()\n        }\n      })\n    }\n  }\n\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  public show(): void {\n    this.image.visible = true\n  }\n\n  public grayOut(): void {\n    this.label.color = Color4.Gray()\n    this.image.isPointerBlocker = false\n  }\n\n  public enable(): void {\n    this.label.color = Color4.White()\n    this.image.isPointerBlocker = true\n  }\n  public update(label: string, posX: number, posY: number) {\n    this.label.value = label\n    this.image.positionX = posX\n    this.image.positionY = posY\n\n    if (this.icon && (this.style == ButtonStyles.E || this.style == ButtonStyles.F)) {\n      this.icon.positionX = buttonIconPos(label.length)\n    }\n  }\n}\n\nlet dummyQuestionDelays = new Entity()\nengine.addEntity(dummyQuestionDelays)\n\nfunction findDialogByName(dialogs: Dialog[], name: string) {\n  for (let i = 0; i < dialogs.length; i++) {\n    if (dialogs[i].name && dialogs[i].name == name) {\n      return i\n    }\n  }\n  return 0\n}\n","export interface ITimerComponent {\n  elapsedTime: number\n  targetTime: number\n  onTargetTimeReached: (ownerEntity: IEntity) => void\n}\n\n/**\n * Execute once after X milliseconds\n */\n@Component('npcTimerDelay')\nexport class NPCDelay implements ITimerComponent {\n  elapsedTime: number\n  targetTime: number\n  onTargetTimeReached: (ownerEntity: IEntity) => void\n\n  private onTimeReachedCallback: () => void\n\n  /**\n   * @param seconds amount of time in seconds\n   * @param onTimeReachedCallback callback for when time is reached\n   */\n  constructor(seconds: number, onTimeReachedCallback: () => void) {\n    NPCTimerSystem.createAndAddToEngine()\n\n    this.elapsedTime = 0\n    this.targetTime = seconds\n    this.onTimeReachedCallback = onTimeReachedCallback\n    this.onTargetTimeReached = entity => {\n      this.onTimeReachedCallback()\n      entity.removeComponent(NPCDelay)\n    }\n  }\n\n  setCallback(onTimeReachedCallback: () => void) {\n    this.onTimeReachedCallback = onTimeReachedCallback\n  }\n}\n\nconst entitiesWithDelay = engine.getComponentGroup(NPCDelay)\n\nexport class NPCTimerSystem implements ISystem {\n  private static _instance: NPCTimerSystem | null = null\n\n  static createAndAddToEngine(): NPCTimerSystem {\n    if (this._instance == null) {\n      this._instance = new NPCTimerSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    NPCTimerSystem._instance = this\n  }\n\n  update(dt: number) {\n    for (let ent of entitiesWithDelay.entities) {\n      let timerComponent = ent.getComponent(NPCDelay)\n\n      timerComponent.elapsedTime += dt\n\n      if (timerComponent.elapsedTime >= timerComponent.targetTime) {\n        timerComponent.onTargetTimeReached(ent)\n      }\n    }\n  }\n}\n","import { TriggerData } from '../utils/types'\n\nexport class NPCTriggerSystem implements ISystem {\n  private static _instance: NPCTriggerSystem | null = null\n  static get instance(): NPCTriggerSystem {\n    return this.createAndAddToEngine()\n  }\n\n  private _triggers: Record<string, TriggerWrapper> = {}\n  private _cameraTriggerWrapper: CameraTrigger\n  private _componentGroup: ComponentGroup\n\n  private constructor() {\n    NPCTriggerSystem._instance = this\n    this._cameraTriggerWrapper = new CameraTrigger(\n      new TriggerBoxShape(new Vector3(0.5, 1.8, 0.5), new Vector3(0, 0.91, 0))\n    )\n\n    this._componentGroup = engine.getComponentGroup(NPCTriggerComponent)\n  }\n\n  static createAndAddToEngine(): NPCTriggerSystem {\n    if (this._instance == null) {\n      this._instance = new NPCTriggerSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  /**\n   * set a custom trigger's shape for the camera\n   * @param shape custom trigger's shape\n   */\n  setCameraTriggerShape(shape: TriggerBoxShape | TriggerSphereShape) {\n    this._cameraTriggerWrapper.setShape(shape)\n  }\n\n  update() {\n    let entitiesWithTriggers = this._componentGroup.entities\n\n    //iterate through all entities with triggers and wrap entities that weren't wrapped yet\n    entitiesWithTriggers.forEach(entity => {\n      if (this.shouldWrapTriggerEntity(entity)) {\n        this.wrapTriggerEntity(entity)\n      }\n    })\n\n    //iterate through wrapped entities\n    for (const key in this._triggers) {\n      if (this._triggers.hasOwnProperty(key)) {\n        let wrapper = this._triggers[key]\n\n        //update debug entity\n        if (wrapper.isDebugging()) {\n          wrapper.updateDebugEntity()\n        }\n\n        if (!wrapper.isInEngine()) {\n          //remove debugging\n          if (wrapper.isDebugging()) {\n            wrapper.removeDebugEntity()\n          }\n          //remove old collisions\n          NPCTriggerSystem.removeTriggerFromSystem(wrapper)\n          //remove from record\n          delete this._triggers[key]\n        } else if (wrapper.trigger != null && wrapper.trigger.enabled) {\n          //if was set as enabled in last frame\n          if (!wrapper.wasEnabled) {\n            if (wrapper.isDebugging()) {\n              wrapper.addDebugEntity()\n            }\n          }\n          //set as enabled\n          wrapper.wasEnabled = true\n\n          //check collision camera\n          if (wrapper.trigger.onCameraEnter || wrapper.trigger.onCameraExit) {\n            this.checkCollisionAgainstCamera(wrapper)\n          }\n\n          //check collision with others\n          if (wrapper.trigger.onTriggerEnter || wrapper.trigger.onTriggerExit) {\n            this.checkCollisionAgainstOtherTriggers(wrapper)\n          }\n        } else if (wrapper.wasEnabled) {\n          wrapper.wasEnabled = false\n          //remove debugging\n          if (wrapper.isDebugging()) {\n            wrapper.removeDebugEntity()\n          }\n          NPCTriggerSystem.removeTriggerFromSystem(wrapper)\n        }\n      }\n    }\n  }\n\n  private shouldWrapTriggerEntity(entity: IEntity): boolean {\n    return this._triggers[entity.uuid] == undefined || this._triggers[entity.uuid] == null\n  }\n\n  private wrapTriggerEntity(entity: IEntity) {\n    this._triggers[entity.uuid] = new TriggerWrapper(entity as Entity)\n  }\n\n  private static removeTriggerFromSystem(wrapper: TriggerWrapper) {\n    let activeCollisions = wrapper.getActiveCollisions()\n    for (let i = 0; i < activeCollisions.length; i++) {\n      let activeCollisionHasTrigger = !(\n        activeCollisions[i] === NPCTriggerSystem._instance?._cameraTriggerWrapper ||\n        activeCollisions[i].trigger == null\n      )\n\n      if (activeCollisionHasTrigger && activeCollisions[i].trigger.onTriggerExit && wrapper.entity)\n        (activeCollisions[i].trigger.onTriggerExit as (entity: IEntity) => void)(wrapper.entity)\n      activeCollisions[i].disengageActiveCollision(wrapper)\n      wrapper.disengageActiveCollision(activeCollisions[i])\n    }\n  }\n\n  private static disengageCollision(t1: TriggerWrapper, t2: TriggerWrapper) {\n    t1.disengageActiveCollision(t2)\n    t2.disengageActiveCollision(t1)\n\n    if (t1.trigger.onTriggerExit && t2.entity) t1.trigger.onTriggerExit(t2.entity)\n    if (t2.trigger.onTriggerExit && t1.entity) t2.trigger.onTriggerExit(t1.entity)\n  }\n\n  private static engageCollision(t1: TriggerWrapper, t2: TriggerWrapper) {\n    t1.engageCollision(t2)\n    t2.engageCollision(t1)\n\n    if (t1.trigger.onTriggerEnter && t2.entity) t1.trigger.onTriggerEnter(t2.entity)\n    if (t2.trigger.onTriggerEnter && t1.entity) t2.trigger.onTriggerEnter(t1.entity)\n  }\n\n  private checkCollisionAgainstCamera(wrapper: TriggerWrapper) {\n    let wereColliding = wrapper.hasActiveCollision(this._cameraTriggerWrapper)\n    let areColliding = NPCTriggerSystem.areColliding(wrapper, this._cameraTriggerWrapper)\n\n    if (wereColliding && !areColliding) {\n      wrapper.disengageActiveCollision(this._cameraTriggerWrapper)\n      if (wrapper.trigger.onCameraExit) wrapper.trigger.onCameraExit()\n    } else if (!wereColliding && areColliding) {\n      wrapper.engageCollision(this._cameraTriggerWrapper)\n      if (wrapper.trigger.onCameraEnter) wrapper.trigger.onCameraEnter()\n    }\n  }\n\n  private checkCollisionAgainstOtherTriggers(wrapper: TriggerWrapper) {\n    for (const key in this._triggers) {\n      if (this._triggers.hasOwnProperty(key)) {\n        if (key != wrapper.uuid && this._triggers[key].trigger.enabled) {\n          if (NPCTriggerSystem.canTriggersCollide(wrapper, this._triggers[key])) {\n            let wereColliding = wrapper.hasActiveCollision(this._triggers[key])\n            let areColliding = NPCTriggerSystem.areColliding(wrapper, this._triggers[key])\n\n            if (wereColliding && !areColliding)\n              NPCTriggerSystem.disengageCollision(wrapper, this._triggers[key])\n            else if (!wereColliding && areColliding)\n              NPCTriggerSystem.engageCollision(wrapper, this._triggers[key])\n          }\n        }\n      }\n    }\n  }\n\n  private static canTriggersCollide(t1: TriggerWrapper, t2: TriggerWrapper): boolean {\n    if (t1.trigger.triggeredByLayer == 0) return true\n    return (t2.trigger.layer & t1.trigger.triggeredByLayer) != 0\n  }\n\n  private static areColliding(t1: TriggerWrapper, t2: TriggerWrapper): boolean {\n    if (t1.getShape() instanceof TriggerBoxShape && t2.getShape() instanceof TriggerBoxShape) {\n      return NPCTriggerSystem.areCollidingAABB(\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerBoxShape,\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerBoxShape\n      )\n    } else if (\n      t1.getShape() instanceof TriggerSphereShape &&\n      t2.getShape() instanceof TriggerSphereShape\n    ) {\n      return NPCTriggerSystem.areCollidingSphere(\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerSphereShape,\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerSphereShape\n      )\n    } else if (\n      t1.getShape() instanceof TriggerBoxShape &&\n      t2.getShape() instanceof TriggerSphereShape\n    ) {\n      return NPCTriggerSystem.areCollidingAABBSphere(\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerBoxShape,\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerSphereShape\n      )\n    } else if (\n      t1.getShape() instanceof TriggerSphereShape &&\n      t2.getShape() instanceof TriggerBoxShape\n    ) {\n      return NPCTriggerSystem.areCollidingAABBSphere(\n        t2.getGlobalPosition(),\n        t2.getShape() as TriggerBoxShape,\n        t1.getGlobalPosition(),\n        t1.getShape() as TriggerSphereShape\n      )\n    }\n    return false\n  }\n\n  private static areCollidingAABB(\n    t1GlobalPosition: Vector3,\n    t1Shape: TriggerBoxShape,\n    t2GlobalPosition: Vector3,\n    t2Shape: TriggerBoxShape\n  ): boolean {\n    let t1 = NPCTriggerSystem.getBoxShapeValues(t1GlobalPosition, t1Shape)\n    let t2 = NPCTriggerSystem.getBoxShapeValues(t2GlobalPosition, t2Shape)\n    return (\n      t1.min.x <= t2.max.x &&\n      t1.max.x >= t2.min.x &&\n      t1.min.y <= t2.max.y &&\n      t1.max.y >= t2.min.y &&\n      t1.min.z <= t2.max.z &&\n      t1.max.z >= t2.min.z\n    )\n  }\n\n  private static areCollidingSphere(\n    t1GlobalPosition: Vector3,\n    t1Shape: TriggerSphereShape,\n    t2GlobalPosition: Vector3,\n    t2Shape: TriggerSphereShape\n  ): boolean {\n    let sqDist = Vector3.DistanceSquared(\n      t1GlobalPosition.add(t1Shape.position),\n      t2GlobalPosition.add(t2Shape.position)\n    )\n    return sqDist < t1Shape.radius * t1Shape.radius + t2Shape.radius * t2Shape.radius\n  }\n\n  private static areCollidingAABBSphere(\n    t1GlobalPosition: Vector3,\n    t1Shape: TriggerBoxShape,\n    t2GlobalPosition: Vector3,\n    t2Shape: TriggerSphereShape\n  ): boolean {\n    let box = NPCTriggerSystem.getBoxShapeValues(t1GlobalPosition, t1Shape)\n    let sphere = {\n      center: t2GlobalPosition.add(t2Shape.position),\n      radius: t2Shape.radius\n    }\n\n    let dmin = 0\n    if (sphere.center.x < box.min.x)\n      dmin += (box.min.x - sphere.center.x) * (box.min.x - sphere.center.x)\n    if (sphere.center.x > box.max.x)\n      dmin += (sphere.center.x - box.max.x) * (sphere.center.x - box.max.x)\n    if (sphere.center.y < box.min.y)\n      dmin += (box.min.y - sphere.center.y) * (box.min.y - sphere.center.y)\n    if (sphere.center.y > box.max.y)\n      dmin += (sphere.center.y - box.max.y) * (sphere.center.y - box.max.y)\n    if (sphere.center.z < box.min.z)\n      dmin += (box.min.z - sphere.center.z) * (box.min.z - sphere.center.z)\n    if (sphere.center.z > box.max.z)\n      dmin += (sphere.center.z - box.max.z) * (sphere.center.z - box.max.z)\n\n    return dmin < sphere.radius * sphere.radius\n  }\n\n  private static getBoxShapeValues(\n    entityGlobalPosition: Vector3,\n    shape: TriggerBoxShape\n  ): { center: Vector3; min: Vector3; max: Vector3 } {\n    let center = entityGlobalPosition.add(shape.position)\n    return {\n      center: center,\n      min: center.subtract(shape.size.scale(0.5)),\n      max: center.add(shape.size.scale(0.5))\n    }\n  }\n}\n\nclass TriggerWrapper {\n  wasEnabled: boolean = true\n\n  get entity(): Entity | undefined {\n    return this._entity\n  }\n  get trigger(): NPCTriggerComponent {\n    return this._trigger\n  }\n  get uuid(): string {\n    return this._uuid\n  }\n\n  protected _entity?: Entity\n  protected _trigger!: NPCTriggerComponent\n  protected _uuid: string = ''\n  protected _collidingWith: Record<string, TriggerWrapper> = {}\n\n  private _isDebug: boolean = false\n  private _debugEntity: Entity | null = null\n  private static _debugMaterial: Material | null = null\n\n  constructor(entity?: Entity) {\n    this._entity = entity\n    if (entity) {\n      this._trigger = entity.getComponent(NPCTriggerComponent)\n      this._uuid = entity.uuid\n      this._isDebug = this._trigger.debugEnabled\n      if (this._isDebug) {\n        this.addDebugEntity()\n      }\n    }\n  }\n\n  getGlobalPosition(): Vector3 {\n    if (this._entity) return TriggerWrapper.getEntityWorldPosition(this._entity)\n    return Vector3.Zero()\n  }\n\n  getShape(): TriggerBoxShape | TriggerSphereShape {\n    return this._trigger.shape\n  }\n\n  isInEngine(): boolean {\n    return this._entity != null && this._entity.isAddedToEngine()\n  }\n\n  getActiveCollisions(): TriggerWrapper[] {\n    let ret: TriggerWrapper[] = []\n\n    for (const key in this._collidingWith) {\n      if (this._collidingWith.hasOwnProperty(key)) {\n        ret.push(this._collidingWith[key])\n      }\n    }\n    return ret\n  }\n\n  hasActiveCollision(other: TriggerWrapper): boolean {\n    return this._collidingWith[other.uuid] != undefined && this._collidingWith[other.uuid] != null\n  }\n\n  disengageActiveCollision(other: TriggerWrapper) {\n    delete this._collidingWith[other.uuid]\n  }\n\n  engageCollision(other: TriggerWrapper) {\n    this._collidingWith[other.uuid] = other\n  }\n\n  isDebugging(): boolean {\n    return this._isDebug\n  }\n\n  addDebugEntity() {\n    if (!TriggerWrapper._debugMaterial) {\n      TriggerWrapper._debugMaterial = new Material()\n      TriggerWrapper._debugMaterial.alphaTest = 0.5\n    }\n\n    if (this._debugEntity == null) {\n      this._debugEntity = new Entity()\n\n      const transform = new Transform()\n      this._debugEntity.addComponent(transform)\n      this._debugEntity.addComponent(TriggerWrapper._debugMaterial)\n\n      if (this.getShape() instanceof TriggerBoxShape) {\n        const shape = new BoxShape()\n        shape.withCollisions = false\n        this._debugEntity.addComponent(shape)\n        transform.scale = (this.getShape() as TriggerBoxShape).size\n      }\n      if (this.getShape() instanceof TriggerSphereShape) {\n        const shape = new SphereShape()\n        shape.withCollisions = false\n        this._debugEntity.addComponent(shape)\n        let rad = (this.getShape() as TriggerSphereShape).radius\n        transform.scale = new Vector3(rad, rad, rad)\n      }\n    }\n    engine.addEntity(this._debugEntity)\n  }\n\n  removeDebugEntity() {\n    if (this._debugEntity != null) engine.removeEntity(this._debugEntity)\n  }\n\n  updateDebugEntity() {\n    if (this._debugEntity) {\n      this._debugEntity.getComponent(Transform).position = this.getGlobalPosition().add(\n        this.getShape().position\n      )\n    }\n  }\n\n  private static getEntityWorldPosition(entity: IEntity): Vector3 {\n    let entityPosition = entity.hasComponent(Transform)\n      ? entity.getComponent(Transform).position.clone()\n      : Vector3.Zero()\n    let parentEntity = entity.getParent()\n\n    if (parentEntity != null) {\n      let parentRotation = parentEntity.hasComponent(Transform)\n        ? parentEntity.getComponent(Transform).rotation\n        : Quaternion.Identity\n      return this.getEntityWorldPosition(parentEntity).add(entityPosition.rotate(parentRotation))\n    }\n    return entityPosition\n  }\n}\n\nclass CameraTrigger extends TriggerWrapper {\n  private _shape: TriggerBoxShape | TriggerSphereShape\n\n  constructor(shape: TriggerBoxShape | TriggerSphereShape) {\n    super()\n    this._shape = shape\n    this._uuid = 'cameraTrigger'\n  }\n\n  getGlobalPosition() {\n    return Camera.instance.position\n  }\n\n  getShape() {\n    return this._shape\n  }\n\n  setShape(shape: TriggerBoxShape | TriggerSphereShape) {\n    this._shape = shape\n  }\n\n  isInEngine(): boolean {\n    return false\n  }\n\n  hasActiveCollision(other: TriggerWrapper): boolean {\n    return false\n  }\n\n  disengageActiveCollision(other: TriggerWrapper) {}\n\n  engageCollision(other: TriggerWrapper) {}\n  isDebugging(): boolean {\n    return false\n  }\n}\n\n@Component('npcTriggerComponent')\nexport class NPCTriggerComponent {\n  /**\n   * is trigger enable?\n   */\n  enabled: boolean = true\n  /**\n   * shape of the collider\n   */\n  shape: TriggerBoxShape | TriggerSphereShape\n  /**\n   * bit layer of the Tigger (usefull to discriminate between trigger events)\n   */\n  layer: number = 0\n  /**\n   * against which layer are we going to check trigger's collisions\n   */\n  triggeredByLayer: number = 0\n  /**\n   * callback when trigger is entered\n   */\n  onTriggerEnter?: (entity: Entity) => void\n  /**\n   * callback when trigger is exit\n   */\n  onTriggerExit?: (entity: Entity) => void\n  /**\n   * callback when trigger is entered\n   */\n  onCameraEnter?: () => void\n  /**\n   * callback when trigger is exit\n   */\n  onCameraExit?: () => void\n  /**\n   * get if debug is enabled\n   */\n  get debugEnabled(): boolean {\n    return this._debugEnabled\n  }\n\n  private _debugEnabled: boolean\n\n  /**\n   *\n   * @param {TriggerBoxShape | TriggerSphereShape} shape shape of the triggering collider area\n   * @param {TriggerData} data Object of type TriggerData, including the following optional fields: onCameraEnter, onCameraExit, onTriggerEnter, onTriggerExit, layer, triggeredByLayer, enableDebug\n   */\n  constructor(shape: TriggerBoxShape | TriggerSphereShape, data?: TriggerData) {\n    NPCTriggerSystem.createAndAddToEngine()\n    this.shape = shape\n    this.layer = data && data.layer ? data.layer : 0\n    this.triggeredByLayer = data && data.triggeredByLayer ? data.triggeredByLayer : 0\n    this.onTriggerEnter = data && data.onTriggerEnter ? data.onTriggerEnter : undefined\n    this.onTriggerExit = data && data.onTriggerExit ? data.onTriggerExit : undefined\n    this.onCameraEnter = data && data.onCameraEnter ? data.onCameraEnter : undefined\n    this.onCameraExit = data && data.onCameraExit ? data.onCameraExit : undefined\n    this._debugEnabled = data && data.enableDebug ? data.enableDebug : false\n  }\n}\n\nexport class TriggerBoxShape {\n  size: Vector3\n  position: Vector3\n\n  constructor(size: Vector3, position: Vector3) {\n    this.size = size\n    this.position = position\n  }\n}\n\nexport class TriggerSphereShape {\n  radius: number\n  position: Vector3\n\n  constructor(radius: number, position: Vector3) {\n    this.radius = radius\n    this.position = position\n  }\n}\n","import { NPCState } from '../utils/types'\nimport { NPC } from './npc'\n\n@Component('npclerpData')\nexport class NPCLerpData {\n  path: Vector3[]\n  origin: number = 0\n  target: number = 1\n  fraction: number = 0\n  totalDuration: number = 0\n  speed: number[] = []\n  loop: boolean = false\n  onFinishCallback?: () => void\n  onReachedPointCallback?: () => void\n  constructor(path: Vector3[]) {\n    this.path = path\n    NPCWalkSystem.createAndAddToEngine()\n  }\n\n  setIndex(index: number) {\n    this.fraction = 0\n    this.origin = index\n    this.target = index + 1 < this.path.length ? index + 1 : 0\n  }\n}\n\nexport let walkingNPCGroup: NPC[] = []\n\nexport class NPCWalkSystem implements ISystem {\n  static _instance: NPCWalkSystem | null = null\n  update(dt: number) {\n    for (let npc of walkingNPCGroup) {\n      if (npc.state == NPCState.FOLLOWPATH) {\n        let transform = npc.getComponent(Transform)\n        let path = npc.getComponent(NPCLerpData)\n        if (path.fraction < 1) {\n          path.fraction += dt * path.speed[path.origin]\n          transform.position = Vector3.Lerp(\n            path.path[path.origin],\n            path.path[path.target],\n            path.fraction\n          )\n        } else {\n          path.origin = path.target\n          path.target += 1\n          if (path.target >= path.path.length) {\n            if (path.loop) {\n              path.target = 0\n            } else {\n              npc.stopWalking()\n              if (path.onFinishCallback) {\n                path.onFinishCallback()\n              }\n              path.fraction = 1\n              return\n            }\n          } else if (path.onReachedPointCallback) {\n            path.onReachedPointCallback()\n          }\n          path.fraction = 0\n          transform.lookAt(path.path[path.target])\n        }\n      }\n    }\n  }\n\n  static createAndAddToEngine(): NPCWalkSystem {\n    if (this._instance == null) {\n      this._instance = new NPCWalkSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    NPCWalkSystem._instance = this\n  }\n}\n","import { DialogWindow } from '../ui/index'\nimport { Dialog, FollowPathData, NPCData, NPCState } from '../utils/types'\nimport { TrackUserFlag } from './faceUserSystem'\n\nimport { TriggerSphereShape, NPCTriggerComponent } from '../trigger/triggerSystem'\nimport { NPCDelay } from '../utils/timerComponents'\nimport { NPCLerpData, walkingNPCGroup } from './move'\n\n/**\n * Creates a talking, walking and animated NPC\n *\n * @param {TranformConstructorArgs} position Transform argument object that can contain position, rotation and scale for NPC\n * @param {string} model String with path to 3D model to use for NPC\n * @param {() => void} onActivate Function to execute each time the NPC is activated. By default when clicking it or walking near, or calling the `activate()` function\n * @param {NPCData} data Object of type NPCData, containing multiple configurable parameters\n *\n */\nexport class NPC extends Entity {\n  public introduced: boolean = false\n  public dialog: DialogWindow\n  public onActivate: () => void\n  public onWalkAway: null | (() => void) = null\n  public continueOnWalkAway: boolean = false\n  public inCooldown: boolean = false\n  public coolDownDuration: number = 5\n  public faceUser: boolean = false\n  public idleAnim: AnimationState\n  public walkingAnim: null | AnimationState = null\n  public walkingSpeed: number = 2\n  public lastPlayedAnim: AnimationState\n  public endAnimTimer: Entity\n  public closeDialogTimer: Entity\n  public pauseWalkingTimer: Entity\n  public state: NPCState\n  /**\n   * Creates a talking, walking and animated NPC\n   *\n   * @param {TranformConstructorArgs} position Transform argument object that can contain position, rotation and scale for NPC\n   * @param {string} model String with path to 3D model to use for NPC\n   * @param {() => void} onActivate Function to execute each time the NPC is activated. By default when clicking it or walking near, or calling the `activate()` function\n   * @param {NPCData} data Object of type NPCData, containing multiple configurable parameters\n   *\n   */\n  constructor(\n    position: TranformConstructorArgs,\n    model: string,\n    onActivate: () => void,\n    data?: NPCData\n  ) {\n    super()\n    this.addComponent(new GLTFShape(model))\n    this.addComponent(new Transform(position))\n    engine.addEntity(this)\n\n    this.state = NPCState.STANDING\n\n    if (data && data.portrait) {\n      this.dialog = new DialogWindow(\n        typeof data.portrait === `string` ? { path: data.portrait } : data.portrait,\n        data && data.darkUI ? data.darkUI : false,\n        data.dialogSound ? data.dialogSound : undefined\n      )\n    } else {\n      this.dialog = new DialogWindow(\n        undefined,\n        data && data.darkUI ? data.darkUI : false,\n        data && data.dialogSound ? data.dialogSound : undefined\n      )\n    }\n    this.addComponent(new Animator())\n\n    this.idleAnim = new AnimationState(data && data.idleAnim ? data.idleAnim : 'Idle', {\n      looping: true\n    })\n    this.getComponent(Animator).addClip(this.idleAnim)\n    this.lastPlayedAnim = this.idleAnim\n    this.idleAnim.play()\n\n    if (data && data.walkingAnim) {\n      this.walkingAnim = new AnimationState(data.walkingAnim, {\n        looping: true\n      })\n      this.getComponent(Animator).addClip(this.walkingAnim)\n    }\n\n    this.onActivate = onActivate\n\n    if (data && data.onWalkAway) {\n      this.onWalkAway = data.onWalkAway\n    }\n\n    if (data && data.continueOnWalkAway) {\n      this.continueOnWalkAway = data.continueOnWalkAway\n    }\n\n    this.endAnimTimer = new Entity()\n    engine.addEntity(this.endAnimTimer)\n\n    this.closeDialogTimer = new Entity()\n    engine.addEntity(this.closeDialogTimer)\n\n    this.pauseWalkingTimer = new Entity()\n    engine.addEntity(this.pauseWalkingTimer)\n\n    let activateButton = data && data.onlyClickTrigger ? ActionButton.POINTER : ActionButton.PRIMARY\n\n    // Reaction when clicked\n    this.addComponent(\n      new OnPointerDown(\n        e => {\n          if (this.inCooldown || this.dialog.isDialogOpen) return\n\n          this.activate()\n        },\n        {\n          button: activateButton,\n          hoverText: data && data.hoverText ? data.hoverText : 'Talk',\n          showFeedback: data && data.onlyExternalTrigger ? false : true\n        }\n      )\n    )\n\n    if (data && data.onlyExternalTrigger) {\n      this.removeComponent(OnPointerDown)\n    }\n\n    // trigger when player walks near\n    if (\n      !data ||\n      (data && !data.onlyExternalTrigger && !data.onlyClickTrigger && !data.onlyETrigger)\n    ) {\n      this.addComponent(\n        new NPCTriggerComponent(\n          new TriggerSphereShape(\n            data && data.reactDistance ? data.reactDistance : 6,\n            Vector3.Zero()\n          ),\n          {\n            onCameraEnter: () => {\n              if (this.inCooldown) {\n                log(this.name, ' in cooldown')\n                return\n              } else if (\n                this.dialog.isDialogOpen ||\n                (data && data.onlyExternalTrigger) ||\n                (data && data.onlyClickTrigger)\n              ) {\n                return\n              }\n              this.activate()\n            },\n            onCameraExit: () => {\n              this.handleWalkAway()\n            }\n          }\n        )\n      )\n    }\n\n    if (data && data.faceUser) {\n      this.addComponent(new TrackUserFlag(true, data.turningSpeed ? data.turningSpeed : undefined))\n      this.faceUser = true\n    }\n\n    if (data && data.walkingSpeed) {\n      this.walkingSpeed = data.walkingSpeed\n    }\n\n    if (data && data.coolDownDuration) {\n      this.coolDownDuration = data.coolDownDuration\n    }\n\n    if (data && data.path) {\n      this.addComponent(new NPCLerpData(data.path ? data.path : []))\n      this.getComponent(NPCLerpData).loop = true\n      walkingNPCGroup.push(this)\n      this.followPath()\n    }\n  }\n\n  /**\n   * Calls the NPC's activation function (set on NPC definition). If NPC has `faceUser` = true, it will rotate to face the player. It starts a cooldown counter to avoid reactivating.\n   */\n  activate() {\n    if (this.faceUser) {\n      this.getComponent(TrackUserFlag).active = true\n    }\n    this.inCooldown = true\n    this.addComponentOrReplace(\n      new NPCDelay(this.coolDownDuration, () => {\n        this.inCooldown = false\n      })\n    )\n    this.onActivate()\n  }\n  /**\n   * Closes dialog UI and makes NPC stop turning to face player\n   */\n  endInteraction() {\n    if (this.faceUser) {\n      this.getComponent(TrackUserFlag).active = false\n    }\n    if (this.dialog.isDialogOpen) {\n      this.dialog.closeDialogWindow()\n    }\n    this.state = NPCState.STANDING\n  }\n  /**\n   * Ends interaction and calls the onWalkAway function\n   */\n  handleWalkAway() {\n    if (this.state == NPCState.FOLLOWPATH) {\n      //|| this.state == NPCState.FOLLOWPLAYER\n      return\n    }\n    if (!this.continueOnWalkAway) {\n      this.endInteraction()\n    }\n    if (this.onWalkAway) {\n      this.onWalkAway()\n    }\n  }\n  /**\n   * Starts a conversation, using the Dialog UI\n   * @param {Dialog[]} script Instructions to follow during the conversation\n   * @param {number|string} startIndex Where to start in the script. Can refer to an index in the array or the `name` field of a Dialog entry.\n   * @param {number} duration In seconds. If set, the UI will close after the set time\n   *\n   */\n  talk(script: Dialog[], startIndex?: number | string, duration?: number) {\n    this.introduced = true\n    this.state = NPCState.TALKING\n    if (this.closeDialogTimer.hasComponent(NPCDelay)) {\n      this.closeDialogTimer.removeComponent(NPCDelay)\n    }\n\n    this.dialog.openDialogWindow(script, startIndex ? startIndex : 0)\n\n    if (duration) {\n      this.closeDialogTimer.addComponentOrReplace(\n        new NPCDelay(duration, () => {\n          this.dialog.closeDialogWindow()\n        })\n      )\n    }\n  }\n  /**\n   * The NPC model plays an animation\n   * @param {string} animationName Name of the animation to play, as stored in the model\n   * @param {boolean} noLoop If true, animation plays only once. You must also provide a duration\n   * @param {number} duration In seconds. After the duration is over, the NPC will return to the default animation.\n   *\n   */\n  playAnimation(animationName: string, noLoop?: boolean, duration?: number) {\n    this.lastPlayedAnim.stop()\n    if (this.endAnimTimer.hasComponent(NPCDelay)) {\n      this.endAnimTimer.removeComponent(NPCDelay)\n    }\n    let newAnim = this.getComponent(Animator).getClip(animationName)\n\n    //log('playing anim : ', animationName)\n\n    if (noLoop) {\n      newAnim.looping = false\n      if (duration) {\n        this.endAnimTimer.addComponentOrReplace(\n          new NPCDelay(duration, () => {\n            newAnim.stop()\n            if (this.idleAnim) {\n              this.idleAnim.play()\n              this.lastPlayedAnim = this.idleAnim\n            }\n          })\n        )\n      }\n    }\n\n    newAnim.stop()\n    newAnim.play()\n    this.lastPlayedAnim = newAnim\n  }\n\n  /**\n   * Instruct the NPC to walk following a path. If no data is provided, the NPC uses data from the last time `followPath` was called, or its definition.\n   * @param {FollowPathData} data Object with data to describe a path that an NPC can walk.\n   */\n  followPath(data?: FollowPathData) {\n    if (!this.hasComponent(NPCLerpData)) {\n      if (!data) {\n        return\n      }\n      this.addComponent(new NPCLerpData(data.path ? data.path : []))\n      walkingNPCGroup.push(this)\n    }\n\n    if (this.faceUser) {\n      this.getComponent(TrackUserFlag).active = false\n    }\n\n    let lerp = this.getComponent(NPCLerpData)\n\n    if (data) {\n      if (data.path) {\n        if (data.curve) {\n          let curvedPath = Curve3.CreateCatmullRomSpline(\n            data.path,\n            data.path.length * 4,\n            data.loop ? true : false\n          ).getPoints()\n          if (data.loop) {\n            curvedPath.pop()\n          }\n          lerp.path = curvedPath\n        } else {\n          lerp.path = data.path\n        }\n      }\n\n      if (data.loop != null) {\n        lerp.loop = data.loop\n      }\n\n      if (data.startingPoint != null) {\n        lerp.setIndex(data.startingPoint)\n      }\n\n      if (data.onFinishCallback) {\n        lerp.onFinishCallback = data.onFinishCallback\n      }\n\n      if (data.onReachedPointCallback) {\n        lerp.onReachedPointCallback = data.onReachedPointCallback\n      }\n    }\n\n    // add current location to start of path\n    let currentPos = this.getComponent(Transform).position\n\n    if (\n      (lerp.fraction == 0 && lerp.path[lerp.origin].subtract(currentPos).lengthSquared() > 0.1) ||\n      (lerp.fraction > 0 &&\n        currentPos.subtract(lerp.path[lerp.origin]).normalize() ==\n          lerp.path[lerp.target].subtract(lerp.path[lerp.origin]).normalize())\n    ) {\n      lerp.path.splice(lerp.origin, 0, this.getComponent(Transform).position)\n      lerp.fraction = 0\n    }\n\n    this.getComponent(Transform).lookAt(lerp.path[lerp.target])\n\n    // speed of sections\n\n    let totalDist = 0\n    let pointsDist = []\n    for (let i = 0; i < lerp.path.length - 1; i++) {\n      let sqDist = Vector3.Distance(lerp.path[i], lerp.path[i + 1])\n      totalDist += sqDist\n      pointsDist.push(sqDist)\n    }\n    // measure return to start\n    if (lerp.loop) {\n      let sqDist = Vector3.Distance(lerp.path[lerp.path.length - 1], lerp.path[0])\n      totalDist += sqDist\n      pointsDist.push(sqDist)\n    }\n\n    if (data && data.totalDuration) {\n      lerp.totalDuration = data.totalDuration\n    } else if (data && data.speed) {\n      lerp.totalDuration = totalDist / data.speed\n    } else if (!lerp.totalDuration) {\n      lerp.totalDuration = totalDist / this.walkingSpeed\n    }\n\n    lerp.speed = []\n    for (let i = 0; i < pointsDist.length; i++) {\n      lerp.speed.push(1 / ((pointsDist[i] / totalDist) * lerp.totalDuration))\n    }\n\n    if (this.walkingAnim) {\n      this.idleAnim.stop()\n      this.lastPlayedAnim.stop()\n      this.walkingAnim.play()\n      this.lastPlayedAnim = this.walkingAnim\n    }\n\n    this.state = NPCState.FOLLOWPATH\n  }\n\n  /**\n   * Stops the NPC's walking. If a default animation exists, it will play it.\n   * @param {number} duration In seconds. If a duration is provided, the NPC will return to walking after the duration is over.\n   */\n  stopWalking(duration?: number) {\n    this.state = NPCState.STANDING\n\n    if (this.walkingAnim) {\n      this.walkingAnim.stop()\n      this.idleAnim.play()\n      this.lastPlayedAnim = this.idleAnim\n    }\n\n    if (duration) {\n      this.pauseWalkingTimer.addComponentOrReplace(\n        new NPCDelay(duration, () => {\n          if (this.dialog.isDialogOpen) return\n          this.lastPlayedAnim.stop()\n          if (this.walkingAnim) {\n            this.walkingAnim.play()\n            this.lastPlayedAnim = this.walkingAnim\n          }\n          if (this.endAnimTimer.hasComponent(NPCDelay)) {\n            this.endAnimTimer.removeComponent(NPCDelay)\n          }\n          this.state = NPCState.FOLLOWPATH\n        })\n      )\n    }\n  }\n}\n"],"names":["lockXZRotation","rotSpeed","active","this","faceUserAdded","engine","addSystem","FaceUserSystem","TrackUserFlag","Component","player","Camera","instance","getComponentGroup","dt","_b","__values","followingNPCs","entities","npc","transform","getComponent","Transform","trackUser","direction","Vector3","position","x","y","z","subtract","rotation","Quaternion","Slerp","LookRotation","canvas","UICanvas","visible","ButtonStyles","NPCState","SFFont","Font","Fonts","SanFrancisco","SFHeavyFont","SanFrancisco_Heavy","lightTheme","Texture","darkTheme","setSection","image","section","sourceWidth","sourceHeight","sourceLeft","sourceTop","buttonIconPos","textLen","pos","ConfirmMode","buttons","buttonE","buttonF","buttonRed","buttonDark","roundBlack","squareBlack","roundWhite","squareWhite","roundSilver","squareSilver","roundGold","squareGold","buttonLabels","E","F","backgrounds","promptBackground","promptLargeBackground","promptSlantedBackground","NPCDialog","icons","closeW","closeD","closeWLarge","closeDLarge","closeWNoBack","closeDNoBack","closeWNoBackLarge","closeDNoBackLarge","FDark","FWhite","EDark","EWhite","Timer","TimerLarge","ClickWhite","ClickDark","checkboxes","wOff","wOn","dOff","dOn","wLargeOff","wLargeOn","dLargeOff","dLargeOn","switches","roundOff","roundRed","roundGreen","squareOff","squareRed","squareGreen","seconds","onTimeReachedCallback","NPCTimerSystem","createAndAddToEngine","elapsedTime","targetTime","onTargetTimeReached","entity","_this","removeComponent","NPCDelay_1","NPCDelay","entitiesWithDelay","_instance","ent","timerComponent","portraitXPos","imageXPos","defaultPortrait","useDarkTheme","sound","uiTheme","container","UIContainerRect","adaptWidth","width","vAlign","positionY","panel","UIImage","resources","height","onClick","OnClick","confirmText","Next","defaultPortraitTexture","path","src","portrait","positionX","offsetX","offsetY","text","UIText","textWrapping","hAlign","font","fontSize","hTextAlign","vTextAlign","fontWeight","color","Color4","White","Black","isPointerBlocker","soundEnt","Entity","addComponent","addEntity","setParent","Attachable","AVATAR","AudioSource","AudioClip","volume","defaultSound","button1","CustomDialogButton","Confirm","hide","button2","Cancel","button3","Button3","DARK","button4","Button4","leftClickIcon","DialogTypeInSystem","DialogWindow","NPCScript","textId","UIOpenTime","Date","now","activeTextId","findDialogByName","currentText","audio","addComponentOrReplace","playOnce","source","log","newText","typeSpeed","undefined","ClickAction","Input","subscribe","ActionButton","POINTER","e","isDialogOpen","done","isQuestionPanel","isFixedScreen","rush","EButtonAction","PRIMARY","FButtonAction","SECONDARY","layoutDialogWindow","mode","isQuestion","triggeredByNext","isEndOfDialog","closeDialogWindow","length","goToDialog","triggeredActions","textY","update","label","dummyQuestionDelays","show","value","timer","speed","charsToAdd","Math","floor","visibleChars","fullText","substr","dialog","parent","texture","posX","posY","style","_super","icon","RED","ROUNDBLACK","ROUNDWHITE","ROUNDSILVER","ROUNDGOLD","SQUAREBLACK","SQUAREWHITE","SQUARESILVER","SQUAREGOLD","__extends","Gray","dialogs","name","i","NPCTriggerSystem","_cameraTriggerWrapper","CameraTrigger","TriggerBoxShape","_componentGroup","NPCTriggerComponent","Object","shape","setShape","entitiesWithTriggers","key","forEach","shouldWrapTriggerEntity","wrapTriggerEntity","_triggers","hasOwnProperty","wrapper","isDebugging","updateDebugEntity","isInEngine","trigger","enabled","wasEnabled","addDebugEntity","onCameraEnter","onCameraExit","checkCollisionAgainstCamera","onTriggerEnter","onTriggerExit","checkCollisionAgainstOtherTriggers","removeDebugEntity","removeTriggerFromSystem","uuid","TriggerWrapper","activeCollisions","getActiveCollisions","disengageActiveCollision","t1","t2","engageCollision","wereColliding","hasActiveCollision","areColliding","canTriggersCollide","disengageCollision","triggeredByLayer","layer","getShape","areCollidingAABB","getGlobalPosition","TriggerSphereShape","areCollidingSphere","areCollidingAABBSphere","t1GlobalPosition","t1Shape","t2GlobalPosition","t2Shape","getBoxShapeValues","min","max","DistanceSquared","add","radius","box","sphere","dmin","entityGlobalPosition","center","size","scale","_entity","_trigger","_uuid","_isDebug","debugEnabled","getEntityWorldPosition","Zero","isAddedToEngine","ret","_collidingWith","push","other","_debugMaterial","Material","alphaTest","_debugEntity","BoxShape","withCollisions","SphereShape","rad","removeEntity","entityPosition","hasComponent","clone","parentEntity","getParent","parentRotation","Identity","rotate","_shape","data","_debugEnabled","enableDebug","NPCWalkSystem","NPCLerpData","index","fraction","origin","target","walkingNPCGroup","walkingNPCGroup_1","state","FOLLOWPATH","Lerp","loop","stopWalking","onFinishCallback","onReachedPointCallback","lookAt","model","onActivate","GLTFShape","STANDING","darkUI","dialogSound","Animator","idleAnim","AnimationState","looping","addClip","lastPlayedAnim","play","walkingAnim","onWalkAway","continueOnWalkAway","endAnimTimer","closeDialogTimer","pauseWalkingTimer","activateButton","onlyClickTrigger","OnPointerDown","inCooldown","activate","button","hoverText","showFeedback","onlyExternalTrigger","onlyETrigger","reactDistance","handleWalkAway","faceUser","turningSpeed","walkingSpeed","coolDownDuration","followPath","NPC","endInteraction","script","startIndex","duration","introduced","TALKING","openDialogWindow","animationName","noLoop","stop","newAnim","getClip","lerp","curve","curvedPath","Curve3","CreateCatmullRomSpline","getPoints","pop","startingPoint","setIndex","currentPos","lengthSquared","normalize","splice","totalDist","pointsDist","sqDist","Distance","totalDuration"],"mappings":";;;;;;;;;;;;;;giCAKE,WAAYA,EAA0BC,EAAmBC,GAHzDC,qBAA0B,EAC1BA,aAAkB,EAGXC,IAmBPA,GAAgB,EAEhBC,OAAOC,UAAU,IAAIC,IAjBnBJ,KAAKH,eAAiBA,IAAkC,EAExDG,KAAKF,SAAWA,GAAsB,EAElCC,IACFC,KAAKD,QAAS,GAGpB,OAjBaM,KADZC,UAAU,kBACED,MAmBTJ,GAAyB,EACvBM,EAASC,OAAOC,SAStB,iBAAA,aACUT,mBAAgBE,OAAOQ,kBAAkBL,GAsBnD,OArBED,mBAAA,SAAOO,eACL,IAAgB,IAAAC,EAAAC,EAAAb,KAAKc,cAAcC,wCAAU,CAAxC,IAAIC,UACHC,EAAYD,EAAIE,aAAaC,WAC7BC,EAAYJ,EAAIE,aAAab,GACjC,GAAIe,EAAUrB,OAAQ,CAEpB,IACIsB,EADe,IAAIC,QAAQf,EAAOgB,SAASC,EAAGjB,EAAOgB,SAASE,EAAGlB,EAAOgB,SAASG,GACxDC,SAASV,EAAUM,UAChDN,EAAUW,SAAWC,WAAWC,MAC9Bb,EAAUW,SACVC,WAAWE,aAAaV,GACxBV,EAAKS,EAAUtB,UAGbsB,EAAUvB,iBACZoB,EAAUW,SAASJ,EAAI,EACvBP,EAAUW,SAASF,EAAI,6GChDpBM,EAAS,IAAIC,SAC1BD,EAAOE,SAAU,MC4ELC,EAwHAC,EDlMDC,EAAS,IAAIC,KAAKC,MAAMC,cAExBC,EAAc,IAAIH,KAAKC,MAAMG,oBAE7BC,EAAa,IAAIC,QAAQ,yDACzBC,EAAY,IAAID,QAAQ,iEENnBE,EAAWC,EAAgBC,GACzCD,EAAME,YAAcD,EAAQC,YAC5BF,EAAMG,aAAeF,EAAQE,aAC7BH,EAAMI,WAAaH,EAAQG,WAAaH,EAAQG,WAAa,EAC7DJ,EAAMK,UAAYJ,EAAQI,UAAYJ,EAAQI,UAAY,WAG5CC,EAAcC,GAC5B,IAAIC,GAAO,GAAe,EAAVD,EAChB,OAAOC,GAAO,GAAKA,GAAO,IDkEhBpB,EAAAA,iBAAAA,0BAEVA,QACAA,cACAA,YACAA,0BACAA,0BACAA,4BACAA,wBACAA,4BACAA,4BACAA,8BACAA,2BA4GUC,EAAAA,aAAAA,oCAEVA,oBACAA,8BE7LUoB,IDGG,CACbC,QAAS,CACPC,QAAS,CACPT,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbO,QAAS,CACPV,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbQ,UAAW,CACTX,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbS,WAAY,CACVZ,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbU,WAAY,CACVb,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbW,YAAa,CACXd,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbY,WAAY,CACVf,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEba,YAAa,CACXhB,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbc,YAAa,CACXjB,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbe,aAAc,CACZlB,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbgB,UAAW,CACTnB,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbiB,WAAY,CACVpB,YAAa,IACbC,aAAc,GACdC,WAAY,IACZC,UAAW,MAGfkB,aAAc,CACZC,EAAG,CACDtB,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEboB,EAAG,CACDvB,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,MAGfqB,YAAa,CACXC,iBAAkB,CAChBzB,YAAa,IACbC,aAAc,IACdC,WAAY,IACZC,UAAW,IAEbuB,sBAAuB,CACrB1B,YAAa,IACbC,aAAc,IACdC,WAAY,EACZC,UAAW,IAEbwB,wBAAyB,CACvB3B,YAAa,IACbC,aAAc,IACdC,WAAY,EACZC,UAAW,KAEbyB,UAAW,CACT5B,YAAa,IACbC,aAAc,IACdC,WAAY,GACZC,UAAW,MAGf0B,MAAO,CACLC,OAAQ,CACN9B,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEb4B,OAAQ,CACN/B,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEb6B,YAAa,CACXhC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEb8B,YAAa,CACXjC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEb+B,aAAc,CACZlC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbgC,aAAc,CACZnC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbiC,kBAAmB,CACjBpC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbkC,kBAAmB,CACjBrC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbmC,MAAO,CACLtC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,GAEboC,OAAQ,CACNvC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,GAEbqC,MAAO,CACLxC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,IAEbsC,OAAQ,CACNzC,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,IAEbuC,MAAO,CACL1C,YAAa,GACbC,aAAc,KACdC,WAAY,IACZC,UAAW,KAEbwC,WAAY,CACV3C,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbyC,WAAY,CACV5C,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEb0C,UAAW,CACT7C,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,MAGf2C,WAAY,CACVC,KAAM,CACJ/C,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,IAEb6C,IAAK,CACHhD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEb8C,KAAM,CACJjD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,IAEb+C,IAAK,CACHlD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbgD,UAAW,CACTnD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbiD,SAAU,CACRpD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbkD,UAAW,CACTrD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbmD,SAAU,CACRtD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,MAGfoD,SAAU,CACRC,SAAU,CACRxD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbsD,SAAU,CACRzD,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbuD,WAAY,CACV1D,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbwD,UAAW,CACT3D,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEbyD,UAAW,CACT5D,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,KAEb0D,YAAa,CACX7D,YAAa,GACbC,aAAc,GACdC,WAAY,IACZC,UAAW,oBEnSf,WAAY2D,EAAiBC,GAA7B,WACEC,EAAeC,uBAEflH,KAAKmH,YAAc,EACnBnH,KAAKoH,WAAaL,EAClB/G,KAAKgH,sBAAwBA,EAC7BhH,KAAKqH,oBAAsB,SAAAC,GACzBC,EAAKP,wBACLM,EAAOE,gBAAgBC,UAO7B,SA1BaC,EAuBXA,wBAAA,SAAYV,GACVhH,KAAKgH,sBAAwBA,GAxBpBU,OADZpH,UAAU,kBACEoH,MA4BPC,EAAoBzH,OAAOQ,kBAAkBgH,gBAajD,aACET,EAAeW,UAAY5H,KAc/B,OAvBSiH,uBAAP,WAKE,OAJsB,MAAlBjH,KAAK4H,YACP5H,KAAK4H,UAAY,IAAIX,EACrB/G,OAAOC,UAAUH,KAAK4H,YAEjB5H,KAAK4H,WAOdX,mBAAA,SAAOtG,eACL,IAAgB,IAAAC,EAAAC,EAAA8G,EAAkB5G,wCAAU,CAAvC,IAAI8G,UACHC,EAAiBD,EAAI3G,aAAawG,GAEtCI,EAAeX,aAAexG,EAE1BmH,EAAeX,aAAeW,EAAeV,YAC/CU,EAAeT,oBAAoBQ,uGArB1BZ,YAAmC,WD9BpD,SAAYzD,GACVA,yBACAA,uBACAA,mBACAA,yBACAA,yBALF,CAAYA,IAAAA,OAQZ,IAAIuE,GAAgB,IAGhBC,EAAY,iBAyDd,WAAYC,EAA6BC,EAAkCC,GAA3E,WA5BOnI,eAAsB,GActBA,mBAAwB,EACxBA,sBAA2B,EAC3BA,oBAAyB,EACzBA,kBAAuB,EAEtBA,gBAAqB,EAEtBA,kBAA8B,KAErCA,YAAmBgC,EACnBhC,iBAAqD,KACrDA,mBAAuD,KACvDA,mBAAuD,KAGrDA,KAAKiI,gBAAkBA,GAAoC,KAE3DjI,KAAKoI,QACHF,aAAwBtF,QAAUsF,EAA+B,GAAhBA,EAAuBrF,EAAYF,EAItF3C,KAAKqI,UAAY,IAAIC,gBAAgBtG,GACrChC,KAAKqI,UAAUE,YAAa,EAC5BvI,KAAKqI,UAAUG,MAAQ,OACvBxI,KAAKqI,UAAUI,OAAS,SACxBzI,KAAKqI,UAAUK,UAAY,IAC3B1I,KAAKqI,UAAUnG,SAAU,EAGzBlC,KAAK2I,MAAQ,IAAIC,QAAQ5I,KAAKqI,UAAWrI,KAAKoI,SAC9CtF,EAAW9C,KAAK2I,MAAOE,EAAUpE,YAAYI,WAC7C7E,KAAK2I,MAAMH,MAAQ,IACnBxI,KAAK2I,MAAMG,OAAS,IACpB9I,KAAK2I,MAAMI,QAAU,IAAIC,SAAQ,WAC/BzB,EAAK0B,YAAYzF,EAAY0F,SAG/BlJ,KAAKmJ,uBAAyB,IAAIvG,QAChCqF,EAAkBA,EAAgBmB,KAAOpJ,KAAKoI,QAAQiB,KAIxDrJ,KAAKsJ,SAAW,IAAIV,QAAQ5I,KAAKqI,UAAWrI,KAAKmJ,wBAEjDnJ,KAAKsJ,SAASrG,YACZgF,GAAmBA,EAAgBjF,QAAUiF,EAAgBjF,QAAQC,YAAc,IACrFjD,KAAKsJ,SAASpG,aACZ+E,GAAmBA,EAAgBjF,QAAUiF,EAAgBjF,QAAQE,aAAe,IACtFlD,KAAKsJ,SAASd,MAAQP,GAAmBA,EAAgBO,MAAQP,EAAgBO,MAAQ,IACzFxI,KAAKsJ,SAASR,OAASb,GAAmBA,EAAgBa,OAASb,EAAgBa,OAAS,IAC5F9I,KAAKsJ,SAASC,UACZtB,GAAmBA,EAAgBuB,QAC/BvB,EAAgBuB,QAAUzB,EAC1BA,EACN/H,KAAKsJ,SAASZ,UACZT,GAAmBA,EAAgBwB,QAC/BxB,EAAgBwB,QAtGP,EAAA,EAwGfzJ,KAAKsJ,SAASP,QAAU,IAAIC,SAAQ,WAClCzB,EAAK0B,YAAYzF,EAAY0F,SAI/BlJ,KAAK+C,MAAQ,IAAI6F,QAAQ5I,KAAKqI,UAAW,IAAIzF,QAAQ5C,KAAKoI,QAAQiB,MAElErJ,KAAK+C,MAAME,YAAc,IACzBjD,KAAK+C,MAAMG,aAAe,IAC1BlD,KAAK+C,MAAMK,UAAY,EACvBpD,KAAK+C,MAAMI,WAAa,EACxBnD,KAAK+C,MAAMyF,MAAQ,IACnBxI,KAAK+C,MAAM+F,OAAS,IACpB9I,KAAK+C,MAAMwG,UAAYvB,EACvBhI,KAAK+C,MAAM2F,UAnHC,GAoHZ1I,KAAK+C,MAAMgG,QAAU,IAAIC,SAAQ,WAC/BzB,EAAK0B,YAAYzF,EAAY0F,SAI/BlJ,KAAK0J,KAAO,IAAIC,OAAO3J,KAAKqI,WAC5BrI,KAAK0J,KAAKnB,YAAa,EACvBvI,KAAK0J,KAAKE,cAAe,EACzB5J,KAAK0J,KAAKlB,MAAQ,IAClBxI,KAAK0J,KAAKH,UAAY,GACtBvJ,KAAK0J,KAAKG,OAAS,SACnB7J,KAAK0J,KAAKjB,OAAS,SACnBzI,KAAK0J,KAAKI,KAAOrH,EACjBzC,KAAK0J,KAAKK,SA/HC,GAgIX/J,KAAK0J,KAAKM,WAAa,SACvBhK,KAAK0J,KAAKO,WAAa,SACvBjK,KAAK0J,KAAKhB,UAjIC,GAmIX1I,KAAK0J,KAAKQ,WAAa,SACvBlK,KAAK0J,KAAKS,MAAQjC,EAAekC,OAAOC,QAAUD,OAAOE,QACzDtK,KAAK0J,KAAKa,kBAAmB,EAE7BvK,KAAKwK,SAAW,IAAIC,OACpBzK,KAAKwK,SAASE,aAAa,IAAIvJ,WAC/BjB,OAAOyK,UAAU3K,KAAKwK,UACtBxK,KAAKwK,SAASI,UAAUC,WAAWC,QAE/B3C,IACFnI,KAAKwK,SAASE,aAAa,IAAIK,YAAY,IAAIC,UAAU7C,KACzDnI,KAAKwK,SAAStJ,aAAa6J,aAAaE,OAAS,GAEjDjL,KAAKkL,aAAe/C,GAGtBnI,KAAKmL,QAAU,IAAIC,EACjBpL,KAAKqI,UACLrI,KAAKoI,QACL,MAlJY,KAKA,IAgJZ,WACEb,EAAK0B,YAAYzF,EAAY6H,YAE/B,EACAlJ,eAAaoC,GAEfvE,KAAKmL,QAAQG,OAEbtL,KAAKuL,QAAU,IAAIH,EACjBpL,KAAKqI,UACLrI,KAAKoI,QACL,MA/JY,IAKA,IA6JZ,WACEb,EAAK0B,YAAYzF,EAAYgI,WAE/B,EACArJ,eAAaqC,GAEfxE,KAAKuL,QAAQD,OAEbtL,KAAKyL,QAAU,IAAIL,EACjBpL,KAAKqI,UACLrI,KAAKoI,QACL,SA5KY,IAOA,IAwKZ,WACEb,EAAK0B,YAAYzF,EAAYkI,YAE/B,EACAvJ,eAAawJ,MAEf3L,KAAKyL,QAAQH,OAEbtL,KAAK4L,QAAU,IAAIR,EACjBpL,KAAKqI,UACLrI,KAAKoI,QACL,QAzLY,KAOA,IAqLZ,WACEb,EAAK0B,YAAYzF,EAAYqI,YAE/B,EACA1J,eAAawJ,MAEf3L,KAAK4L,QAAQN,OAGbtL,KAAK8L,cAAgB,IAAIlD,QAAQ5I,KAAKqI,UAAWrI,KAAKoI,SACtDpI,KAAK8L,cAActD,MAAQ,GAC3BxI,KAAK8L,cAAchD,OAAS,GAC5B9I,KAAK8L,cAAcvC,UAAY,IAC/BvJ,KAAK8L,cAAcpD,WAAa,GAChC1I,KAAK8L,cAAc5J,SAAU,EAC7BY,EACE9C,KAAK8L,cACLjJ,EAAYgG,EAAU/D,MAAMe,WAAagD,EAAU/D,MAAMgB,WAG3DiG,EAAmB7E,uBAocvB,OA5bS8E,6BAAP,SAAwBC,EAAqBC,GAA7C,WACElM,KAAKmM,YAAcC,KAAKC,MAExBrM,KAAKiM,UAAYA,EAKfjM,KAAKsM,aAHFJ,EAEwB,iBAAXA,EACIA,EAEAK,EAAiBN,EAAWC,GAJ5B,EAOtB,IAAIM,EAAsBP,EAAUjM,KAAKsM,cACrCL,EAAUjM,KAAKsM,cACf,CAAE5C,KAAM,IA0DZ,GAxDI8C,EAAYC,OACdzM,KAAKwK,SAASkC,sBAAsB,IAAI3B,YAAY,IAAIC,UAAUwB,EAAYC,SAC9EzM,KAAKwK,SAAStJ,aAAa6J,aAAaE,OAAS,GACjDjL,KAAKwK,SAAStJ,aAAa6J,aAAa4B,YAC/B3M,KAAKkL,eACdlL,KAAKwK,SAASkC,sBAAsB,IAAI3B,YAAY,IAAIC,UAAUhL,KAAKkL,gBACvElL,KAAKwK,SAAStJ,aAAa6J,aAAa4B,YAKtCH,EAAYlD,UACdtJ,KAAKsJ,SAASsD,OAAS,IAAIhK,QAAQ4J,EAAYlD,SAASF,MAExDpJ,KAAKsJ,SAASC,UAAYiD,EAAYlD,SAASE,QAC3CgD,EAAYlD,SAASE,QAAUzB,EAC/BA,EAEJ/H,KAAKsJ,SAASZ,UAAY8D,EAAYlD,SAASG,QAC3C+C,EAAYlD,SAASG,QAzQZ,EAAA,EA4QbzJ,KAAKsJ,SAASd,MAAQgE,EAAYlD,SAASd,MAAQgE,EAAYlD,SAASd,MAAQ,IAEhFxI,KAAKsJ,SAASR,OAAS0D,EAAYlD,SAASR,OAAS0D,EAAYlD,SAASR,OAAS,IAE/E0D,EAAYlD,SAAStG,SACvBF,EAAW9C,KAAKsJ,SAAUkD,EAAYlD,SAAStG,SAEjDhD,KAAKsJ,SAASpH,SAAU,GACflC,KAAKiI,iBACdjI,KAAKsJ,SAASsD,OAAS5M,KAAKmJ,uBAE5BnJ,KAAKsJ,SAASC,UACZvJ,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBuB,QACzCxJ,KAAKiI,gBAAgBuB,QAAUzB,EAC/BA,EACN/H,KAAKsJ,SAASZ,UACZ1I,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBwB,QACzCzJ,KAAKiI,gBAAgBwB,QA7Rd,EAAA,EA+RbzJ,KAAKsJ,SAASd,MACZxI,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBO,MAAQxI,KAAKiI,gBAAgBO,MAAQ,IACpFxI,KAAKsJ,SAASR,OACZ9I,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBa,OAAS9I,KAAKiI,gBAAgBa,OAAS,IAElF9I,KAAKiI,gBAAgBjF,SACvBF,EAAW9C,KAAKsJ,SAAUtJ,KAAKiI,gBAAgBjF,SAEjDhD,KAAKsJ,SAASpH,SAAU,IAExB2K,IAAI,eACJ7M,KAAKsJ,SAASpH,SAAU,GAItBsK,EAAYzJ,MAAO,CACrB,IAAIA,EAAmByJ,EAAYzJ,MACnC8J,IAAI,oBAAqB9J,EAAMqG,MAC/BpJ,KAAK+C,MAAM6J,OAAS,IAAIhK,QAAQG,EAAMqG,MAEtCpJ,KAAK+C,MAAMwG,UAAYxG,EAAMyG,QAAUzG,EAAMyG,QAAUxB,EAAYA,EACnEhI,KAAK+C,MAAM2F,UAAY3F,EAAM0G,QAAU1G,EAAM0G,QAjTnC,GAAA,GAmTVzJ,KAAK+C,MAAMyF,MAAQzF,EAAMyF,MAAQzF,EAAMyF,MAAQ,IAC/CxI,KAAKsJ,SAASR,OAAS/F,EAAM+F,OAAS/F,EAAM+F,OAAS,IAEjD/F,EAAMC,SACRF,EAAW9C,KAAK+C,MAAOA,EAAMC,SAE/BhD,KAAK+C,MAAMb,SAAU,OAErBlC,KAAK+C,MAAMb,SAAU,EAKvBlC,KAAK0J,KAAKK,SAAWyC,EAAYzC,SAAWyC,EAAYzC,SA9T7C,GA+TX/J,KAAK0J,KAAKhB,UAAY8D,EAAY/C,QAAU+C,EAAY/C,QA9T7C,GAAA,GA+TXzJ,KAAK0J,KAAKH,UAAYiD,EAAYhD,QAAUgD,EAAYhD,QAAU,EAClExJ,KAAK0J,KAAKxH,SAAU,EACpBlC,KAAKqI,UAAUnG,SAAU,EAEzB6J,EAAmBnE,UAAWkF,QAC5B9M,KACAwM,EAAY9C,KACZ1J,KAAKsM,aACLE,EAAYO,UAAYP,EAAYO,eAAYC,GAI7ChN,KAAKiN,cACRjN,KAAKiN,YAAcC,MAAMzM,SAAS0M,UAAU,cAAeC,aAAaC,SAAS,GAAO,SAAAC,IACjF/F,EAAKgG,eAAiBnB,KAAKC,MAAQ9E,EAAK4E,WAAa,MAErDJ,EAAmBnE,UAAW4F,KAGvBjG,EAAKkG,iBAAoBlG,EAAKmG,eACxCnG,EAAK0B,YAAYzF,EAAY0F,MAH7B6C,EAAmBnE,UAAW+F,WAMlC3N,KAAK4N,cAAgBV,MAAMzM,SAAS0M,UAClC,cACAC,aAAaS,SACb,GACA,SAAAP,GAEI/F,EAAKgG,cACLhG,EAAKkG,iBACL1B,EAAmBnE,UAAW4F,OAC7BpB,KAAKC,MAAQ9E,EAAK4E,WAAa,KAEhC5E,EAAK0B,YAAYzF,EAAY6H,YAInCrL,KAAK8N,cAAgBZ,MAAMzM,SAAS0M,UAClC,cACAC,aAAaW,WACb,GACA,SAAAT,GAEI/F,EAAKgG,cACLhG,EAAKkG,iBACL1B,EAAmBnE,UAAW4F,OAC7BpB,KAAKC,MAAQ9E,EAAK4E,WAAa,KAEhC5E,EAAK0B,YAAYzF,EAAYgI,YAMrCxL,KAAKgO,mBAAmBhO,KAAKsM,cAC7BtM,KAAKuN,cAAe,GAIfvB,wBAAP,SAAmBiC,GACjB,IAAIzB,EAAcxM,KAAKiM,UAAUjM,KAAKsM,cAGtC,GAAI2B,GAAQzK,EAAY0F,OACjBsD,EAAY0B,WAAY,CAI3B,GAHI1B,EAAY2B,iBACd3B,EAAY2B,kBAEV3B,EAAY4B,cAEd,YADApO,KAAKqO,oBAGPrO,KAAKsM,eAIL2B,GAAQzK,EAAY6H,SAClBmB,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,IACN,iBAAtC9B,EAAY/I,QAAQ,GAAG8K,WAChCvO,KAAKsM,aAAeE,EAAY/I,QAAQ,GAAG8K,WAE3CvO,KAAKsM,aAAeC,EAAiBvM,KAAKiM,UAAWO,EAAY/I,QAAQ,GAAG8K,YAE1E/B,EAAY/I,QAAQ,GAAG+K,kBACzBhC,EAAY/I,QAAQ,GAAG+K,oBAKzBP,GAAQzK,EAAYgI,QAClBgB,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,IACN,iBAAtC9B,EAAY/I,QAAQ,GAAG8K,WAChCvO,KAAKsM,aAAeE,EAAY/I,QAAQ,GAAG8K,WAE3CvO,KAAKsM,aAAeC,EAAiBvM,KAAKiM,UAAWO,EAAY/I,QAAQ,GAAG8K,YAE1E/B,EAAY/I,QAAQ,GAAG+K,kBACzBhC,EAAY/I,QAAQ,GAAG+K,oBAKzBP,GAAQzK,EAAYkI,SAClBc,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,IACN,iBAAtC9B,EAAY/I,QAAQ,GAAG8K,WAChCvO,KAAKsM,aAAeE,EAAY/I,QAAQ,GAAG8K,WAE3CvO,KAAKsM,aAAeC,EAAiBvM,KAAKiM,UAAWO,EAAY/I,QAAQ,GAAG8K,YAE1E/B,EAAY/I,QAAQ,GAAG+K,kBACzBhC,EAAY/I,QAAQ,GAAG+K,oBAKzBP,GAAQzK,EAAYqI,SAClBW,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,IACN,iBAAtC9B,EAAY/I,QAAQ,GAAG8K,WAChCvO,KAAKsM,aAAeE,EAAY/I,QAAQ,GAAG8K,WAE3CvO,KAAKsM,aAAeC,EAAiBvM,KAAKiM,UAAWO,EAAY/I,QAAQ,GAAG8K,YAE1E/B,EAAY/I,QAAQ,GAAG+K,kBACzBhC,EAAY/I,QAAQ,GAAG+K,oBAK7BhC,EAAcxM,KAAKiM,UAAUjM,KAAKsM,cAElCP,EAAmBnE,UAAWkF,QAC5B9M,KACAwM,EAAY9C,KACZ1J,KAAKsM,aACLE,EAAYO,UAAYP,EAAYO,eAAYC,IAK7ChB,+BAAP,SAA0BE,GAA1B,WACMM,EAAsBxM,KAAKiM,UAAUC,GAAUlM,KAAKiM,UAAUC,GAAU,CAAExC,KAAM,IAGhF+E,EAAQjC,EAAY/C,QAAU+C,EAAY/C,QA/cnC,GAAA,GAmhBX,GAlEI+C,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,EACvDG,GAAS,GACAjC,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,IAC9DG,GAAS,IAGXzO,KAAK0J,KAAKK,SAAWyC,EAAYzC,SAAWyC,EAAYzC,SAxd7C,GAydX/J,KAAK0J,KAAKhB,UAAY+F,EAElBjC,EAAYC,OACdzM,KAAKwK,SAASkC,sBAAsB,IAAI3B,YAAY,IAAIC,UAAUwB,EAAYC,SAC9EzM,KAAKwK,SAAStJ,aAAa6J,aAAaE,OAAS,GACjDjL,KAAKwK,SAAStJ,aAAa6J,aAAa4B,YAC/B3M,KAAKkL,eACdlL,KAAKwK,SAASkC,sBAAsB,IAAI3B,YAAY,IAAIC,UAAUhL,KAAKkL,gBACvElL,KAAKwK,SAAStJ,aAAa6J,aAAa4B,YAGtCH,EAAYlD,UACdtJ,KAAKsJ,SAASsD,OAAS,IAAIhK,QAAQ4J,EAAYlD,SAASF,MAExDpJ,KAAKsJ,SAASC,UAAYiD,EAAYlD,SAASE,QAC3CgD,EAAYlD,SAASE,QAAUzB,EAC/BA,EAEJ/H,KAAKsJ,SAASZ,UAAY8D,EAAYlD,SAASG,QAC3C+C,EAAYlD,SAASG,QAjfZ,EAAA,EAofbzJ,KAAKsJ,SAASd,MAAQgE,EAAYlD,SAASd,MAAQgE,EAAYlD,SAASd,MAAQ,IAEhFxI,KAAKsJ,SAASR,OAAS0D,EAAYlD,SAASR,OAAS0D,EAAYlD,SAASR,OAAS,IAE/E0D,EAAYlD,SAAStG,SACvBF,EAAW9C,KAAKsJ,SAAUkD,EAAYlD,SAAStG,SAEjDhD,KAAKsJ,SAASpH,SAAU,GACflC,KAAKiI,iBACdjI,KAAKsJ,SAASsD,OAAS,IAAIhK,QAAQ5C,KAAKiI,gBAAgBmB,MAExDpJ,KAAKsJ,SAASC,UACZvJ,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBuB,QACzCxJ,KAAKiI,gBAAgBuB,QAAUzB,EAC/BA,EACN/H,KAAKsJ,SAASZ,UACZ1I,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBwB,QACzCzJ,KAAKiI,gBAAgBwB,QArgBd,EAAA,EAwgBbzJ,KAAKsJ,SAASd,MACZxI,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBO,MAAQxI,KAAKiI,gBAAgBO,MAAQ,IACpFxI,KAAKsJ,SAASR,OACZ9I,KAAKiI,iBAAmBjI,KAAKiI,gBAAgBa,OAAS9I,KAAKiI,gBAAgBa,OAAS,IAElF9I,KAAKiI,gBAAgBjF,SACvBF,EAAW9C,KAAKsJ,SAAUtJ,KAAKiI,gBAAgBjF,SAEjDhD,KAAKsJ,SAASpH,SAAU,IAExB2K,IAAI,eACJ7M,KAAKsJ,SAASpH,SAAU,GAG1BlC,KAAK+C,MAAMb,SAAU,EAGjBsK,EAAYzJ,MAAO,CACrB,IAAIA,EAAmByJ,EAAYzJ,MACnC8J,IAAI,oBAAqB9J,EAAMqG,MAC/BpJ,KAAK+C,MAAM6J,OAAS,IAAIhK,QAAQG,EAAMqG,MAEtCpJ,KAAK+C,MAAMwG,UAAYxG,EAAMyG,QAAUzG,EAAMyG,QAAUxB,EAAYA,EACnEhI,KAAK+C,MAAM2F,UAAY3F,EAAM0G,QAAU1G,EAAM0G,QA5hBnC,GAAA,GA8hBVzJ,KAAK+C,MAAMyF,MAAQgE,EAAYzJ,MAAMyF,MAAQgE,EAAYzJ,MAAMyF,MAAQ,IACvExI,KAAK+C,MAAM+F,OAAS0D,EAAYzJ,MAAM+F,OAAS0D,EAAYzJ,MAAM+F,OAAS,IAEtE/F,EAAMC,SACRF,EAAW9C,KAAK+C,MAAOA,EAAMC,SAE/BhD,KAAK+C,MAAMb,SAAU,OAErBlC,KAAK+C,MAAMb,SAAU,EAGvBlC,KAAKyN,kBAAkBjB,EAAY0B,YAAa1B,EAAY0B,WAE5DlO,KAAK0N,gBAAgBlB,EAAYkB,eAAgBlB,EAAYkB,cAC7D1N,KAAKmL,QAAQG,OACbtL,KAAKuL,QAAQD,OACbtL,KAAKyL,QAAQH,OACbtL,KAAK4L,QAAQN,OAGbtL,KAAK8L,cAAc5J,SAAU,EAEzBsK,EAAY0B,YAEV1B,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvDtO,KAAKmL,QAAQuD,OACXlC,EAAY/I,QAAQ,GAAGkL,MACvBnC,EAAY/I,QAAQ,GAAG+F,QACnBgD,EAAY/I,QAAQ,GAAG+F,QAnjBnB,IAAA,IAqjBRgD,EAAY/I,QAAQ6K,QAAU,EAC1B9B,EAAY/I,QAAQ,GAAGgG,QACrB+C,EAAY/I,QAAQ,GAAGgG,SAhjBpB,IAAA,GAkjBL+C,EAAY/I,QAAQ,GAAGgG,QACvB+C,EAAY/I,QAAQ,GAAGgG,SArjBnB,IAAA,IA2jBR+C,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvDtO,KAAKuL,QAAQmD,OACXlC,EAAY/I,QAAQ,GAAGkL,MACvBnC,EAAY/I,QAAQ,GAAG+F,QACnBgD,EAAY/I,QAAQ,GAAG+F,SAnkBnB,IAAA,GAqkBRgD,EAAY/I,QAAQ6K,QAAU,EAC1B9B,EAAY/I,QAAQ,GAAGgG,QACrB+C,EAAY/I,QAAQ,GAAGgG,SAhkBpB,IAAA,GAkkBL+C,EAAY/I,QAAQ,GAAGgG,QACvB+C,EAAY/I,QAAQ,GAAGgG,SArkBnB,IAAA,IA2kBR+C,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvDtO,KAAKyL,QAAQiD,OACXlC,EAAY/I,QAAQ,GAAGkL,MACvBnC,EAAY/I,QAAQ,GAAG+F,QACnBgD,EAAY/I,QAAQ,GAAG+F,SAnlBnB,IAAA,GAqlBRgD,EAAY/I,QAAQ,GAAGgG,QACnB+C,EAAY/I,QAAQ,GAAGgG,SA/kBnB,IAAA,IAqlBR+C,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvDtO,KAAK4L,QAAQ8C,OACXlC,EAAY/I,QAAQ,GAAGkL,MACvBnC,EAAY/I,QAAQ,GAAG+F,QACnBgD,EAAY/I,QAAQ,GAAG+F,QA/lBnB,IAAA,IAimBRgD,EAAY/I,QAAQ,GAAGgG,QACnB+C,EAAY/I,QAAQ,GAAGgG,SA3lBnB,IAAA,IAgmBZmF,EAAoBlC,sBAClB,IAAIhF,EAAS,IAAK,WAEZ8E,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvD/G,EAAK4D,QAAQ0D,OAGXrC,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvD/G,EAAKgE,QAAQsD,OAIXrC,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvD/G,EAAKkE,QAAQoD,OAIXrC,EAAY/I,SAAW+I,EAAY/I,QAAQ6K,QAAU,GACvD/G,EAAKqE,QAAQiD,YAIT7O,KAAK0N,gBACf1N,KAAK8L,cAAc5J,SAAU,IAO1B8J,8BAAP,WACMhM,KAAKuN,eACPvN,KAAKuN,cAAe,EAEpBvN,KAAKsJ,SAASpH,SAAU,EACxBlC,KAAK0J,KAAKoF,MAAQ,GAClB9O,KAAK0J,KAAKxH,SAAU,EACpBlC,KAAKmL,QAAQG,OACbtL,KAAKuL,QAAQD,OACbtL,KAAKyL,QAAQH,OACbtL,KAAK4L,QAAQN,OACbtL,KAAK8L,cAAc5J,SAAU,EAC7BlC,KAAKqI,UAAUnG,SAAU,sBAyB7B,aAfAlC,WAAgB,EAChBA,WANoB,GAOpBA,kBAAuB,EACvBA,cAAmB,GACnBA,YAAwB,KACxBA,WAAgB,EAWd+L,EAAmBnE,UAAY5H,KAgDnC,OAzDS+L,uBAAP,WAKE,OAJsB,MAAlB/L,KAAK4H,YACP5H,KAAK4H,UAAY,IAAImE,EACrB7L,OAAOC,UAAUH,KAAK4H,YAEjB5H,KAAK4H,WAOdmE,mBAAA,SAAOpL,GACL,IAAIX,KAAKwN,OAETxN,KAAK+O,OAASpO,EACVX,KAAK+O,OAAS,EAAI/O,KAAKgP,OAAO,CAChC,IAAIC,EAAaC,KAAKC,MAAMnP,KAAK+O,OAAS,EAAI/O,KAAKgP,QACnDhP,KAAK+O,MAAQ,EACb/O,KAAKoP,cAAgBH,EACjBjP,KAAKoP,cAAgBpP,KAAKqP,SAASf,SACrCtO,KAAKwN,MAAO,EACZxN,KAAKoP,aAAepP,KAAKqP,SAASf,QAEhCtO,KAAK2J,SACP3J,KAAK2J,OAAOmF,MAAQ9O,KAAKqP,SAASC,OAAO,EAAGtP,KAAKoP,iBAKvDrD,oBAAA,SAAQwD,EAAsB7F,EAAcwC,EAAgB8C,GAC1DhP,KAAK+O,MAAQ,EACb/O,KAAKwN,MAAO,EACZxN,KAAK2J,OAAS4F,EAAO7F,KACrB1J,KAAKqP,SAAW3F,EAChB1J,KAAKoP,aAAe,EAEhBJ,GAASA,GAAS,EACpBhP,KAAK2N,OAEL3N,KAAKgP,MADIA,GAnDO,GA0DlBO,EAAOvB,mBAAmB9B,IAE5BH,iBAAA,WACE/L,KAAKwN,MAAO,EACZxN,KAAK+O,MAAQ,EACb/O,KAAKoP,aAAepP,KAAKqP,SAASf,OAE9BtO,KAAK2J,SACP3J,KAAK2J,OAAOmF,MAAQ9O,KAAKqP,WA/DtBtD,YAAuC,wBA0E9C,WACEyD,EACAC,EAEAd,EACAe,EACAC,EACA5G,EACAb,EACA0H,GATF,MAWEC,mBAYA,GA1BFtI,OAAuB,KAerBA,EAAKxE,MAAQ,IAAI6F,QAAQ4G,EAAQC,GACjClI,EAAKxE,MAAMwG,UAAYmG,EACvBnI,EAAKxE,MAAM2F,UAAYiH,EACvBpI,EAAKxE,MAAMyF,MAAQ,IACnBjB,EAAKxE,MAAM+F,OAAS,GAEpBvB,EAAKoH,MAAQ,IAAIhF,OAAOpC,EAAKxE,OAC7BwE,EAAKqI,MAAQA,GAAgB,KAE7BrI,EAAKwB,QAAUA,EAEXxB,EAAKqI,MACP,OAAQrI,EAAKqI,OACX,KAAKzN,eAAaoC,EAChBzB,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQC,SACzC6D,EAAKoH,MAAMpF,UAAY,GAEvBhC,EAAKuI,KAAO,IAAIlH,QAAQrB,EAAKxE,MAAuB,GAAhBmF,EAAuBrF,EAAYF,GACvE4E,EAAKuI,KAAKtH,MAAQ,GAClBjB,EAAKuI,KAAKhH,OAAS,GAEnBvB,EAAKuI,KAAKjG,OAAS,SACnBtC,EAAKuI,KAAKrH,OAAS,SACnBlB,EAAKuI,KAAKvF,kBAAmB,EAC7BzH,EAAWyE,EAAKuI,KAAMjH,EAAUvE,aAAaC,GAC7CgD,EAAKuI,KAAKvG,UAAYlG,EAAcsL,EAAML,QAE1C,MACF,KAAKnM,eAAaqC,EAChB1B,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQE,SACzC4D,EAAKoH,MAAMpF,UAAY,GAEvBhC,EAAKuI,KAAO,IAAIlH,QAAQrB,EAAKxE,MAAuB,GAAhBmF,EAAuBrF,EAAYF,GACvE4E,EAAKuI,KAAKtH,MAAQ,GAClBjB,EAAKuI,KAAKhH,OAAS,GAEnBvB,EAAKuI,KAAKjG,OAAS,SACnBtC,EAAKuI,KAAKrH,OAAS,SACnBlB,EAAKuI,KAAKvF,kBAAmB,EAC7BzH,EAAWyE,EAAKuI,KAAMjH,EAAUvE,aAAaE,GAC7C+C,EAAKuI,KAAKvG,UAAYlG,EAAcsL,EAAML,QAC1C,MACF,KAAKnM,eAAa4N,IAChBjN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQG,WACzC,MACF,KAAKzB,eAAawJ,KAChB7I,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQI,YACzC,MACF,KAAK1B,eAAa6N,WAChBlN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQK,YACzC,MACF,KAAK3B,eAAa8N,WAChBnN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQO,YACzC,MACF,KAAK7B,eAAa+N,YAChBpN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQS,aACzC,MACF,KAAK/B,eAAagO,UAChBrN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQW,WACzC,MACF,KAAKjC,eAAaiO,YAChBtN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQM,aACzC,MACF,KAAK5B,eAAakO,YAChBvN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQQ,aACzC,MACF,KAAK9B,eAAamO,aAChBxN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQU,cACzC,MACF,KAAKhC,eAAaoO,WAChBzN,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQY,iBAI7CvB,EAAWyE,EAAKxE,MAAO8F,EAAUpF,QAAQS,oBAG3CqD,EAAKoH,MAAMG,MAAQH,EACnBpH,EAAKoH,MAAM3E,WAAa,SACxBzC,EAAKoH,MAAM1E,WAAa,SACxB1C,EAAKoH,MAAM5E,SAAW,GACtBxC,EAAKoH,MAAM7E,KAAOzH,EAClBkF,EAAKoH,MAAMxE,MACTyF,GAASzN,eAAa8N,YAAcL,GAASzN,eAAakO,YACtDjG,OAAOE,QACPF,OAAOC,QACb9C,EAAKoH,MAAMpE,kBAAmB,EAE9BhD,EAAKxE,MAAMgG,QAAU,IAAIC,SAAQ,WAC/BzB,EAAKwB,aAGH6G,GAASzN,eAAaoC,EACxB2I,MAAMzM,SAAS0M,UAAU,cAAeC,aAAaS,SAAS,GAAO,SAAAP,GAC/D/F,EAAKxE,MAAMb,SAEbqF,EAAKwB,aAGA6G,GAASzN,eAAaqC,GAC/B0I,MAAMzM,SAAS0M,UAAU,cAAeC,aAAaW,WAAW,GAAO,SAAAT,GACjE/F,EAAKxE,MAAMb,SAEbqF,EAAKwB,eAgCf,OAzJwCyH,OA+H/BpF,iBAAP,WACEpL,KAAK+C,MAAMb,SAAU,GAGhBkJ,iBAAP,WACEpL,KAAK+C,MAAMb,SAAU,GAGhBkJ,oBAAP,WACEpL,KAAK2O,MAAMxE,MAAQC,OAAOqG,OAC1BzQ,KAAK+C,MAAMwH,kBAAmB,GAGzBa,mBAAP,WACEpL,KAAK2O,MAAMxE,MAAQC,OAAOC,QAC1BrK,KAAK+C,MAAMwH,kBAAmB,GAEzBa,mBAAP,SAAcuD,EAAee,EAAcC,GACzC3P,KAAK2O,MAAMG,MAAQH,EACnB3O,KAAK+C,MAAMwG,UAAYmG,EACvB1P,KAAK+C,MAAM2F,UAAYiH,GAEnB3P,KAAK8P,MAAS9P,KAAK4P,OAASzN,eAAaoC,GAAKvE,KAAK4P,OAASzN,eAAaqC,IAC3ExE,KAAK8P,KAAKvG,UAAYlG,EAAcsL,EAAML,aAtJR7D,QA2JpCmE,EAAsB,IAAInE,OAG9B,SAAS8B,EAAiBmE,EAAmBC,GAC3C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAQpC,OAAQsC,IAClC,GAAIF,EAAQE,GAAGD,MAAQD,EAAQE,GAAGD,MAAQA,EACxC,OAAOC,EAGX,OAAO,EART1Q,OAAOyK,UAAUiE,GEx5BjB,iBAUE,aAJQ5O,eAA4C,GAKlD6Q,EAAiBjJ,UAAY5H,KAC7BA,KAAK8Q,sBAAwB,IAAIC,EAC/B,IAAIC,EAAgB,IAAI1P,QAAQ,GAAK,IAAK,IAAM,IAAIA,QAAQ,EAAG,IAAM,KAGvEtB,KAAKiR,gBAAkB/Q,OAAOQ,kBAAkBwQ,GA2QpD,OAzREC,sBAAWN,kBAAX,WACE,OAAO7Q,KAAKkH,wDAgBP2J,uBAAP,WAKE,OAJsB,MAAlB7Q,KAAK4H,YACP5H,KAAK4H,UAAY,IAAIiJ,EACrB3Q,OAAOC,UAAUH,KAAK4H,YAEjB5H,KAAK4H,WAOdiJ,kCAAA,SAAsBO,GACpBpR,KAAK8Q,sBAAsBO,SAASD,IAGtCP,mBAAA,WAAA,WACMS,EAAuBtR,KAAKiR,gBAAgBlQ,SAUhD,IAAK,IAAMwQ,KAPXD,EAAqBE,SAAQ,SAAAlK,GACvBC,EAAKkK,wBAAwBnK,IAC/BC,EAAKmK,kBAAkBpK,MAKTtH,KAAK2R,UACrB,GAAI3R,KAAK2R,UAAUC,eAAeL,GAAM,CACtC,IAAIM,EAAU7R,KAAK2R,UAAUJ,GAGzBM,EAAQC,eACVD,EAAQE,oBAGLF,EAAQG,aASiB,MAAnBH,EAAQI,SAAmBJ,EAAQI,QAAQC,SAE/CL,EAAQM,YACPN,EAAQC,eACVD,EAAQO,iBAIZP,EAAQM,YAAa,GAGjBN,EAAQI,QAAQI,eAAiBR,EAAQI,QAAQK,eACnDtS,KAAKuS,4BAA4BV,IAI/BA,EAAQI,QAAQO,gBAAkBX,EAAQI,QAAQQ,gBACpDzS,KAAK0S,mCAAmCb,IAEjCA,EAAQM,aACjBN,EAAQM,YAAa,EAEjBN,EAAQC,eACVD,EAAQc,oBAEV9B,EAAiB+B,wBAAwBf,KAhCrCA,EAAQC,eACVD,EAAQc,oBAGV9B,EAAiB+B,wBAAwBf,UAElC7R,KAAK2R,UAAUJ,MAgCtBV,oCAAR,SAAgCvJ,GAC9B,OAAsC0F,MAA/BhN,KAAK2R,UAAUrK,EAAOuL,OAAqD,MAA/B7S,KAAK2R,UAAUrK,EAAOuL,OAGnEhC,8BAAR,SAA0BvJ,GACxBtH,KAAK2R,UAAUrK,EAAOuL,MAAQ,IAAIC,EAAexL,IAGpCuJ,0BAAf,SAAuCgB,GAErC,UADIkB,EAAmBlB,EAAQmB,sBACtBpC,EAAI,EAAGA,EAAImC,EAAiBzE,OAAQsC,IAAK,GAE9CmC,EAAiBnC,gBAAOC,EAAiBjJ,gCAAWkJ,wBACrB,MAA/BiC,EAAiBnC,GAAGqB,UAGWc,EAAiBnC,GAAGqB,QAAQQ,eAAiBZ,EAAQvK,QACnFyL,EAAiBnC,GAAGqB,QAAQQ,cAA4CZ,EAAQvK,QACnFyL,EAAiBnC,GAAGqC,yBAAyBpB,GAC7CA,EAAQoB,yBAAyBF,EAAiBnC,MAIvCC,qBAAf,SAAkCqC,EAAoBC,GACpDD,EAAGD,yBAAyBE,GAC5BA,EAAGF,yBAAyBC,GAExBA,EAAGjB,QAAQQ,eAAiBU,EAAG7L,QAAQ4L,EAAGjB,QAAQQ,cAAcU,EAAG7L,QACnE6L,EAAGlB,QAAQQ,eAAiBS,EAAG5L,QAAQ6L,EAAGlB,QAAQQ,cAAcS,EAAG5L,SAG1DuJ,kBAAf,SAA+BqC,EAAoBC,GACjDD,EAAGE,gBAAgBD,GACnBA,EAAGC,gBAAgBF,GAEfA,EAAGjB,QAAQO,gBAAkBW,EAAG7L,QAAQ4L,EAAGjB,QAAQO,eAAeW,EAAG7L,QACrE6L,EAAGlB,QAAQO,gBAAkBU,EAAG5L,QAAQ6L,EAAGlB,QAAQO,eAAeU,EAAG5L,SAGnEuJ,wCAAR,SAAoCgB,GAClC,IAAIwB,EAAgBxB,EAAQyB,mBAAmBtT,KAAK8Q,uBAChDyC,EAAe1C,EAAiB0C,aAAa1B,EAAS7R,KAAK8Q,uBAE3DuC,IAAkBE,GACpB1B,EAAQoB,yBAAyBjT,KAAK8Q,uBAClCe,EAAQI,QAAQK,cAAcT,EAAQI,QAAQK,iBACxCe,GAAiBE,IAC3B1B,EAAQuB,gBAAgBpT,KAAK8Q,uBACzBe,EAAQI,QAAQI,eAAeR,EAAQI,QAAQI,kBAI/CxB,+CAAR,SAA2CgB,GACzC,IAAK,IAAMN,KAAOvR,KAAK2R,UACrB,GAAI3R,KAAK2R,UAAUC,eAAeL,IAC5BA,GAAOM,EAAQgB,MAAQ7S,KAAK2R,UAAUJ,GAAKU,QAAQC,SACjDrB,EAAiB2C,mBAAmB3B,EAAS7R,KAAK2R,UAAUJ,IAAO,CACrE,IAAI8B,EAAgBxB,EAAQyB,mBAAmBtT,KAAK2R,UAAUJ,IAC1DgC,EAAe1C,EAAiB0C,aAAa1B,EAAS7R,KAAK2R,UAAUJ,IAErE8B,IAAkBE,EACpB1C,EAAiB4C,mBAAmB5B,EAAS7R,KAAK2R,UAAUJ,KACpD8B,GAAiBE,GACzB1C,EAAiBuC,gBAAgBvB,EAAS7R,KAAK2R,UAAUJ,MAOtDV,qBAAf,SAAkCqC,EAAoBC,GACpD,OAAmC,GAA/BD,EAAGjB,QAAQyB,kBAC4C,IAAnDP,EAAGlB,QAAQ0B,MAAQT,EAAGjB,QAAQyB,mBAGzB7C,eAAf,SAA4BqC,EAAoBC,GAC9C,OAAID,EAAGU,qBAAsB5C,GAAmBmC,EAAGS,qBAAsB5C,EAChEH,EAAiBgD,iBACtBX,EAAGY,oBACHZ,EAAGU,WACHT,EAAGW,oBACHX,EAAGS,YAGLV,EAAGU,qBAAsBG,GACzBZ,EAAGS,qBAAsBG,EAElBlD,EAAiBmD,mBACtBd,EAAGY,oBACHZ,EAAGU,WACHT,EAAGW,oBACHX,EAAGS,YAGLV,EAAGU,qBAAsB5C,GACzBmC,EAAGS,qBAAsBG,EAElBlD,EAAiBoD,uBACtBf,EAAGY,oBACHZ,EAAGU,WACHT,EAAGW,oBACHX,EAAGS,YAGLV,EAAGU,qBAAsBG,GACzBZ,EAAGS,qBAAsB5C,GAElBH,EAAiBoD,uBACtBd,EAAGW,oBACHX,EAAGS,WACHV,EAAGY,oBACHZ,EAAGU,aAMM/C,mBAAf,SACEqD,EACAC,EACAC,EACAC,GAEA,IAAInB,EAAKrC,EAAiByD,kBAAkBJ,EAAkBC,GAC1DhB,EAAKtC,EAAiByD,kBAAkBF,EAAkBC,GAC9D,OACEnB,EAAGqB,IAAI/S,GAAK2R,EAAGqB,IAAIhT,GACnB0R,EAAGsB,IAAIhT,GAAK2R,EAAGoB,IAAI/S,GACnB0R,EAAGqB,IAAI9S,GAAK0R,EAAGqB,IAAI/S,GACnByR,EAAGsB,IAAI/S,GAAK0R,EAAGoB,IAAI9S,GACnByR,EAAGqB,IAAI7S,GAAKyR,EAAGqB,IAAI9S,GACnBwR,EAAGsB,IAAI9S,GAAKyR,EAAGoB,IAAI7S,GAIRmP,qBAAf,SACEqD,EACAC,EACAC,EACAC,GAMA,OAJa/S,QAAQmT,gBACnBP,EAAiBQ,IAAIP,EAAQ5S,UAC7B6S,EAAiBM,IAAIL,EAAQ9S,WAEf4S,EAAQQ,OAASR,EAAQQ,OAASN,EAAQM,OAASN,EAAQM,QAG9D9D,yBAAf,SACEqD,EACAC,EACAC,EACAC,GAEA,IAAIO,EAAM/D,EAAiByD,kBAAkBJ,EAAkBC,GAC3DU,EACMT,EAAiBM,IAAIL,EAAQ9S,UADnCsT,EAEMR,EAAQM,OAGdG,EAAO,EAcX,OAbID,EAAcrT,EAAIoT,EAAIL,IAAI/S,IAC5BsT,IAASF,EAAIL,IAAI/S,EAAIqT,EAAcrT,IAAMoT,EAAIL,IAAI/S,EAAIqT,EAAcrT,IACjEqT,EAAcrT,EAAIoT,EAAIJ,IAAIhT,IAC5BsT,IAASD,EAAcrT,EAAIoT,EAAIJ,IAAIhT,IAAMqT,EAAcrT,EAAIoT,EAAIJ,IAAIhT,IACjEqT,EAAcpT,EAAImT,EAAIL,IAAI9S,IAC5BqT,IAASF,EAAIL,IAAI9S,EAAIoT,EAAcpT,IAAMmT,EAAIL,IAAI9S,EAAIoT,EAAcpT,IACjEoT,EAAcpT,EAAImT,EAAIJ,IAAI/S,IAC5BqT,IAASD,EAAcpT,EAAImT,EAAIJ,IAAI/S,IAAMoT,EAAcpT,EAAImT,EAAIJ,IAAI/S,IACjEoT,EAAcnT,EAAIkT,EAAIL,IAAI7S,IAC5BoT,IAASF,EAAIL,IAAI7S,EAAImT,EAAcnT,IAAMkT,EAAIL,IAAI7S,EAAImT,EAAcnT,IACjEmT,EAAcnT,EAAIkT,EAAIJ,IAAI9S,IAC5BoT,IAASD,EAAcnT,EAAIkT,EAAIJ,IAAI9S,IAAMmT,EAAcnT,EAAIkT,EAAIJ,IAAI9S,IAE9DoT,EAAOD,EAAgBA,GAGjBhE,oBAAf,SACEkE,EACA3D,GAEA,IAAI4D,EAASD,EAAqBL,IAAItD,EAAM7P,UAC5C,MAAO,CACLyT,OAAQA,EACRT,IAAKS,EAAOrT,SAASyP,EAAM6D,KAAKC,MAAM,KACtCV,IAAKQ,EAAON,IAAItD,EAAM6D,KAAKC,MAAM,OAvRtBrE,YAAqC,uBAkTpD,WAAYvJ,GArBZtH,iBAAsB,EAcZA,WAAgB,GAChBA,oBAAiD,GAEnDA,eAAoB,EACpBA,kBAA8B,KAIpCA,KAAKmV,QAAU7N,EACXA,IACFtH,KAAKoV,SAAW9N,EAAOpG,aAAagQ,GACpClR,KAAKqV,MAAQ/N,EAAOuL,KACpB7S,KAAKsV,SAAWtV,KAAKoV,SAASG,aAC1BvV,KAAKsV,UACPtV,KAAKoS,kBAqGb,OA/HEjB,sBAAI2B,0BAAJ,WACE,OAAO9S,KAAKmV,yCAEdhE,sBAAI2B,2BAAJ,WACE,OAAO9S,KAAKoV,0CAEdjE,sBAAI2B,wBAAJ,WACE,OAAO9S,KAAKqV,uCAwBdvC,8BAAA,WACE,OAAI9S,KAAKmV,QAAgBrC,EAAe0C,uBAAuBxV,KAAKmV,SAC7D7T,QAAQmU,QAGjB3C,qBAAA,WACE,OAAO9S,KAAKoV,SAAShE,OAGvB0B,uBAAA,WACE,OAAuB,MAAhB9S,KAAKmV,SAAmBnV,KAAKmV,QAAQO,mBAG9C5C,gCAAA,WACE,IAAI6C,EAAwB,GAE5B,IAAK,IAAMpE,KAAOvR,KAAK4V,eACjB5V,KAAK4V,eAAehE,eAAeL,IACrCoE,EAAIE,KAAK7V,KAAK4V,eAAerE,IAGjC,OAAOoE,GAGT7C,+BAAA,SAAmBgD,GACjB,OAA0C9I,MAAnChN,KAAK4V,eAAeE,EAAMjD,OAAyD,MAAnC7S,KAAK4V,eAAeE,EAAMjD,OAGnFC,qCAAA,SAAyBgD,UAChB9V,KAAK4V,eAAeE,EAAMjD,OAGnCC,4BAAA,SAAgBgD,GACd9V,KAAK4V,eAAeE,EAAMjD,MAAQiD,GAGpChD,wBAAA,WACE,OAAO9S,KAAKsV,UAGdxC,2BAAA,WAME,GALKA,EAAeiD,iBAClBjD,EAAeiD,eAAiB,IAAIC,SACpClD,EAAeiD,eAAeE,UAAY,IAGnB,MAArBjW,KAAKkW,aAAsB,CAC7BlW,KAAKkW,aAAe,IAAIzL,OAExB,IAAMxJ,EAAY,IAAIE,UAItB,GAHAnB,KAAKkW,aAAaxL,aAAazJ,GAC/BjB,KAAKkW,aAAaxL,aAAaoI,EAAeiD,gBAE1C/V,KAAK4T,qBAAsB5C,GACvBI,EAAQ,IAAI+E,UACZC,gBAAiB,EACvBpW,KAAKkW,aAAaxL,aAAa0G,GAC/BnQ,EAAUiU,MAASlV,KAAK4T,WAA+BqB,KAEzD,GAAIjV,KAAK4T,qBAAsBG,EAAoB,CACjD,IAAM3C,GAAAA,EAAQ,IAAIiF,aACZD,gBAAiB,EACvBpW,KAAKkW,aAAaxL,aAAa0G,GAC/B,IAAIkF,EAAOtW,KAAK4T,WAAkCe,OAClD1T,EAAUiU,MAAQ,IAAI5T,QAAQgV,EAAKA,EAAKA,IAG5CpW,OAAOyK,UAAU3K,KAAKkW,eAGxBpD,8BAAA,WAC2B,MAArB9S,KAAKkW,cAAsBhW,OAAOqW,aAAavW,KAAKkW,eAG1DpD,8BAAA,WACM9S,KAAKkW,eACPlW,KAAKkW,aAAahV,aAAaC,WAAWI,SAAWvB,KAAK8T,oBAAoBY,IAC5E1U,KAAK4T,WAAWrS,YAKPuR,yBAAf,SAAsCxL,GACpC,IAAIkP,EAAiBlP,EAAOmP,aAAatV,WACrCmG,EAAOpG,aAAaC,WAAWI,SAASmV,QACxCpV,QAAQmU,OACRkB,EAAerP,EAAOsP,YAE1B,GAAoB,MAAhBD,EAAsB,CACxB,IAAIE,EAAiBF,EAAaF,aAAatV,WAC3CwV,EAAazV,aAAaC,WAAWS,SACrCC,WAAWiV,SACf,OAAO9W,KAAKwV,uBAAuBmB,GAAcjC,IAAI8B,EAAeO,OAAOF,IAE7E,OAAOL,GA5GM1D,iBAAkC,wBAmHjD,WAAY1B,GAAZ,MACEvB,0BACAtI,EAAKyP,OAAS5F,EACd7J,EAAK8N,MAAQ,kBA6BjB,OAnC4B7E,OAS1BO,8BAAA,WACE,OAAOvQ,OAAOC,SAASc,UAGzBwP,qBAAA,WACE,OAAO/Q,KAAKgX,QAGdjG,qBAAA,SAASK,GACPpR,KAAKgX,OAAS5F,GAGhBL,uBAAA,WACE,OAAO,GAGTA,+BAAA,SAAmB+E,GACjB,OAAO,GAGT/E,qCAAA,SAAyB+E,KAEzB/E,4BAAA,SAAgB+E,KAChB/E,wBAAA,WACE,OAAO,MAjCiB+B,gBAqF1B,WAAY1B,EAA6C6F,GA3CzDjX,cAAmB,EAQnBA,WAAgB,EAIhBA,sBAA2B,EAgCzB6Q,EAAiB3J,uBACjBlH,KAAKoR,MAAQA,EACbpR,KAAK2T,MAAQsD,GAAQA,EAAKtD,MAAQsD,EAAKtD,MAAQ,EAC/C3T,KAAK0T,iBAAmBuD,GAAQA,EAAKvD,iBAAmBuD,EAAKvD,iBAAmB,EAChF1T,KAAKwS,eAAiByE,GAAQA,EAAKzE,eAAiByE,EAAKzE,oBAAiBxF,EAC1EhN,KAAKyS,cAAgBwE,GAAQA,EAAKxE,cAAgBwE,EAAKxE,mBAAgBzF,EACvEhN,KAAKqS,cAAgB4E,GAAQA,EAAK5E,cAAgB4E,EAAK5E,mBAAgBrF,EACvEhN,KAAKsS,aAAe2E,GAAQA,EAAK3E,aAAe2E,EAAK3E,kBAAetF,EACpEhN,KAAKkX,iBAAgBD,IAAQA,EAAKE,cAAcF,EAAKE,YAEzD,OAtBEhG,sBAAID,gCAAJ,WACE,OAAOlR,KAAKkX,+CArCHhG,KADZ5Q,UAAU,wBACE4Q,QAgEX,SAAY+D,EAAe1T,GACzBvB,KAAKiV,KAAOA,EACZjV,KAAKuB,SAAWA,KAQlB,SAAYoT,EAAgBpT,GAC1BvB,KAAK2U,OAASA,EACd3U,KAAKuB,SAAWA,gBCvgBlB,WAAY6H,GARZpJ,YAAiB,EACjBA,YAAiB,EACjBA,cAAmB,EACnBA,mBAAwB,EACxBA,WAAkB,GAClBA,WAAgB,EAIdA,KAAKoJ,KAAOA,EACZgO,EAAclQ,uBAQlB,OALEmQ,qBAAA,SAASC,GACPtX,KAAKuX,SAAW,EAChBvX,KAAKwX,OAASF,EACdtX,KAAKyX,OAASH,EAAQ,EAAItX,KAAKoJ,KAAKkF,OAASgJ,EAAQ,EAAI,GAlBhDD,KADZ/W,UAAU,gBACE+W,MAsBFK,EAAyB,gBAgDlC,aACEN,EAAcxP,UAAY5H,KAE9B,OA/CEoX,mBAAA,SAAOzW,eACL,IAAgB,IAAAgX,EAAA9W,EAAA6W,iCAAiB,CAA5B,IAAI1W,UACP,GAAIA,EAAI4W,OAASxV,WAASyV,WAAY,CACpC,IAAI5W,EAAYD,EAAIE,aAAaC,WAC7BiI,EAAOpI,EAAIE,aAAamW,GAC5B,GAAIjO,EAAKmO,SAAW,EAClBnO,EAAKmO,UAAY5W,EAAKyI,EAAK4F,MAAM5F,EAAKoO,QACtCvW,EAAUM,SAAWD,QAAQwW,KAC3B1O,EAAKA,KAAKA,EAAKoO,QACfpO,EAAKA,KAAKA,EAAKqO,QACfrO,EAAKmO,cAEF,CAGL,GAFAnO,EAAKoO,OAASpO,EAAKqO,OACnBrO,EAAKqO,QAAU,EACXrO,EAAKqO,QAAUrO,EAAKA,KAAKkF,OAAQ,CACnC,IAAIlF,EAAK2O,KAQP,OALA/W,EAAIgX,cACA5O,EAAK6O,kBACP7O,EAAK6O,wBAEP7O,EAAKmO,SAAW,GANhBnO,EAAKqO,OAAS,OASPrO,EAAK8O,wBACd9O,EAAK8O,yBAEP9O,EAAKmO,SAAW,EAChBtW,EAAUkX,OAAO/O,EAAKA,KAAKA,EAAKqO,+GAMjCL,uBAAP,WAKE,OAJsB,MAAlBpX,KAAK4H,YACP5H,KAAK4H,UAAY,IAAIwP,EACrBlX,OAAOC,UAAUH,KAAK4H,YAEjB5H,KAAK4H,WA1CPwP,YAAkC,wBCczC,WACE7V,EACA6W,EACAC,EACApB,GAJF,MAMEpH,mBA/BKtI,cAAsB,EAGtBA,aAAkC,KAClCA,sBAA8B,EAC9BA,cAAsB,EACtBA,mBAA2B,EAC3BA,YAAoB,EAEpBA,cAAqC,KACrCA,eAAuB,EAsB5BA,EAAKmD,aAAa,IAAI4N,UAAUF,IAChC7Q,EAAKmD,aAAa,IAAIvJ,UAAUI,IAChCrB,OAAOyK,UAAUpD,GAEjBA,EAAKqQ,MAAQxV,WAASmW,SAElBtB,GAAQA,EAAK3N,SACf/B,EAAKgI,OAAS,IAAIvD,EACS,iBAAlBiL,EAAK3N,SAAwB,CAAEF,KAAM6N,EAAK3N,UAAa2N,EAAK3N,YACnE2N,IAAQA,EAAKuB,SAASvB,EAAKuB,OAC3BvB,EAAKwB,YAAcxB,EAAKwB,iBAAczL,GAGxCzF,EAAKgI,OAAS,IAAIvD,OAChBgB,KACAiK,IAAQA,EAAKuB,SAASvB,EAAKuB,OAC3BvB,GAAQA,EAAKwB,YAAcxB,EAAKwB,iBAAczL,GAGlDzF,EAAKmD,aAAa,IAAIgO,UAEtBnR,EAAKoR,SAAW,IAAIC,eAAe3B,GAAQA,EAAK0B,SAAW1B,EAAK0B,SAAW,OAAQ,CACjFE,SAAS,IAEXtR,EAAKrG,aAAawX,UAAUI,QAAQvR,EAAKoR,UACzCpR,EAAKwR,eAAiBxR,EAAKoR,SAC3BpR,EAAKoR,SAASK,OAEV/B,GAAQA,EAAKgC,cACf1R,EAAK0R,YAAc,IAAIL,eAAe3B,EAAKgC,YAAa,CACtDJ,SAAS,IAEXtR,EAAKrG,aAAawX,UAAUI,QAAQvR,EAAK0R,cAG3C1R,EAAK8Q,WAAaA,EAEdpB,GAAQA,EAAKiC,aACf3R,EAAK2R,WAAajC,EAAKiC,YAGrBjC,GAAQA,EAAKkC,qBACf5R,EAAK4R,mBAAqBlC,EAAKkC,oBAGjC5R,EAAK6R,aAAe,IAAI3O,OACxBvK,OAAOyK,UAAUpD,EAAK6R,cAEtB7R,EAAK8R,iBAAmB,IAAI5O,OAC5BvK,OAAOyK,UAAUpD,EAAK8R,kBAEtB9R,EAAK+R,kBAAoB,IAAI7O,OAC7BvK,OAAOyK,UAAUpD,EAAK+R,mBAEtB,IAAIC,EAAiBtC,GAAQA,EAAKuC,iBAAmBpM,aAAaC,QAAUD,aAAaS,eAGzFtG,EAAKmD,aACH,IAAI+O,eACF,SAAAnM,GACM/F,EAAKmS,YAAcnS,EAAKgI,OAAOhC,cAEnChG,EAAKoS,aAEP,CACEC,OAAQL,EACRM,UAAW5C,GAAQA,EAAK4C,UAAY5C,EAAK4C,UAAY,OACrDC,cAAc7C,IAAQA,EAAK8C,uBAK7B9C,GAAQA,EAAK8C,qBACfxS,EAAKC,gBAAgBiS,eAKpBxC,KACAA,GAASA,EAAK8C,qBAAwB9C,EAAKuC,kBAAqBvC,EAAK+C,eAEtEzS,EAAKmD,aACH,IAAIwG,EACF,IAAI6C,EACFkD,GAAQA,EAAKgD,cAAgBhD,EAAKgD,cAAgB,EAClD3Y,QAAQmU,QAEV,CACEpD,cAAe,WACT9K,EAAKmS,WACP7M,IAAItF,EAAKoJ,KAAM,gBAGfpJ,EAAKgI,OAAOhC,cACX0J,GAAQA,EAAK8C,qBACb9C,GAAQA,EAAKuC,kBAIhBjS,EAAKoS,YAEPrH,aAAc,WACZ/K,EAAK2S,qBAOXjD,GAAQA,EAAKkD,WACf5S,EAAKmD,aAAa,IAAIrK,GAAc,EAAM4W,EAAKmD,aAAenD,EAAKmD,kBAAepN,IAClFzF,EAAK4S,UAAW,GAGdlD,GAAQA,EAAKoD,eACf9S,EAAK8S,aAAepD,EAAKoD,cAGvBpD,GAAQA,EAAKqD,mBACf/S,EAAK+S,iBAAmBrD,EAAKqD,kBAG3BrD,GAAQA,EAAK7N,OACf7B,EAAKmD,aAAa,IAAI2M,EAAYJ,EAAK7N,KAAO6N,EAAK7N,KAAO,KAC1D7B,EAAKrG,aAAamW,GAAaU,MAAO,EACtCL,EAAgB7B,KAAKtO,GACrBA,EAAKgT,gBAmPX,OAlZyB/J,OAsKvBgK,qBAAA,WAAA,WACMxa,KAAKma,WACPna,KAAKkB,aAAab,GAAeN,QAAS,GAE5CC,KAAK0Z,YAAa,EAClB1Z,KAAK0M,sBACH,IAAIhF,EAAS1H,KAAKsa,kBAAkB,WAClC/S,EAAKmS,YAAa,MAGtB1Z,KAAKqY,cAKPmC,2BAAA,WACMxa,KAAKma,WACPna,KAAKkB,aAAab,GAAeN,QAAS,GAExCC,KAAKuP,OAAOhC,cACdvN,KAAKuP,OAAOlB,oBAEdrO,KAAK4X,MAAQxV,WAASmW,UAKxBiC,2BAAA,WACMxa,KAAK4X,OAASxV,WAASyV,aAItB7X,KAAKmZ,oBACRnZ,KAAKya,iBAEHza,KAAKkZ,YACPlZ,KAAKkZ,eAUTsB,iBAAA,SAAKE,EAAkBC,EAA8BC,GAArD,WACE5a,KAAK6a,YAAa,EAClB7a,KAAK4X,MAAQxV,WAAS0Y,QAClB9a,KAAKqZ,iBAAiB5C,aAAa/O,IACrC1H,KAAKqZ,iBAAiB7R,gBAAgBE,GAGxC1H,KAAKuP,OAAOwL,iBAAiBL,EAAQC,GAA0B,GAE3DC,GACF5a,KAAKqZ,iBAAiB3M,sBACpB,IAAIhF,EAASkT,GAAU,WACrBrT,EAAKgI,OAAOlB,yBAYpBmM,0BAAA,SAAcQ,EAAuBC,EAAkBL,GAAvD,WACE5a,KAAK+Y,eAAemC,OAChBlb,KAAKoZ,aAAa3C,aAAa/O,IACjC1H,KAAKoZ,aAAa5R,gBAAgBE,GAEpC,IAAIyT,EAAUnb,KAAKkB,aAAawX,UAAU0C,QAAQJ,GAI9CC,IACFE,EAAQtC,SAAU,EACd+B,GACF5a,KAAKoZ,aAAa1M,sBAChB,IAAIhF,EAASkT,GAAU,WACrBO,EAAQD,OACJ3T,EAAKoR,WACPpR,EAAKoR,SAASK,OACdzR,EAAKwR,eAAiBxR,EAAKoR,eAOrCwC,EAAQD,OACRC,EAAQnC,OACRhZ,KAAK+Y,eAAiBoC,GAOxBX,uBAAA,SAAWvD,GACT,IAAKjX,KAAKyW,aAAaY,GAAc,CACnC,IAAKJ,EACH,OAEFjX,KAAK0K,aAAa,IAAI2M,EAAYJ,EAAK7N,KAAO6N,EAAK7N,KAAO,KAC1DsO,EAAgB7B,KAAK7V,MAGnBA,KAAKma,WACPna,KAAKkB,aAAab,GAAeN,QAAS,GAG5C,IAAIsb,EAAOrb,KAAKkB,aAAamW,GAE7B,GAAIJ,EAAM,CACR,GAAIA,EAAK7N,KACP,GAAI6N,EAAKqE,MAAO,CACd,IAAIC,EAAaC,OAAOC,uBACtBxE,EAAK7N,KACc,EAAnB6N,EAAK7N,KAAKkF,SACV2I,EAAKc,MACL2D,YACEzE,EAAKc,MACPwD,EAAWI,MAEbN,EAAKjS,KAAOmS,OAEZF,EAAKjS,KAAO6N,EAAK7N,KAIJ,MAAb6N,EAAKc,OACPsD,EAAKtD,KAAOd,EAAKc,MAGO,MAAtBd,EAAK2E,eACPP,EAAKQ,SAAS5E,EAAK2E,eAGjB3E,EAAKgB,mBACPoD,EAAKpD,iBAAmBhB,EAAKgB,kBAG3BhB,EAAKiB,yBACPmD,EAAKnD,uBAAyBjB,EAAKiB,wBAKvC,IAAI4D,EAAa9b,KAAKkB,aAAaC,WAAWI,UAG1B,GAAjB8Z,EAAK9D,UAAiB8D,EAAKjS,KAAKiS,EAAK7D,QAAQ7V,SAASma,GAAYC,gBAAkB,IACpFV,EAAK9D,SAAW,GACfuE,EAAWna,SAAS0Z,EAAKjS,KAAKiS,EAAK7D,SAASwE,aAC1CX,EAAKjS,KAAKiS,EAAK5D,QAAQ9V,SAAS0Z,EAAKjS,KAAKiS,EAAK7D,SAASwE,eAE5DX,EAAKjS,KAAK6S,OAAOZ,EAAK7D,OAAQ,EAAGxX,KAAKkB,aAAaC,WAAWI,UAC9D8Z,EAAK9D,SAAW,GAGlBvX,KAAKkB,aAAaC,WAAWgX,OAAOkD,EAAKjS,KAAKiS,EAAK5D,SAMnD,IAFA,IAAIyE,EAAY,EACZC,EAAa,GACRvL,EAAI,EAAGA,EAAIyK,EAAKjS,KAAKkF,OAAS,EAAGsC,IAAK,CAC7C,IAAIwL,EACJF,GADIE,EAAS9a,QAAQ+a,SAAShB,EAAKjS,KAAKwH,GAAIyK,EAAKjS,KAAKwH,EAAI,IAE1DuL,EAAWtG,KAAKuG,GAGdf,EAAKtD,OAEPmE,GADIE,EAAS9a,QAAQ+a,SAAShB,EAAKjS,KAAKiS,EAAKjS,KAAKkF,OAAS,GAAI+M,EAAKjS,KAAK,IAEzE+S,EAAWtG,KAAKuG,IAGdnF,GAAQA,EAAKqF,cACfjB,EAAKiB,cAAgBrF,EAAKqF,cACjBrF,GAAQA,EAAKjI,MACtBqM,EAAKiB,cAAgBJ,EAAYjF,EAAKjI,MAC5BqM,EAAKiB,gBACfjB,EAAKiB,cAAgBJ,EAAYlc,KAAKqa,cAGxCgB,EAAKrM,MAAQ,GACb,IAAS4B,EAAI,EAAGA,EAAIuL,EAAW7N,OAAQsC,IACrCyK,EAAKrM,MAAM6G,KAAK,GAAMsG,EAAWvL,GAAKsL,EAAab,EAAKiB,gBAGtDtc,KAAKiZ,cACPjZ,KAAK2Y,SAASuC,OACdlb,KAAK+Y,eAAemC,OACpBlb,KAAKiZ,YAAYD,OACjBhZ,KAAK+Y,eAAiB/Y,KAAKiZ,aAG7BjZ,KAAK4X,MAAQxV,WAASyV,YAOxB2C,wBAAA,SAAYI,GAAZ,WACE5a,KAAK4X,MAAQxV,WAASmW,SAElBvY,KAAKiZ,cACPjZ,KAAKiZ,YAAYiC,OACjBlb,KAAK2Y,SAASK,OACdhZ,KAAK+Y,eAAiB/Y,KAAK2Y,UAGzBiC,GACF5a,KAAKsZ,kBAAkB5M,sBACrB,IAAIhF,EAASkT,GAAU,WACjBrT,EAAKgI,OAAOhC,eAChBhG,EAAKwR,eAAemC,OAChB3T,EAAK0R,cACP1R,EAAK0R,YAAYD,OACjBzR,EAAKwR,eAAiBxR,EAAK0R,aAEzB1R,EAAK6R,aAAa3C,aAAa/O,IACjCH,EAAK6R,aAAa5R,gBAAgBE,GAEpCH,EAAKqQ,MAAQxV,WAASyV,oBA7YPpN"}