{"version":3,"file":"index.js","sources":["../src/utils/timerComponents.ts","../src/utils/default-ui-components.ts","../src/utils/types.ts","../src/counter/index.ts","../src/utils/resources.ts","../src/bar/index.ts","../src/ui-images/index.ts","../src/prompts/okPrompt/index.ts","../src/prompts/optionPrompt/index.ts","../src/prompts/fillInPrompt/index.ts","../src/prompts/customPrompt/index.ts","../src/cornerLabel/index.ts","../src/loading/index.ts","../src/announcement/index.ts"],"sourcesContent":["export interface ITimerComponent {\n  elapsedTime: number\n  targetTime: number\n  onTargetTimeReached: (ownerEntity: IEntity) => void\n}\n\n/**\n * Execute once after X milliseconds\n */\n@Component('UItimerDelay')\nexport class UIDelay implements ITimerComponent {\n  elapsedTime: number\n  targetTime: number\n  onTargetTimeReached: (ownerEntity: IEntity) => void\n\n  private onTimeReachedCallback: () => void\n\n  /**\n   * @param seconds amount of time in seconds\n   * @param onTimeReachedCallback callback for when time is reached\n   */\n  constructor(seconds: number, onTimeReachedCallback: () => void) {\n    TimerSystem.createAndAddToEngine()\n\n    this.elapsedTime = 0\n    this.targetTime = seconds\n    this.onTimeReachedCallback = onTimeReachedCallback\n    this.onTargetTimeReached = entity => {\n      this.onTimeReachedCallback()\n      entity.removeComponent(UIDelay)\n    }\n  }\n\n  setCallback(onTimeReachedCallback: () => void) {\n    this.onTimeReachedCallback = onTimeReachedCallback\n  }\n}\n\nconst entitiesWithDelay = engine.getComponentGroup(UIDelay)\n\nexport class TimerSystem implements ISystem {\n  private static _instance: TimerSystem | null = null\n\n  static createAndAddToEngine(): TimerSystem {\n    if (this._instance == null) {\n      this._instance = new TimerSystem()\n      engine.addSystem(this._instance)\n    }\n    return this._instance\n  }\n\n  private constructor() {\n    TimerSystem._instance = this\n  }\n\n  update(dt: number) {\n    for (let ent of entitiesWithDelay.entities) {\n      let timerComponent = ent.getComponent(UIDelay)\n\n      timerComponent.elapsedTime += dt\n\n      if (timerComponent.elapsedTime >= timerComponent.targetTime) {\n        timerComponent.onTargetTimeReached(ent)\n      }\n    }\n  }\n}\n","export const canvas = new UICanvas()\ncanvas.visible = true\n\nexport let SFFont = new Font(Fonts.SanFrancisco)\n\nexport let SFHeavyFont = new Font(Fonts.SanFrancisco_Heavy)\n\nexport let lightTheme = new Texture('https://decentraland.org/images/ui/light-atlas-v2.png')\nexport let darkTheme = new Texture('https://decentraland.org/images/ui/dark-atlas-v2.png')\n\nexport const message = new UIText(canvas) //messageBackground\nmessage.vAlign = 'center'\nmessage.hAlign = 'center'\nmessage.hTextAlign = 'center'\nmessage.vTextAlign = 'center'\nmessage.font = SFFont\nmessage.fontSize = 60\nmessage.color = new Color4(0, 0, 0, 1)\nmessage.visible = false\nmessage.positionY = 80\n\nexport const promptBackground = new UIImage(canvas, lightTheme)\npromptBackground.hAlign = 'center'\npromptBackground.vAlign = 'center'\npromptBackground.width = 400\npromptBackground.height = 250\npromptBackground.visible = false\n","/**\n * Cut out a section of an image file\n *\n * @typedef {Object} ImageSection - Object with data to only display a section of an image\n * @property {number} sourceWidth Width in pixels to select from image, starting from the sourceLeft, going right\n * @property {number} sourceHeight Height in pixels to select from image, starting from the sourceTop, going down\n * @property {number} sourceLeft Leftmost pixel to select from image\n * @property {number} sourceTop Topmost pixel to select from image\n *\n */\nexport type ImageSection = {\n  sourceWidth: number\n  sourceHeight: number\n  sourceLeft?: number\n  sourceTop?: number\n}\n\nexport enum PromptStyles {\n  LIGHT = `light`,\n  DARK = `dark`,\n  LIGHTLARGE = `lightlarge`,\n  DARKLARGE = `darklarge`,\n  LIGHTSLANTED = `lightslanted`,\n  DARKSLANTED = `darkslanted`\n}\n\nexport enum BarStyles {\n  ROUNDBLACK = `roundblack`,\n  ROUNDWHITE = `roundwhite`,\n  ROUNDSILVER = `roundsilver`,\n  ROUNDGOLD = `roundgold`,\n  SQUAREBLACK = `squareblack`,\n  SQUAREWHITE = `squarewhite`,\n  SQUARESILVER = `squaresilver`,\n  SQUAREGOLD = `squaregold`\n}\n\nexport enum ButtonStyles {\n  E = `e`,\n  F = `f`,\n  DARK = `dark`,\n  RED = `red`,\n  ROUNDBLACK = `roundblack`,\n  ROUNDWHITE = `roundwhite`,\n  ROUNDSILVER = `roundsilver`,\n  ROUNDGOLD = `roundgold`,\n  SQUAREBLACK = `squareblack`,\n  SQUAREWHITE = `squarewhite`,\n  SQUARESILVER = `squaresilver`,\n  SQUAREGOLD = `squaregold`\n}\n\nexport enum SwitchStyles {\n  ROUNDGREEN = `roundgreen`,\n  ROUNDRED = `roundred`,\n  SQUAREGREEN = `squaregreen`,\n  SQUARERED = `squarered`\n}\n\n/**\n *\n *\n * @typedef {Object} ImageData - Object with data for displaying an image\n * @property {string} path Path to the image file.\n * @property {number} offsetX Offset on X, relative to the normal position of the image.\n * @property {number} offsetY Offset on Y, relative to the normal position of the image.\n * @property {number} height The height to show the image onscreen.\n * @property {number} width The width to show the image onscreen.\n * @property {ImageSection} section Use only a section of the image file, useful when arranging multiple icons into an image atlas. This field takes an `ImageSection` object, specifying `sourceWidth` and `sourceHeight`, and optionally also `sourceLeft` and `sourceTop`.\n *\n */\nexport type ImageData = {\n  path: string\n  offsetX?: number\n  offsetY?: number\n  height?: number\n  width?: number\n  section?: ImageSection\n}\n","import { canvas, SFFont } from '../utils/default-ui-components'\n\n/**\n * Displays a number on the center of the UI\n *\n * @param {number} value starting value\n * @param {number} [xOffset=0] position on X, to enable fitting several counters\n * @param {number} [yOffset=0] position on Y, to enable fitting several counters\n * @param {Color4} [color=Color4.White()] text color\n * @param {number} [size=25] text size\n * @param {boolean} bordersOff remove black border around text\n * @param {boolean} fixedDigits display a specific amount of digits, regardless of the value, adding preceding 0s\n *\n */\nexport class UICounter extends Entity {\n  valueAsNum: number\n  uiText: UIText\n  canvas: UICanvas = canvas\n  fixedDigits: number | null\n  constructor(\n    value: number,\n    xOffset?: number,\n    yOffset?: number,\n    color?: Color4,\n    size?: number,\n    bordersOff?: boolean,\n    fixedDigits?: number\n  ) {\n    super()\n    this.valueAsNum = value\n    this.uiText = new UIText(canvas)\n\n    this.fixedDigits = fixedDigits ? fixedDigits : null\n\n    this.uiText.value = this.toFixedLengthString(value)\n\n    this.uiText.hAlign = 'right'\n    this.uiText.vAlign = 'bottom'\n    this.uiText.positionX = xOffset ? xOffset : 0\n    this.uiText.positionY = yOffset ? yOffset : 0\n    this.uiText.fontSize = size ? size : 25\n    this.uiText.font = SFFont\n    this.uiText.vTextAlign = 'center'\n    this.uiText.hTextAlign = 'center'\n    this.uiText.color = color ? color : Color4.White()\n\n    this.uiText.outlineColor = Color4.Black()\n    this.uiText.outlineWidth = bordersOff ? 0 : 0.1\n  }\n\n  /**\n   * Get the current value of the counter\n   *  * @return {number} The current value of the counter\n   *\n   */\n  public read(): number {\n    return this.valueAsNum\n  }\n\n  /**\n   * Increase the value on the counter.\n   *\n   * @param {number} [amount=1] How much to increase the counter. By default it increases by 1\n   *\n   */\n  public increase(amount?: number): void {\n    this.valueAsNum += amount ? amount : 1\n    this.uiText.value = this.toFixedLengthString(this.valueAsNum)\n  }\n\n  /**\n   * Decrease the value on the counter.\n   *\n   * @param {number} [amount=1] How much to decrease the counter. By default it decreases by 1\n   *\n   */\n  public decrease(amount?: number): void {\n    this.valueAsNum -= amount ? amount : 1\n    this.uiText.value = this.toFixedLengthString(this.valueAsNum)\n  }\n\n  /**\n   * Sets the counter's value to a specific amount, regardless of what it was before.\n   *\n   * @param {number} amount New value for the counter\n   *\n   */\n  public set(amount: number): void {\n    this.valueAsNum = amount\n    this.uiText.value = this.toFixedLengthString(this.valueAsNum)\n  }\n\n  /**\n   * Hides the counter from view in the screen. Its values can still be changed and read while hidden.\n   */\n  public hide(): void {\n    this.uiText.visible = false\n  }\n\n  /**\n   * Makes an invisible counter visible again.\n   */\n  public show(): void {\n    this.uiText.visible = true\n  }\n\n  // Adds 0s on the left, or rounds decimals to adjust length\n  private toFixedLengthString(value: number) {\n    let stringValue = value.toString()\n    if (!this.fixedDigits) return stringValue\n    let lenDiff = stringValue.length - this.fixedDigits\n\n    while (lenDiff < 0) {\n      stringValue = '0'.concat(stringValue)\n      lenDiff += 1\n    }\n\n    if (lenDiff > 0) {\n      stringValue = value.toPrecision(this.fixedDigits)\n    }\n\n    return stringValue\n  }\n}\n","import { ImageSection } from './types'\n\nexport default {\n  buttons: {\n    buttonE: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 662\n    },\n    buttonF: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 612\n    },\n    buttonRed: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 662\n    },\n    buttonDark: {\n      sourceWidth: 174,\n      sourceHeight: 46,\n      sourceLeft: 512,\n      sourceTop: 612\n    },\n    roundBlack: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 458\n    },\n    squareBlack: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 457\n    },\n    roundWhite: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 494\n    },\n    squareWhite: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 493\n    },\n    roundSilver: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 531\n    },\n    squareSilver: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 531\n    },\n    roundGold: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 512,\n      sourceTop: 567\n    },\n    squareGold: {\n      sourceWidth: 128,\n      sourceHeight: 32,\n      sourceLeft: 646,\n      sourceTop: 567\n    }\n  },\n  buttonLabels: {\n    E: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 697,\n      sourceTop: 611\n    },\n    F: {\n      sourceWidth: 26,\n      sourceHeight: 26,\n      sourceLeft: 733,\n      sourceTop: 611\n    }\n  },\n  backgrounds: {\n    promptBackground: {\n      sourceWidth: 416,\n      sourceHeight: 352,\n      sourceLeft: 501,\n      sourceTop: 12\n    },\n    promptLargeBackground: {\n      sourceWidth: 480,\n      sourceHeight: 384,\n      sourceLeft: 7,\n      sourceTop: 12\n    },\n    promptSlantedBackground: {\n      sourceWidth: 486,\n      sourceHeight: 326,\n      sourceLeft: 7,\n      sourceTop: 413\n    },\n    NPCDialog: {\n      sourceWidth: 766,\n      sourceHeight: 248,\n      sourceLeft: 22,\n      sourceTop: 756\n    }\n  },\n  icons: {\n    closeW: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 942,\n      sourceTop: 306\n    },\n    closeD: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 986,\n      sourceTop: 306\n    },\n    closeWLarge: {\n      sourceWidth: 64,\n      sourceHeight: 64,\n      sourceLeft: 512,\n      sourceTop: 381\n    },\n    closeDLarge: {\n      sourceWidth: 64,\n      sourceHeight: 64,\n      sourceLeft: 583,\n      sourceTop: 381\n    },\n    closeWNoBack: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 946,\n      sourceTop: 252\n    },\n    closeDNoBack: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 946,\n      sourceTop: 214\n    },\n    closeWNoBackLarge: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 214\n    },\n    closeDNoBackLarge: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 260\n    },\n    FDark: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 4\n    },\n    FWhite: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 4\n    },\n    EDark: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 40\n    },\n    EWhite: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 40\n    },\n    Timer: {\n      sourceWidth: 24,\n      sourceHeight: 32.2,\n      sourceLeft: 718,\n      sourceTop: 388\n    },\n    TimerLarge: {\n      sourceWidth: 48,\n      sourceHeight: 68,\n      sourceLeft: 662,\n      sourceTop: 386\n    },\n    ClickWhite: {\n      sourceWidth: 32,\n      sourceHeight: 48,\n      sourceLeft: 799,\n      sourceTop: 389\n    },\n    ClickDark: {\n      sourceWidth: 32,\n      sourceHeight: 48,\n      sourceLeft: 757,\n      sourceTop: 389\n    }\n  },\n  checkboxes: {\n    wOff: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 987,\n      sourceTop: 76\n    },\n    wOn: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 987,\n      sourceTop: 104\n    },\n    dOff: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 958,\n      sourceTop: 76\n    },\n    dOn: {\n      sourceWidth: 24,\n      sourceHeight: 24,\n      sourceLeft: 958,\n      sourceTop: 104\n    },\n    wLargeOff: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 132\n    },\n    wLargeOn: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 987,\n      sourceTop: 168\n    },\n    dLargeOff: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 132\n    },\n    dLargeOn: {\n      sourceWidth: 32,\n      sourceHeight: 32,\n      sourceLeft: 950,\n      sourceTop: 168\n    }\n  },\n  switches: {\n    roundOff: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 783,\n      sourceTop: 454\n    },\n    roundRed: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 853,\n      sourceTop: 454\n    },\n    roundGreen: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 923,\n      sourceTop: 454\n    },\n    squareOff: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 783,\n      sourceTop: 501\n    },\n    squareRed: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 852,\n      sourceTop: 501\n    },\n    squareGreen: {\n      sourceWidth: 64,\n      sourceHeight: 32,\n      sourceLeft: 921,\n      sourceTop: 501\n    }\n  }\n}\n\nexport function setSection(image: UIImage, section: ImageSection) {\n  image.sourceWidth = section.sourceWidth\n  image.sourceHeight = section.sourceHeight\n  image.sourceLeft = section.sourceLeft ? section.sourceLeft : 0\n  image.sourceTop = section.sourceTop ? section.sourceTop : 0\n}\n\nexport function buttonIconPos(textLen: number) {\n  let pos = -10 - textLen * 4\n  return pos > -65 ? pos : -65\n}\n","import { canvas, lightTheme } from '../utils/default-ui-components'\nimport { BarStyles } from '../utils/types'\nimport resources, { setSection } from '../utils/resources'\n\n/**\n * Displays a colored bar that can be filled up and updated to different values.\n *\n * @param {number} value starting value\n * @param {number} [xOffset=0] position on X, to enable fitting several counters\n * @param {number} yOffset position on Y, to enable fitting several counters\n * @param {Color4} fillColor color of the bar\n * @param {BarStyles} style margin style of the bar, from the BarStyles enum\n * @param {number} [scale=1] multiplier for the size of the bar. 1 = 128 x 32\n * @param {boolean} startHidden if true, image starts invisible to load in the background till it runs its show() function.\n *\n */\nexport class UIBar extends Entity {\n  valueAsNum: number\n  background: UIImage\n  bar: UIContainerRect\n  canvas: UICanvas = canvas\n  fullWidth: number\n  constructor(\n    value: number,\n    xOffset?: number,\n    yOffset?: number,\n    fillColor?: Color4,\n    style?: BarStyles,\n    scale?: number,\n    startHidden?: boolean\n  ) {\n    super()\n\n    this.valueAsNum = value > 1 ? 1 : value\n    this.fullWidth = scale ? 128 * scale : 128\n\n    this.background = new UIImage(canvas, lightTheme)\n    this.background.width = scale ? scale * 128 : 128\n    this.background.height = scale ? scale * 32 : 32\n    this.background.hAlign = 'right'\n    this.background.vAlign = 'bottom'\n    this.background.positionX = xOffset ? xOffset : 0\n    this.background.positionY = yOffset ? yOffset : 0\n\n    if (!style) {\n      setSection(this.background, resources.buttons.roundSilver)\n    } else {\n      switch (style) {\n        case BarStyles.ROUNDBLACK:\n          setSection(this.background, resources.buttons.roundBlack)\n          break\n        case BarStyles.ROUNDWHITE:\n          setSection(this.background, resources.buttons.roundWhite)\n          break\n        case BarStyles.ROUNDSILVER:\n          setSection(this.background, resources.buttons.roundSilver)\n          break\n        case BarStyles.ROUNDGOLD:\n          setSection(this.background, resources.buttons.roundGold)\n          break\n        case BarStyles.SQUAREBLACK:\n          setSection(this.background, resources.buttons.squareBlack)\n          break\n        case BarStyles.SQUAREWHITE:\n          setSection(this.background, resources.buttons.squareWhite)\n          break\n        case BarStyles.SQUARESILVER:\n          setSection(this.background, resources.buttons.squareSilver)\n          break\n        case BarStyles.SQUAREGOLD:\n          setSection(this.background, resources.buttons.squareGold)\n          break\n      }\n    }\n\n    this.background.sourceWidth = 128\n    this.background.sourceHeight = 32\n    this.background.visible = true\n\n    this.bar = new UIContainerRect(this.background)\n    this.bar.color = fillColor ? fillColor : Color4.Red()\n    this.bar.thickness = 0\n\n    this.bar.hAlign = 'left'\n    this.bar.vAlign = 'center'\n    this.bar.positionX = scale ? 2.55 * scale : 2.55\n    this.bar.positionY = 0\n    this.bar.height = scale ? scale * 32 - scale * 7.5 : 32 - 7.5\n    this.bar.width = scale\n      ? this.fullWidth * this.valueAsNum - 5.1 * scale\n      : this.fullWidth * this.valueAsNum - 5.1\n\n    if (startHidden) {\n      this.hide()\n    }\n  }\n\n  /**\n   * Get the current value of the bar\n   *  * @return {number} The current value of the bar, as a value from 0 to 1\n   *\n   */\n  public read(): number {\n    return this.valueAsNum\n  }\n\n  /**\n   * Increase the value on the bar.\n   *\n   * @param {number} [amount=0.1] How much to increase the bar, up to a maximum of 1. By default it increases by 0.1\n   *\n   */\n  public increase(amount?: number): void {\n    this.valueAsNum += amount ? amount : 0.1\n    this.bar.width = this.fullWidth * this.valueAsNum - 6\n  }\n\n  /**\n   * Decrease the value on the bar.\n   *\n   * @param {number} [amount=0.1] How much to decrease the bar, down to a minimum of 0. By default it decreases by 0.1\n   *\n   */\n  public decrease(amount?: number): void {\n    this.valueAsNum -= amount ? amount : 0.1\n    this.bar.width = this.fullWidth * this.valueAsNum - 6\n  }\n\n  /**\n   * Sets the bar's value to a specific amount, regardless of what it was before.\n   *\n   * @param {number} amount New value for the bar, between 0 and 1\n   *\n   */\n  public set(amount: number): void {\n    this.valueAsNum = amount\n    this.bar.width = this.fullWidth * this.valueAsNum - 6\n  }\n\n  /**\n   * Hides the bar from view in the screen. Its values can still be changed and read while hidden.\n   */\n  public hide(): void {\n    this.background.visible = false\n    this.bar.visible = false\n  }\n\n  /**\n   * Makes an invisible bar visible again.\n   */\n  public show(): void {\n    this.background.visible = true\n    this.bar.visible = true\n  }\n}\n","import { canvas } from '../utils/default-ui-components'\nimport { ImageSection } from '../utils/types'\nimport { UIDelay } from '../utils/timerComponents'\n\n/**\n * Displays an icon of 64x64 on the bottom-left corner\n *\n * @param {string} image path to image file\n * @param {number} xOffset position on X, to enable fitting several counters\n * @param {number} yOffset position on Y, to enable fitting several counters\n * @param {number} width image width\n * @param {number} height image height\n * @param {ImageSection} section cut out a section of the imge, as an object specifying sourceLeft, sourceTop, sourceWidth and sourceHeight\n *\n */\nexport class MediumIcon extends Entity {\n  image: UIImage\n  canvas: UICanvas = canvas\n  constructor(\n    image: string,\n    xOffset?: number,\n    yOffset?: number,\n    width?: number,\n    height?: number,\n    section?: ImageSection\n  ) {\n    super()\n\n    let texture = new Texture(image)\n\n    this.image = new UIImage(canvas, texture)\n\n    this.image.hAlign = 'right'\n    this.image.vAlign = 'bottom'\n    this.image.positionX = xOffset ? xOffset : 0\n    this.image.positionY = yOffset ? yOffset : 0\n    this.image.width = width ? width : 64\n    this.image.height = height ? height : 64\n    this.image.sourceLeft = section && section.sourceLeft ? section.sourceLeft : 0\n    this.image.sourceTop = section && section.sourceTop ? section.sourceTop : 0\n    this.image.sourceWidth =\n      section && section.sourceWidth ? section.sourceWidth : width ? width : 64\n    this.image.sourceHeight =\n      section && section.sourceHeight ? section.sourceHeight : height ? height : 64\n  }\n\n  /**\n   * Hides the image from view in the screen.\n   */\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  /**\n   * Makes an invisible image visible again.\n   * @param {number} duration Seconds to display the image onscreen. If no value is provided, it stays visible.\n   */\n  public show(duration?: number): void {\n    this.image.visible = true\n\n    if (duration) {\n      let dummyEnty = new Entity()\n      engine.addEntity(dummyEnty)\n\n      dummyEnty.addComponentOrReplace(\n        new UIDelay(duration, () => {\n          this.hide()\n        })\n      )\n    }\n  }\n}\n\n/**\n * Displays an icon of 32x32 on the bottom-left corner\n *\n * @param {string} image path to image file\n * @param {number} xOffset position on X, to enable fitting several counters\n * @param {number} yOffset position on Y, to enable fitting several counters\n * @param {number} width image width\n * @param {number} height image height\n * @param {ImageSection} section cut out a section of the imge, as an object specifying sourceLeft, sourceTop, sourceWidth and sourceHeight\n *\n */\nexport class SmallIcon extends Entity {\n  image: UIImage\n  canvas: UICanvas = canvas\n  constructor(\n    image: string,\n    xOffset?: number,\n    yOffset?: number,\n    width?: number,\n    height?: number,\n    section?: ImageSection\n  ) {\n    super()\n\n    let texture = new Texture(image)\n\n    this.image = new UIImage(canvas, texture)\n\n    this.image.hAlign = 'right'\n    this.image.vAlign = 'bottom'\n    this.image.positionX = xOffset ? xOffset : 0\n    this.image.positionY = yOffset ? yOffset : 0\n    this.image.width = width ? width : 32\n    this.image.height = height ? height : 32\n    this.image.sourceLeft = section && section.sourceLeft ? section.sourceLeft : 0\n    this.image.sourceTop = section && section.sourceTop ? section.sourceTop : 0\n    this.image.sourceWidth = section ? section.sourceWidth : width ? width : 32\n    this.image.sourceHeight = section ? section.sourceHeight : height ? height : 32\n  }\n\n  /**\n   * Hides the image from view in the screen.\n   */\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  /**\n   * Makes an invisible image visible again.\n   * @param {number} duration Seconds to display the image onscreen. If no value is provided, it stays visible.\n   */\n  public show(duration?: number): void {\n    this.image.visible = true\n\n    if (duration) {\n      let dummyEnty = new Entity()\n      engine.addEntity(dummyEnty)\n\n      dummyEnty.addComponentOrReplace(\n        new UIDelay(duration, () => {\n          this.hide()\n        })\n      )\n    }\n  }\n}\n\n/**\n * Displays an icon of 128x128 on the bottom-left corner\n *\n * @param {string} image path to image file\n * @param {number} xOffset position on X, to enable fitting several counters\n * @param {number} yOffset position on Y, to enable fitting several counters\n * @param {number} width image width (128 by default)\n * @param {number} height image height (128 by default)\n * @param {ImageSection} section cut out a section of the imge, as an object specifying sourceLeft, sourceTop, sourceWidth and sourceHeight\n *\n */\nexport class LargeIcon extends Entity {\n  image: UIImage\n  canvas: UICanvas = canvas\n  constructor(\n    image: string,\n    xOffset?: number,\n    yOffset?: number,\n    width?: number,\n    height?: number,\n    section?: ImageSection\n  ) {\n    super()\n\n    let texture = new Texture(image)\n\n    this.image = new UIImage(canvas, texture)\n\n    this.image.hAlign = 'right'\n    this.image.vAlign = 'bottom'\n    this.image.positionX = xOffset ? xOffset : 0\n    this.image.positionY = yOffset ? yOffset : 0\n    this.image.width = width ? width : 128\n    this.image.height = height ? height : 128\n    this.image.sourceLeft = section && section.sourceLeft ? section.sourceLeft : 0\n    this.image.sourceTop = section && section.sourceTop ? section.sourceTop : 0\n    this.image.sourceWidth = section ? section.sourceWidth : width ? width : 128\n    this.image.sourceHeight = section ? section.sourceHeight : height ? height : 128\n  }\n\n  /**\n   * Hides the image from view in the screen.\n   */\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  /**\n   * Makes an invisible image visible again.\n   * @param {number} duration Seconds to display the image onscreen. If no value is provided, it stays visible.\n   */\n  public show(duration?: number): void {\n    this.image.visible = true\n\n    if (duration) {\n      let dummyEnty = new Entity()\n      engine.addEntity(dummyEnty)\n\n      dummyEnty.addComponentOrReplace(\n        new UIDelay(duration, () => {\n          this.hide()\n        })\n      )\n    }\n  }\n}\n\n/**\n * Displays an image of 512x512 on the center of the screen for limited time\n *\n * @param {string} image path to image file\n * @param {number} duration seconds to display the image onscreen. 0 keeps it on till you hide it\n * @param {number} xOffset position on X, to enable fitting several counters\n * @param {number} yOffset position on Y, to enable fitting several counters\n * @param {number} width image width\n * @param {number} height image height\n * @param {ImageSection} section cut out a section of the imge, as an object specifying sourceLeft, sourceTop, sourceWidth and sourceHeight\n * @param {boolean} startHidden if true, image starts invisible to load in the background till it runs its show() function.\n *\n */\nexport class CenterImage extends Entity {\n  image: UIImage\n  canvas: UICanvas = canvas\n  constructor(\n    image: string,\n    duration: number,\n    startHidden?: boolean,\n    xOffset?: number,\n    yOffset?: number,\n    width?: number,\n    height?: number,\n    section?: ImageSection\n  ) {\n    super()\n\n    let texture = new Texture(image)\n\n    this.image = new UIImage(canvas, texture)\n\n    this.image.hAlign = 'center'\n    this.image.vAlign = 'center'\n    this.image.positionX = xOffset ? xOffset : 0\n    this.image.positionY = yOffset ? yOffset : 0\n    this.image.width = width ? width : 512\n    this.image.height = height ? height : 512\n    this.image.sourceLeft = section && section.sourceLeft ? section.sourceLeft : 0\n    this.image.sourceTop = section && section.sourceTop ? section.sourceTop : 0\n    this.image.sourceWidth = section ? section.sourceWidth : width ? width : 512\n    this.image.sourceHeight = section ? section.sourceHeight : height ? height : 512\n\n    this.image.visible = startHidden ? false : true\n\n    if (duration != -1) {\n      let dummyEnty = new Entity()\n      engine.addEntity(dummyEnty)\n\n      dummyEnty.addComponentOrReplace(\n        new UIDelay(duration ? duration : 3, () => {\n          this.hide()\n        })\n      )\n    }\n  }\n\n  /**\n   * Hides the image from view in the screen.\n   */\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  /**\n   * Makes an invisible image visible again.\n   * @param {number} duration Seconds to display the image onscreen. If no value is provided, it stays visible.\n   */\n  public show(duration?: number): void {\n    this.image.visible = true\n\n    if (duration) {\n      let dummyEnty = new Entity()\n      engine.addEntity(dummyEnty)\n\n      dummyEnty.addComponentOrReplace(\n        new UIDelay(duration, () => {\n          this.hide()\n        })\n      )\n    }\n  }\n}\n","import {\n  darkTheme,\n  lightTheme,\n  promptBackground,\n  SFFont,\n  canvas\n} from '../../utils/default-ui-components'\nimport resources, { buttonIconPos, setSection } from '../../utils/resources'\n\n/**\n * Displays a prompt window with a custom string and an OK button\n *\n * @param  {string} instructions: Notification string\n * @param {() => void} onAccept: Function that gets executed if player clicks button\n * @param  {string} acceptLabel: String to go in the accept button\n * @param {boolean} useDarkTheme: Switch to the dark theme\n *\n */\nexport class OkPrompt extends Entity {\n  text: UIText\n  button: UIImage\n  buttonLabel: UIText\n  icon: UIImage\n  closeIcon: UIImage\n  onAccept: null | (() => void)\n  EButtonAction: () => false | Subscription[]\n  UIOpenTime: number\n  canvas: UICanvas = canvas\n  background: UIImage = promptBackground\n  constructor(\n    instructions: string,\n    onAccept?: () => void,\n    acceptLabel?: string,\n    useDarkTheme?: boolean\n  ) {\n    super()\n\n    this.UIOpenTime = +Date.now()\n\n    this.onAccept = onAccept ? onAccept : null\n\n    let uiTheme = useDarkTheme ? darkTheme : lightTheme\n\n    promptBackground.source = uiTheme\n    promptBackground.width = 400\n    promptBackground.height = 250\n    promptBackground.positionY = 0\n\n    setSection(promptBackground, resources.backgrounds.promptBackground)\n\n    promptBackground.visible = true\n\n    this.closeIcon = new UIImage(promptBackground, uiTheme)\n    this.closeIcon.positionX = 175\n    this.closeIcon.positionY = 100\n    this.closeIcon.width = 32\n    this.closeIcon.height = 32\n    if (useDarkTheme) {\n      setSection(this.closeIcon, resources.icons.closeW)\n    } else {\n      setSection(this.closeIcon, resources.icons.closeD)\n    }\n\n    this.closeIcon.onClick = new OnClick(() => {\n      this.close()\n    })\n\n    this.text = new UIText(promptBackground)\n\n    this.text.value = instructions //splitTextIntoLines(instructions,30,3)\n\n    this.text.adaptWidth = false\n    this.text.textWrapping = true\n    this.text.width = 380\n\n    this.text.hAlign = 'center'\n    this.text.vAlign = 'top'\n    this.text.positionX = 0\n    this.text.positionY = -65\n    this.text.fontSize = 24\n    this.text.font = SFFont\n    this.text.vTextAlign = 'center'\n    this.text.hTextAlign = 'center'\n    this.text.color = useDarkTheme ? Color4.White() : Color4.Black()\n\n    this.button = new UIImage(promptBackground, uiTheme)\n    this.button.positionX = 0\n    this.button.positionY = -60\n    this.button.width = 174\n    this.button.height = 46\n    setSection(this.button, resources.buttons.buttonE)\n\n    this.icon = new UIImage(this.button, useDarkTheme == true ? darkTheme : lightTheme)\n    this.icon.width = 26\n    this.icon.height = 26\n    this.icon.hAlign = 'center'\n    this.icon.vAlign = 'center'\n    this.icon.isPointerBlocker = false\n    setSection(this.icon, resources.buttonLabels.E)\n    this.icon.positionX = buttonIconPos(acceptLabel ? acceptLabel.length : 2)\n\n    this.buttonLabel = new UIText(this.button)\n    this.buttonLabel.value = acceptLabel ? acceptLabel : 'Ok'\n    this.buttonLabel.hTextAlign = 'center'\n    this.buttonLabel.vTextAlign = 'center'\n    this.buttonLabel.positionX = 30\n    this.buttonLabel.fontSize = 18\n    this.buttonLabel.font = SFFont\n    this.buttonLabel.color = Color4.White()\n    this.buttonLabel.isPointerBlocker = false\n\n    this.button.onClick = new OnClick(() => {\n      this.accept()\n    })\n\n    this.EButtonAction = Input.instance.subscribe('BUTTON_DOWN', ActionButton.PRIMARY, false, e => {\n      if (this.button.visible && +Date.now() - this.UIOpenTime > 100) {\n        this.accept()\n      }\n    })\n  }\n\n  /**\n   * Hides the prompt from view in the screen.\n   */\n  public close(): void {\n    promptBackground.visible = false\n    this.closeIcon.visible = false\n    this.button.visible = false\n    this.text.visible = false\n    this.buttonLabel.visible = false\n    //Input.instance.unsubscribe('BUTTON_DOWN', ActionButton.PRIMARY, this.EButtonAction)\n  }\n\n  /**\n   * Runs the onAccept function, then hides the prompt from view in the screen.\n   */\n  public accept(): void {\n    if (this.onAccept) {\n      this.onAccept()\n    }\n\n    this.close()\n  }\n\n  /**\n   * Hides the prompt from view in the screen.\n   */\n  public hide(): void {\n    promptBackground.visible = false\n    this.closeIcon.visible = false\n    this.button.visible = false\n    this.text.visible = false\n    this.buttonLabel.visible = false\n  }\n\n  /**\n   * Makes an invisible prompt visible again.\n   */\n  public show(): void {\n    promptBackground.visible = true\n    this.closeIcon.visible = true\n    this.button.visible = true\n    this.text.visible = true\n    this.buttonLabel.visible = true\n  }\n}\n","import {\n  darkTheme,\n  lightTheme,\n  promptBackground,\n  SFFont,\n  SFHeavyFont,\n  canvas\n} from '../../utils/default-ui-components'\nimport resources, { buttonIconPos, setSection } from '../../utils/resources'\n\n/**\n * Displays a prompt window with two buttons that perform separate actions\n *\n * @param {string} title: Header on dialog\n * @param {string} instructions: Smaller print instructions\n * @param {() => void} onAccept: Function that gets executed if player clicks accept\n * @param {() => void} onReject: Function that gets executed if player clicks reject\n * @param {string} acceptLabel: String to go in the accept button\n * @param {string} rejectLabel: String to go in the reject button\n * @param {boolean} useDarkTheme: Switch to the dark theme\n *\n */\nexport class OptionPrompt extends Entity {\n  title: UIText\n  text: UIText\n  buttonE: UIImage\n  buttonELabel: UIText\n  buttonEIcon: UIImage\n  buttonF: UIImage\n  buttonFLabel: UIText\n  buttonFIcon: UIImage\n  closeIcon: UIImage\n  onAccept: () => void\n  onReject: null | (() => void)\n  EButtonAction: () => false | Subscription[]\n  FButtonAction: () => false | Subscription[]\n  UIOpenTime: number\n  canvas: UICanvas = canvas\n  background: UIImage = promptBackground\n  constructor(\n    title: string,\n    instructions: string,\n    onAccept: () => void,\n    onReject?: () => void,\n    acceptLabel?: string,\n    rejectLabel?: string,\n    useDarkTheme?: boolean\n  ) {\n    super()\n\n    this.UIOpenTime = +Date.now()\n\n    this.onAccept = onAccept\n    this.onReject = onReject ? onReject : null\n\n    let uiTheme = useDarkTheme ? darkTheme : lightTheme\n\n    promptBackground.source = uiTheme\n    promptBackground.width = 480\n    promptBackground.height = 384\n\n    setSection(promptBackground, resources.backgrounds.promptLargeBackground)\n\n    promptBackground.visible = true\n\n    this.closeIcon = new UIImage(promptBackground, uiTheme)\n    this.closeIcon.positionX = 175 + 40\n    this.closeIcon.positionY = 100 + 64\n    this.closeIcon.width = 32\n    this.closeIcon.height = 32\n    if (useDarkTheme) {\n      setSection(this.closeIcon, resources.icons.closeW)\n    } else {\n      setSection(this.closeIcon, resources.icons.closeD)\n    }\n    this.closeIcon.onClick = new OnClick(() => {\n      this.close()\n    })\n\n    this.title = new UIText(promptBackground)\n\n    this.title.value = title\n\n    this.title.adaptWidth = false\n    this.title.textWrapping = true\n    this.title.width = 380\n\n    this.title.hAlign = 'center'\n    this.title.vAlign = 'top'\n    this.title.positionX = 0\n    this.title.positionY = -20\n    this.title.font = SFHeavyFont\n    this.title.fontSize = 24\n    this.title.vTextAlign = 'center'\n    this.title.hTextAlign = 'center'\n    this.title.color = useDarkTheme ? Color4.White() : Color4.Black()\n\n    this.text = new UIText(promptBackground)\n\n    this.text.value = instructions\n\n    this.text.adaptWidth = false\n    this.text.textWrapping = true\n    this.text.width = 380\n\n    this.text.hAlign = 'center'\n    this.text.vAlign = 'top'\n    this.text.positionX = 0\n    this.text.positionY = -145\n    this.text.fontSize = 24\n    this.text.font = SFFont\n    this.text.vTextAlign = 'center'\n    this.text.hTextAlign = 'center'\n    this.text.color = useDarkTheme ? Color4.White() : Color4.Black()\n\n    this.buttonE = new UIImage(promptBackground, uiTheme)\n    this.buttonE.positionX = -100\n    this.buttonE.positionY = -120\n    this.buttonE.width = 174\n    this.buttonE.height = 46\n    setSection(this.buttonE, resources.buttons.buttonE)\n\n    this.buttonEIcon = new UIImage(this.buttonE, useDarkTheme == true ? darkTheme : lightTheme)\n    this.buttonEIcon.width = 26\n    this.buttonEIcon.height = 26\n    this.buttonEIcon.hAlign = 'center'\n    this.buttonEIcon.vAlign = 'center'\n    this.buttonEIcon.isPointerBlocker = false\n    setSection(this.buttonEIcon, resources.buttonLabels.E)\n    this.buttonEIcon.positionX = buttonIconPos(acceptLabel ? acceptLabel.length : 2)\n\n    this.buttonELabel = new UIText(this.buttonE)\n    this.buttonELabel.value = acceptLabel ? acceptLabel : 'Ok'\n    this.buttonELabel.hTextAlign = 'center'\n    this.buttonELabel.vTextAlign = 'center'\n    this.buttonELabel.positionX = 30\n    this.buttonELabel.fontSize = 18\n    this.buttonELabel.font = SFFont\n    this.buttonELabel.color = Color4.White()\n    this.buttonELabel.isPointerBlocker = false\n\n    this.buttonE.onClick = new OnClick(() => {\n      this.accept()\n    })\n\n    this.EButtonAction = Input.instance.subscribe('BUTTON_DOWN', ActionButton.PRIMARY, false, e => {\n      if (this.buttonE.visible && +Date.now() - this.UIOpenTime > 100) {\n        this.accept()\n      }\n    })\n\n    this.buttonF = new UIImage(promptBackground, uiTheme)\n    this.buttonF.positionX = 100\n    this.buttonF.positionY = -120\n    this.buttonF.width = 174\n    this.buttonF.height = 46\n    setSection(this.buttonF, resources.buttons.buttonF)\n\n    this.buttonFIcon = new UIImage(this.buttonF, useDarkTheme == true ? darkTheme : lightTheme)\n    this.buttonFIcon.width = 26\n    this.buttonFIcon.height = 26\n    this.buttonFIcon.hAlign = 'center'\n    this.buttonFIcon.vAlign = 'center'\n    this.buttonFIcon.isPointerBlocker = false\n    setSection(this.buttonFIcon, resources.buttonLabels.F)\n    this.buttonFIcon.positionX = buttonIconPos(rejectLabel ? rejectLabel.length : 6)\n\n    this.buttonFLabel = new UIText(this.buttonF)\n    this.buttonFLabel.value = rejectLabel ? rejectLabel : 'Cancel'\n    this.buttonFLabel.hTextAlign = 'center'\n    this.buttonFLabel.vTextAlign = 'center'\n    this.buttonFLabel.positionX = 30\n    this.buttonFLabel.fontSize = 18\n    this.buttonFLabel.font = SFFont\n    this.buttonFLabel.color = Color4.White()\n    this.buttonFLabel.isPointerBlocker = false\n\n    this.buttonF.onClick = new OnClick(() => {\n      this.reject()\n    })\n\n    this.FButtonAction = Input.instance.subscribe(\n      'BUTTON_DOWN',\n      ActionButton.SECONDARY,\n      false,\n      e => {\n        if (this.buttonF.visible && +Date.now() - this.UIOpenTime > 100) {\n          this.reject()\n        }\n      }\n    )\n  }\n\n  /**\n   * Hides the prompt from view in the screen.\n   */\n  public close(): void {\n    promptBackground.visible = false\n    this.closeIcon.visible = false\n    this.buttonE.visible = false\n    this.buttonF.visible = false\n    this.text.visible = false\n    this.buttonELabel.visible = false\n    this.buttonFLabel.visible = false\n    this.title.visible = false\n    //Input.instance.unsubscribe('BUTTON_DOWN', ActionButton.PRIMARY, this.EButtonAction)\n  }\n\n  /**\n   * Runs the onAccept function, then hides the prompt from view in the screen.\n   */\n  public accept(): void {\n    if (this.onAccept) {\n      this.onAccept()\n    }\n\n    this.close()\n  }\n\n  /**\n   * Runs the onReject function, then hides the prompt from view in the screen.\n   */\n  public reject(): void {\n    if (this.onReject) {\n      this.onReject()\n    }\n\n    this.close()\n  }\n\n  /**\n   * Hides the prompt from view in the screen.\n   */\n  public hide(): void {\n    promptBackground.visible = false\n    this.closeIcon.visible = false\n    this.buttonE.visible = false\n    this.buttonF.visible = false\n    this.text.visible = false\n    this.buttonELabel.visible = false\n    this.buttonFLabel.visible = false\n    this.buttonEIcon.visible = false\n    this.buttonFIcon.visible = false\n  }\n\n  /**\n   * Makes an invisible prompt visible again.\n   */\n  public show(): void {\n    promptBackground.visible = true\n    this.closeIcon.visible = true\n    this.buttonE.visible = true\n    this.buttonF.visible = true\n    this.text.visible = true\n    this.buttonELabel.visible = true\n    this.buttonFLabel.visible = true\n    this.buttonEIcon.visible = true\n    this.buttonFIcon.visible = true\n  }\n}\n","import {\n  darkTheme,\n  lightTheme,\n  promptBackground,\n  SFFont,\n  SFHeavyFont,\n  canvas\n} from '../../utils/default-ui-components'\nimport resources, { buttonIconPos, setSection } from '../../utils/resources'\n\n/**\n * Displays a prompt window with a field that can be filled in\n *\n * @param  {string} title: Notification string\n * @param {(e:string) => void} onAccept: Function that gets executed if player clicks button\n * @param  {string} acceptLabel: String to go in the accept button\n * @param  {string} placeholder: Text to display as placeholder in the fill in box\n * @param {boolean} useDarkTheme: Switch to the dark theme\n *\n */\nexport class FillInPrompt extends Entity {\n  text: UIText\n  button: UIImage\n  buttonLabel: UIText\n  icon: UIImage\n  closeIcon: UIImage\n  onAccept: (e: string) => void\n  EButtonAction: () => false | Subscription[]\n  fillInBox: UIInputText\n  UIOpenTime: number\n  canvas: UICanvas = canvas\n  background: UIImage = promptBackground\n  constructor(\n    title: string,\n    onAccept: (e: string) => void,\n    acceptLabel?: string,\n    placeholder?: string,\n    useDarkTheme?: boolean\n  ) {\n    super()\n\n    this.UIOpenTime = +Date.now()\n\n    this.onAccept = onAccept\n\n    let uiTheme = useDarkTheme ? darkTheme : lightTheme\n\n    promptBackground.source = uiTheme\n    promptBackground.width = 400\n    promptBackground.height = 250\n\n    setSection(promptBackground, resources.backgrounds.promptBackground)\n\n    promptBackground.visible = true\n\n    this.text = new UIText(promptBackground)\n\n    this.text.value = title //splitTextIntoLines(instructions,30,3)\n\n    this.text.adaptWidth = false\n    this.text.textWrapping = true\n    this.text.width = 320\n\n    this.text.hAlign = 'center'\n    this.text.vAlign = 'top'\n    this.text.positionX = 0\n    this.text.positionY = -20\n    this.text.fontSize = 24\n    this.text.font = SFHeavyFont\n    this.text.vTextAlign = 'center'\n    this.text.hTextAlign = 'center'\n    this.text.color = useDarkTheme ? Color4.White() : Color4.Black()\n\n    this.closeIcon = new UIImage(promptBackground, uiTheme)\n    this.closeIcon.positionX = 175\n    this.closeIcon.positionY = 100\n    this.closeIcon.width = 32\n    this.closeIcon.height = 32\n    if (useDarkTheme) {\n      setSection(this.closeIcon, resources.icons.closeW)\n    } else {\n      setSection(this.closeIcon, resources.icons.closeD)\n    }\n    this.closeIcon.onClick = new OnClick(() => {\n      this.hide()\n    })\n\n    this.button = new UIImage(promptBackground, uiTheme)\n    this.button.positionX = 0\n    this.button.positionY = -60\n    this.button.width = 174\n    this.button.height = 46\n    setSection(this.button, resources.buttons.buttonE)\n\n    this.icon = new UIImage(this.button, useDarkTheme == true ? darkTheme : lightTheme)\n    this.icon.width = 26\n    this.icon.height = 26\n    this.icon.hAlign = 'center'\n    this.icon.vAlign = 'center'\n    this.icon.isPointerBlocker = false\n    setSection(this.icon, resources.buttonLabels.E)\n    this.icon.positionX = buttonIconPos(acceptLabel ? acceptLabel.length : 6)\n\n    this.buttonLabel = new UIText(this.button)\n    this.buttonLabel.value = acceptLabel ? acceptLabel : 'Submit'\n    this.buttonLabel.hTextAlign = 'center'\n    this.buttonLabel.vTextAlign = 'center'\n    this.buttonLabel.positionX = 30\n    this.buttonLabel.fontSize = 18\n    this.buttonLabel.font = SFFont\n    this.buttonLabel.color = Color4.White()\n    this.buttonLabel.isPointerBlocker = false\n\n    this.fillInBox = new UIInputText(promptBackground)\n    this.fillInBox.color = Color4.Black()\n    this.fillInBox.font = SFFont\n    this.fillInBox.width = 312\n    this.fillInBox.height = 46\n    this.fillInBox.positionX = 0\n    this.fillInBox.positionY = 15\n    this.fillInBox.placeholder = placeholder ? placeholder : 'Fill in'\n    this.fillInBox.hTextAlign = 'center'\n    this.fillInBox.vTextAlign = 'center'\n    this.fillInBox.fontSize = 22\n\n    let submittedText: string = ''\n\n    this.fillInBox.onChanged = new OnChanged(x => {\n      submittedText = x.value\n    })\n\n    this.fillInBox.onTextSubmit = new OnTextSubmit(x => {\n      //submittedText = x.text\n      this.accept(submittedText)\n    })\n\n    this.button.onClick = new OnClick(() => {\n      this.accept(submittedText)\n    })\n\n    this.EButtonAction = Input.instance.subscribe('BUTTON_DOWN', ActionButton.PRIMARY, false, e => {\n      if (this.button.visible && +Date.now() - this.UIOpenTime > 100) {\n        this.accept(submittedText)\n      }\n    })\n  }\n\n  /**\n   * Hides the prompt from view in the screen.\n   */\n  public close(): void {\n    promptBackground.visible = false\n    this.closeIcon.visible = false\n    this.button.visible = false\n    this.text.visible = false\n    this.buttonLabel.visible = false\n    this.fillInBox.visible = false\n    //Input.instance.unsubscribe('BUTTON_DOWN', ActionButton.PRIMARY, this.EButtonAction)\n  }\n\n  /**\n   * Hides the prompt, but first reads the provided value and runs the onAccept function with it\n   */\n  public accept(submittedText: string): void {\n    this.onAccept(submittedText)\n\n    this.close()\n    //Input.instance.unsubscribe('BUTTON_DOWN', ActionButton.PRIMARY, this.EButtonAction)\n  }\n\n  /**\n   * Hides the prompt from view in the screen.\n   */\n  public hide(): void {\n    promptBackground.visible = false\n    this.closeIcon.visible = false\n    this.button.visible = false\n    this.text.visible = false\n    this.buttonLabel.visible = false\n    this.fillInBox.visible = false\n  }\n\n  /**\n   * Makes an invisible prompt visible again.\n   */\n  public show(): void {\n    promptBackground.visible = true\n    this.closeIcon.visible = true\n    this.button.visible = true\n    this.text.visible = true\n    this.buttonLabel.visible = true\n    this.fillInBox.visible = true\n  }\n}\n","import resources, { setSection, buttonIconPos } from '../../utils/resources'\nimport {\n  darkTheme,\n  lightTheme,\n  promptBackground,\n  SFFont,\n  canvas\n} from '../../utils/default-ui-components'\nimport { PromptStyles, ButtonStyles, SwitchStyles, ImageSection } from '../../utils/types'\n\n/**\n * Creates a prompt object that includes a background and a close icon, and supports adding as many custom UI elements as desired\n *\n * @param {PromptStyles| string} style: Pick from a few predefined options of color, shape and size, or provide the string path to a custom image\n * @param {number} width Background width\n * @param {number} height Background height\n * @param {boolean} startHidden If true, prompt starts invisible to load in the background till calling the `show()` function of the prompt object.\n */\nexport class CustomPrompt extends Entity {\n  elements: (\n    | CustomPromptText\n    | CustomPromptIcon\n    | CustomPromptSwitch\n    | CustomPromptCheckBox\n    | CustomPromptButton\n    | CustomPromptTextBox\n  )[] = []\n  texture: Texture = lightTheme\n  darkTheme: boolean = false\n  background: UIImage = new UIImage(canvas, lightTheme)\n  closeIcon: UIImage = new UIImage(this.background, this.texture)\n  UIOpenTime: number = 0\n  canvas: UICanvas = canvas\n\n  constructor(\n    style?: PromptStyles | string,\n    width?: number,\n    height?: number,\n    startHidden?: boolean\n  ) {\n    super()\n\n    this.UIOpenTime = +Date.now()\n\n    this.background = new UIImage(canvas, lightTheme)\n    this.background.hAlign = 'center'\n    this.background.vAlign = 'center'\n\n    switch (style) {\n      case PromptStyles.LIGHT:\n        this.texture = lightTheme\n        setSection(this.background, resources.backgrounds.promptBackground)\n        setSection(this.closeIcon, resources.icons.closeD)\n        this.closeIcon.positionX = width ? width / 2 - 25 : 175\n        this.closeIcon.positionY = height ? height / 2 - 25 : 145\n        break\n      case PromptStyles.DARK:\n        this.texture = darkTheme\n        this.darkTheme = true\n        setSection(this.background, resources.backgrounds.promptBackground)\n        setSection(this.closeIcon, resources.icons.closeW)\n        this.closeIcon.positionX = width ? width / 2 - 25 : 175\n        this.closeIcon.positionY = height ? height / 2 - 25 : 145\n        break\n      case PromptStyles.LIGHTLARGE:\n        this.texture = lightTheme\n        setSection(this.background, resources.backgrounds.promptLargeBackground)\n        setSection(this.closeIcon, resources.icons.closeD)\n        this.closeIcon.positionX = width ? width / 2 - 25 : 175 + 40\n        this.closeIcon.positionY = height ? height / 2 - 25 : 145 + 20\n        break\n      case PromptStyles.DARKLARGE:\n        this.texture = darkTheme\n        this.darkTheme = true\n        setSection(this.background, resources.backgrounds.promptLargeBackground)\n        setSection(this.closeIcon, resources.icons.closeW)\n        this.closeIcon.positionX = width ? width / 2 - 25 : 175 + 40\n        this.closeIcon.positionY = height ? height / 2 - 25 : 145 + 20\n        break\n      case PromptStyles.LIGHTSLANTED:\n        this.texture = lightTheme\n        setSection(this.background, resources.backgrounds.promptSlantedBackground)\n        setSection(this.closeIcon, resources.icons.closeD)\n        this.closeIcon.positionX = width ? width / 2 - 25 : 175 + 40\n        this.closeIcon.positionY = height ? height / 2 - 25 : 100 + 38\n        break\n\n      case PromptStyles.DARKSLANTED:\n        this.texture = darkTheme\n        this.darkTheme = true\n        setSection(this.background, resources.backgrounds.promptSlantedBackground)\n        setSection(this.closeIcon, resources.icons.closeW)\n        this.closeIcon.positionX = width ? width / 2 - 25 : 175 + 40\n        this.closeIcon.positionY = height ? height / 2 - 25 : 100 + 38\n        break\n      default:\n        this.texture = new Texture(style)\n        this.closeIcon.visible = false\n    }\n    this.background.source = this.texture\n\n    this.background.width = width ? width : this.background.sourceWidth\n    this.background.height = height ? height : this.background.sourceHeight\n    this.background.visible = true\n\n    this.closeIcon.width = 32\n    this.closeIcon.height = 32\n    this.closeIcon.source = this.texture\n\n    this.closeIcon.onClick = new OnClick(() => {\n      this.hide()\n    })\n\n    if (startHidden) {\n      this.hide()\n    }\n  }\n\n  /**\n   * Hides the prompt from view in the screen.\n   */\n  public hide(): void {\n    this.background.visible = false\n    this.closeIcon.visible = false\n\n    for (let element of this.elements) {\n      element.hide()\n    }\n  }\n  /**\n   * Makes an invisible prompt visible again.\n   */\n  public show(): void {\n    this.background.visible = true\n    this.closeIcon.visible = true\n\n    for (let element of this.elements) {\n      element.show()\n    }\n  }\n\n  /**\n   * Adds a text UI element to the custom prompt\n   * @param {string} value Text to display\n   * @param {number} [posX=0] Position on X on the prompt, counting from the center of the prompt\n   * @param {number} [posY=0] Position on Y on the prompt, counting from the center of the prompt\n   * @param {Color4} color Color of the text. By default black over light themes and white over dark themes\n   * @param {number} size Font size\n   */\n  public addText(value: string, posX: number, posY: number, color?: Color4, size?: number) {\n    let text = new CustomPromptText(\n      this,\n      value,\n      posX,\n      posY,\n      this.darkTheme,\n      color ? color : undefined,\n      size ? size : undefined\n    )\n\n    this.elements.push(text)\n    return text\n  }\n\n  /**\n   * Adds a button UI element to the custom prompt\n   * @param {string} label Text to display as a label\n   * @param {number} [posX=0] Position on X on the prompt, counting from the center of the prompt\n   * @param {number} [posY=0] Position on Y on the prompt, counting from the center of the prompt\n   * @param {() => void} onClick Function to call every time the button is clicked\n   * @param {ButtonStyles} style Appearance of the button, selecting from several predefined options for different colors and shapes\n   */\n  public addButton(\n    label: string,\n    posX: number,\n    posY: number,\n    onClick: () => void,\n    style?: ButtonStyles\n  ) {\n    let button = new CustomPromptButton(\n      this,\n      this.texture,\n      this.UIOpenTime,\n      label,\n      posX,\n      posY,\n      onClick,\n      style ? style : undefined\n    )\n\n    this.elements.push(button)\n    return button\n  }\n\n  /**\n   * Adds a checkbox UI element to the custom prompt\n   * @param {string} label Text to display on the right of the box\n   * @param {number} [posX=0] Position on X on the prompt, counting from the center of the prompt\n   * @param {number} [posY=0] Position on Y on the prompt, counting from the center of the prompt\n   * @param {() => void} onCheck Function to call every time the box is checked\n   * @param {() => void} onUncheck Function to call every time the box is unchecked\n   * @param {ButtonStyles} style Appearance of the button, selecting from several predefined options for different colors and shapes\n   * @param {boolean} large Makes the checkbox significantly larger\n   * @param {boolean} startChecked Starts the checkbox in a default state of already checked\n   */\n  public addCheckbox(\n    label: string,\n    posX: number,\n    posY: number,\n    onCheck?: () => void,\n    onUncheck?: () => void,\n    large?: boolean,\n    startChecked?: boolean\n  ) {\n    let checkBox = new CustomPromptCheckBox(\n      this,\n      this.texture,\n      this.darkTheme,\n      label,\n      posX,\n      posY,\n      onCheck ? onCheck : undefined,\n      onUncheck ? onUncheck : undefined,\n      large ? large : undefined,\n      startChecked ? startChecked : undefined\n    )\n\n    this.elements.push(checkBox)\n    return checkBox\n  }\n\n  /**\n   * Adds a switch UI element to the custom prompt\n   * @param {string} label Text to display on the right of the switch\n   * @param {number} [posX=0] Position on X on the prompt, counting from the center of the prompt\n   * @param {number} [posY=0] Position on Y on the prompt, counting from the center of the prompt\n   * @param {() => void} onCheck Function to call every time the switch is activated\n   * @param {() => void} onUncheck Function to call every time the switch is deactivated\n   * @param {SwitchStyles} style Appearance of the switch, selecting from several predefined options for different colors and shapes\n   * @param {boolean} startChecked Starts the switch in a default state of already activated\n   */\n  public addSwitch(\n    label: string,\n    posX: number,\n    posY: number,\n    onCheck?: () => void,\n    onUncheck?: () => void,\n    style?: SwitchStyles,\n    startChecked?: boolean\n  ) {\n    let uiswitch = new CustomPromptSwitch(\n      this,\n      this.texture,\n      this.darkTheme,\n      label,\n      posX,\n      posY,\n      onCheck ? onCheck : undefined,\n      onUncheck ? onUncheck : undefined,\n      style ? style : undefined,\n      startChecked ? startChecked : undefined\n    )\n\n    this.elements.push(uiswitch)\n    return uiswitch\n  }\n\n  /**\n   * Adds a switch UI element to the custom prompt\n   * @param {string} image Path to the image file\n   * @param {number} [xOffset=0] Position on X on the prompt, counting from the center of the prompt\n   * @param {number} [yOffset=0] Position on Y on the prompt, counting from the center of the prompt\n   * @param {number} [width=0] Width of the image\n   * @param {number} [height=0] Height of the image\n   * @param {ImageSection} section ImageSection object to specify a specific region of the image file\n   */\n  public addIcon(\n    image: string,\n    xOffset: number,\n    yOffset: number,\n    width?: number,\n    height?: number,\n    section?: ImageSection\n  ) {\n    let iconTexture = new Texture(image)\n\n    let icon = new CustomPromptIcon(\n      this,\n      iconTexture,\n      xOffset,\n      yOffset,\n      width ? width : undefined,\n      height ? height : undefined,\n      section ? section : undefined\n    )\n\n    this.elements.push(icon)\n    return icon\n  }\n\n  /**\n   * Adds a textbox UI element to the custom prompt, for the player to fill in an input value\n   * @param {number} [posX=0] Position on X on the prompt, counting from the center of the prompt\n   * @param {number} [posY=0] Position on Y on the prompt, counting from the center of the prompt\n   * @param {string} placeholder Default string to display in the box\n   * @param {e: string => void} onChange Function to call every time the value in the text box is modified by the player\n   */\n  public addTextBox(\n    posX: number,\n    posY: number,\n    placeholder?: string,\n    onChange?: (e: string) => void\n  ) {\n    let texBox = new CustomPromptTextBox(\n      this,\n      posX,\n      posY,\n      placeholder ? placeholder : undefined,\n      onChange ? onChange : undefined\n    )\n\n    this.elements.push(texBox)\n    return texBox\n  }\n}\n\n/**\n * A button UI element to use in a custom prompt\n */\nexport class CustomPromptButton extends Entity {\n  label: UIText\n  image: UIImage\n  icon: UIImage | null = null\n  constructor(\n    parent: CustomPrompt,\n    texture: Texture,\n    UIOpenTime: number,\n    label: string,\n    posX: number,\n    posY: number,\n    onClick: () => void,\n    style?: ButtonStyles\n  ) {\n    super()\n    this.image = new UIImage(parent.background, texture)\n    this.image.positionX = posX\n    this.image.positionY = posY\n    this.image.width = 174\n    this.image.height = 46\n\n    this.label = new UIText(this.image)\n\n    if (style) {\n      switch (style) {\n        case ButtonStyles.E:\n          setSection(this.image, resources.buttons.buttonE)\n          this.label.positionX = 25\n          this.icon = new UIImage(this.image, texture)\n          this.icon.width = 26\n          this.icon.height = 26\n          this.icon.hAlign = 'center'\n          this.icon.vAlign = 'center'\n          this.icon.isPointerBlocker = false\n          setSection(this.icon, resources.buttonLabels.E)\n          this.icon.positionX = buttonIconPos(label.length)\n          break\n        case ButtonStyles.F:\n          setSection(this.image, resources.buttons.buttonF)\n          this.label.positionX = 25\n          this.icon = new UIImage(this.image, texture)\n          this.icon.width = 26\n          this.icon.height = 26\n          this.icon.hAlign = 'center'\n          this.icon.vAlign = 'center'\n          this.icon.isPointerBlocker = false\n          setSection(this.icon, resources.buttonLabels.F)\n          this.icon.positionX = buttonIconPos(label.length)\n          break\n        case ButtonStyles.RED:\n          setSection(this.image, resources.buttons.buttonRed)\n          break\n        case ButtonStyles.DARK:\n          setSection(this.image, resources.buttons.buttonDark)\n          break\n        case ButtonStyles.ROUNDBLACK:\n          setSection(this.image, resources.buttons.roundBlack)\n          break\n        case ButtonStyles.ROUNDWHITE:\n          setSection(this.image, resources.buttons.roundWhite)\n          break\n        case ButtonStyles.ROUNDSILVER:\n          setSection(this.image, resources.buttons.roundSilver)\n          break\n        case ButtonStyles.ROUNDGOLD:\n          setSection(this.image, resources.buttons.roundGold)\n          break\n        case ButtonStyles.SQUAREBLACK:\n          setSection(this.image, resources.buttons.squareBlack)\n          break\n        case ButtonStyles.SQUAREWHITE:\n          setSection(this.image, resources.buttons.squareWhite)\n          break\n        case ButtonStyles.SQUARESILVER:\n          setSection(this.image, resources.buttons.squareSilver)\n          break\n        case ButtonStyles.SQUAREGOLD:\n          setSection(this.image, resources.buttons.squareGold)\n          break\n        default:\n          setSection(this.image, resources.buttons.roundSilver)\n      }\n    } else {\n      setSection(this.image, resources.buttons.roundSilver)\n    }\n\n    this.label.value = label\n    this.label.hTextAlign = 'center'\n    this.label.vTextAlign = 'center'\n    this.label.fontSize = 20\n    this.label.font = SFFont\n    this.label.color =\n      style == ButtonStyles.ROUNDWHITE || style == ButtonStyles.SQUAREWHITE\n        ? Color4.Black()\n        : Color4.White()\n    this.label.isPointerBlocker = false\n\n    this.image.onClick = new OnClick(() => {\n      onClick()\n    })\n\n    if (style == ButtonStyles.E) {\n      Input.instance.subscribe('BUTTON_DOWN', ActionButton.PRIMARY, false, e => {\n        if (this.image.visible && +Date.now() - UIOpenTime > 100) {\n          onClick()\n        }\n      })\n    } else if (style == ButtonStyles.F) {\n      Input.instance.subscribe('BUTTON_DOWN', ActionButton.SECONDARY, false, e => {\n        if (this.image.visible && +Date.now() - UIOpenTime > 100) {\n          onClick()\n        }\n      })\n    }\n  }\n\n  /**\n   * Hides the item from view in the screen. It can't be clicked while invisible.\n   */\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  /**\n   * Makes an invisible item visible again.\n   */\n  public show(): void {\n    this.image.visible = true\n  }\n\n  /**\n   * Grays out the item so it can't be clicked.\n   */\n  public grayOut(): void {\n    this.label.color = Color4.Gray()\n    this.image.isPointerBlocker = false\n    if (this.icon) {\n      this.icon.visible = false\n    }\n  }\n\n  /**\n   * The opposite action of graying out, so it can't be clicked again.\n   */\n  public enable(): void {\n    this.label.color = Color4.White()\n    this.image.isPointerBlocker = true\n    if (this.icon) {\n      this.icon.visible = true\n    }\n  }\n}\n\n/**\n * A checkbox UI element to use in a custom prompt\n */\nexport class CustomPromptCheckBox extends Entity {\n  label: UIText\n  image: UIImage\n  checked: boolean\n  private darkTheme: boolean\n  private large: boolean\n  constructor(\n    parent: CustomPrompt,\n    texture: Texture,\n    darkTheme: boolean,\n    label: string,\n    posX: number,\n    posY: number,\n    onCheck?: () => void,\n    onUncheck?: () => void,\n    large?: boolean,\n    startChecked?: boolean\n  ) {\n    super()\n\n    this.checked = startChecked ? true : false\n    this.darkTheme = darkTheme\n    this.large = large ? large : false\n\n    this.image = new UIImage(parent.background, texture)\n    this.image.positionX = posX\n    this.image.positionY = posY\n    this.image.width = large ? 32 : 24\n    this.image.height = large ? 32 : 24\n\n    if (this.checked == false) {\n      this.uncheck()\n    } else {\n      this.check()\n    }\n\n    this.label = new UIText(this.image)\n\n    this.label.positionX = large ? 40 : 30\n\n    this.label.color = darkTheme ? Color4.White() : Color4.Black()\n\n    this.label.value = label\n    this.label.hTextAlign = 'left'\n    this.label.vTextAlign = 'center'\n    this.label.fontSize = 20\n    this.label.font = SFFont\n    this.label.isPointerBlocker = false\n\n    this.image.onClick = new OnClick(() => {\n      //this.checked = !this.checked\n      if (this.checked == false) {\n        this.check()\n      } else {\n        this.uncheck()\n      }\n\n      this.checked ? (onCheck ? onCheck() : null) : onUncheck ? onUncheck() : null\n    })\n  }\n\n  /**\n   * Hides the item from view in the screen. It can't be clicked while invisible.\n   */\n  public hide(): void {\n    this.image.visible = false\n    this.label.visible = false\n  }\n\n  /**\n   * Makes an invisible item visible again.\n   */\n  public show(): void {\n    this.image.visible = true\n    this.label.visible = true\n  }\n\n  /**\n   * Sets the box state to checked.\n   */\n  public uncheck(): void {\n    this.checked = false\n    if (this.darkTheme) {\n      if (this.large) {\n        setSection(this.image, resources.checkboxes.wLargeOff)\n      } else {\n        setSection(this.image, resources.checkboxes.wOff)\n      }\n    } else {\n      if (this.large) {\n        setSection(this.image, resources.checkboxes.dLargeOff)\n      } else {\n        setSection(this.image, resources.checkboxes.dOff)\n      }\n    }\n  }\n\n  /**\n   * Sets the box state to unchecked.\n   */\n  public check(): void {\n    this.checked = true\n    if (this.darkTheme) {\n      if (this.large) {\n        setSection(this.image, resources.checkboxes.wLargeOn)\n      } else {\n        setSection(this.image, resources.checkboxes.wOn)\n      }\n    } else {\n      if (this.large) {\n        setSection(this.image, resources.checkboxes.dLargeOn)\n      } else {\n        setSection(this.image, resources.checkboxes.dOn)\n      }\n    }\n  }\n}\n\n/**\n * A switch UI element to use in a custom prompt\n */\nexport class CustomPromptSwitch extends Entity {\n  label: UIText\n  image: UIImage\n  checked: boolean\n  private darkTheme: boolean\n  private style: SwitchStyles\n  constructor(\n    parent: CustomPrompt,\n    texture: Texture,\n    darkTheme: boolean,\n    label: string,\n    posX: number,\n    posY: number,\n    onCheck?: () => void,\n    onUncheck?: () => void,\n    style?: SwitchStyles,\n    startChecked?: boolean\n  ) {\n    super()\n\n    this.checked = startChecked ? true : false\n    this.darkTheme = darkTheme\n    this.style = style ? style : SwitchStyles.ROUNDGREEN\n\n    this.image = new UIImage(parent.background, texture)\n    this.image.positionX = posX\n    this.image.positionY = posY\n    this.image.width = 64\n    this.image.height = 32\n\n    if (this.checked == false) {\n      this.check()\n    } else {\n      this.uncheck()\n    }\n\n    this.label = new UIText(this.image)\n\n    this.label.positionX = 80\n\n    this.label.color = darkTheme ? Color4.White() : Color4.Black()\n\n    this.label.value = label\n    this.label.hTextAlign = 'left'\n    this.label.vTextAlign = 'center'\n    this.label.fontSize = 20\n    this.label.font = SFFont\n    this.label.isPointerBlocker = false\n\n    this.image.onClick = new OnClick(() => {\n      //this.checked = !this.checked\n      if (this.checked == false) {\n        this.check()\n      } else {\n        this.uncheck()\n      }\n\n      this.checked ? (onCheck ? onCheck() : null) : onUncheck ? onUncheck() : null\n    })\n  }\n\n  /**\n   * Hides the item from view in the screen. It can't be clicked while invisible.\n   */\n  public hide(): void {\n    this.image.visible = false\n    this.label.visible = false\n  }\n\n  /**\n   * Makes an invisible item visible again.\n   */\n  public show(): void {\n    this.image.visible = true\n    this.label.visible = true\n  }\n\n  /**\n   * Sets the switch state to activated.\n   */\n  public check(): void {\n    this.checked = true\n    switch (this.style) {\n      case SwitchStyles.ROUNDGREEN:\n        setSection(this.image, resources.switches.roundGreen)\n        break\n      case SwitchStyles.ROUNDRED:\n        setSection(this.image, resources.switches.roundRed)\n        break\n      case SwitchStyles.SQUAREGREEN:\n        setSection(this.image, resources.switches.squareGreen)\n        break\n      case SwitchStyles.SQUARERED:\n        setSection(this.image, resources.switches.squareRed)\n        break\n    }\n  }\n\n  /**\n   * Sets the switch state to deactivated.\n   */\n  public uncheck(): void {\n    this.checked = false\n    if (this.style == SwitchStyles.ROUNDGREEN || this.style == SwitchStyles.ROUNDRED) {\n      setSection(this.image, resources.switches.roundOff)\n    } else {\n      setSection(this.image, resources.switches.squareOff)\n    }\n  }\n}\n\n/**\n * An icon UI element to use in a custom prompt, by default 128x128 pixels.\n */\nexport class CustomPromptIcon extends Entity {\n  image: UIImage\n  constructor(\n    parent: CustomPrompt,\n    texture: Texture,\n    xOffset: number,\n    yOffset: number,\n    width?: number,\n    height?: number,\n    section?: ImageSection\n  ) {\n    super()\n\n    this.image = new UIImage(parent.background, texture)\n\n    this.image.positionX = xOffset\n    this.image.positionY = yOffset\n    this.image.width = width ? width : 128\n    this.image.height = height ? height : 128\n    this.image.sourceLeft = section && section.sourceLeft ? section.sourceLeft : 0\n    this.image.sourceTop = section && section.sourceTop ? section.sourceTop : 0\n    this.image.sourceWidth =\n      section && section.sourceWidth ? section.sourceWidth : width ? width : 128\n    this.image.sourceHeight =\n      section && section.sourceHeight ? section.sourceHeight : height ? height : 128\n  }\n\n  /**\n   * Hides the item from view in the screen.\n   */\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  /**\n   * Makes an invisible item visible again.\n   */\n  public show(): void {\n    this.image.visible = true\n  }\n}\n\n/**\n * A text UI element to use in a custom prompt\n */\nexport class CustomPromptText extends Entity {\n  text: UIText\n  constructor(\n    parent: CustomPrompt,\n    value: string,\n    posX: number,\n    posY: number,\n    darkTheme?: boolean,\n    color?: Color4,\n    size?: number\n  ) {\n    super()\n\n    this.text = new UIText(parent.background)\n    this.text.value = value\n    this.text.positionX = posX ? posX : 0\n    this.text.positionY = posY ? posY : 0\n    this.text.hTextAlign = 'center'\n    this.text.color = color ? color : darkTheme ? Color4.White() : Color4.Black()\n    this.text.fontSize = size ? size : 15\n  }\n\n  /**\n   * Hides the item from view in the screen.\n   */\n  public hide(): void {\n    this.text.visible = false\n  }\n\n  /**\n   * Makes an invisible item visible again.\n   */\n  public show(): void {\n    this.text.visible = true\n  }\n}\n\n/**\n * A textbox UI element to use in a custom prompt\n */\nexport class CustomPromptTextBox extends Entity {\n  fillInBox: UIInputText\n  currentText: string = ''\n  constructor(\n    parent: CustomPrompt,\n    posX: number,\n    posY: number,\n    placeholder?: string,\n    onChange?: (e: string) => void\n  ) {\n    super()\n\n    this.fillInBox = new UIInputText(parent.background)\n    this.fillInBox.color = Color4.Black()\n    this.fillInBox.font = SFFont\n    this.fillInBox.width = 312\n    this.fillInBox.height = 46\n    this.fillInBox.positionX = posX\n    this.fillInBox.positionY = posY\n    this.fillInBox.placeholder = placeholder ? placeholder : 'Fill in'\n    this.fillInBox.hTextAlign = 'center'\n    this.fillInBox.vTextAlign = 'center'\n    this.fillInBox.fontSize = 22\n\n    this.fillInBox.onChanged = new OnChanged(x => {\n      if (this.fillInBox && !this.fillInBox.visible) return\n      this.currentText = x.value\n      if (onChange) {\n        onChange(this.currentText)\n      }\n    })\n\n    this.fillInBox.onTextSubmit = new OnTextSubmit(x => {\n      if (this.fillInBox && !this.fillInBox.visible) return\n      this.currentText = x.text\n      if (onChange) {\n        onChange(this.currentText)\n      }\n    })\n  }\n\n  /**\n   * Hides the item from view in the screen. It can't be clicked while invisible.\n   */\n  public hide(): void {\n    this.fillInBox.visible = false\n  }\n\n  /**\n   * Makes an invisible item visible again.\n   */\n  public show(): void {\n    this.fillInBox.visible = true\n  }\n}\n","import { canvas, SFFont } from '../utils/default-ui-components'\n\n/**\n * Displays a number on the center of the UI\n *\n * @param {string} value string value\n * @param {number} [xOffset=0] position on X, to enable fitting several UI elements\n * @param {number} [yOffset=0] position on Y, to enable fitting several UI elements\n * @param {Color4} [color Color4.White()] text color\n * @param {number} [size=25] text size\n * @param {boolean} bordersOff if true, text won't have a black margin around it\n *\n */\nexport class CornerLabel extends Entity {\n  uiText: UIText\n  canvas: UICanvas = canvas\n  constructor(\n    value: string,\n    xOffset?: number,\n    yOffset?: number,\n    color?: Color4,\n    size?: number,\n    bordersOff?: boolean\n  ) {\n    super()\n    this.uiText = new UIText(canvas)\n\n    this.uiText.value = value\n\n    this.uiText.hAlign = 'right'\n    this.uiText.vAlign = 'bottom'\n    this.uiText.positionX = xOffset ? xOffset : 0\n    this.uiText.positionY = yOffset ? yOffset : 0\n    this.uiText.fontSize = size ? size : 25\n    this.uiText.font = SFFont\n    this.uiText.vTextAlign = 'center'\n    this.uiText.hTextAlign = 'center'\n    this.uiText.color = color ? color : Color4.White()\n\n    this.uiText.outlineColor = Color4.Black()\n    this.uiText.outlineWidth = bordersOff ? 0 : 0.1\n  }\n\n  /**\n   * Hides the label from view in the screen. Its values can still be changed and read while hidden.\n   */\n  public hide(): void {\n    this.uiText.visible = false\n  }\n\n  /**\n   * Makes an label counter visible again.\n   */\n  public show(): void {\n    this.uiText.visible = true\n  }\n\n  /**\n   * Sets the label's value to a new string.\n   *\n   * @param {string} newString New value for the label\n   *\n   */\n  public set(newString: string): void {\n    this.uiText.value = newString\n    this.uiText.visible = true\n  }\n}\n","import { lightTheme, canvas } from '../utils/default-ui-components'\nimport { UIDelay } from '../utils/timerComponents'\nimport resources, { setSection } from '../utils/resources'\n\n/**\n * Displays a loading icon on the center of the screen\n * @param {number} [duration=3] Seconds to display the image onscreen. 0 keeps it on till you hide it manually\n * @param {number} [xOffset=0] Position on X, to enable fitting several counters\n * @param {number} [yOffset=0] Position on Y, to enable fitting several counters\n * @param {number} [scale=1] Multiplier for the size of the bar. 1 = 48 x 64\n *\n */\nexport class LoadingIcon extends Entity {\n  image: UIImage\n  canvas: UICanvas = canvas\n  constructor(duration?: number, xOffset?: number, yOffset?: number, scale?: number) {\n    super()\n\n    this.image = new UIImage(canvas, lightTheme)\n\n    this.image.hAlign = 'center'\n    this.image.vAlign = 'center'\n    this.image.positionX = xOffset ? xOffset : 0\n    this.image.positionY = yOffset ? yOffset + 80 : 80\n    this.image.width = scale ? scale * 48 : 48\n    this.image.height = scale ? scale * 64 : 64\n    setSection(this.image, resources.icons.TimerLarge)\n\n    // TODO: IMAGE NOT GOING AWAY\n    if (duration && duration != 0) {\n      let dummyEnty = new Entity()\n      engine.addEntity(dummyEnty)\n\n      dummyEnty.addComponentOrReplace(\n        new UIDelay(duration ? duration : 3, () => {\n          this.hide()\n        })\n      )\n    }\n  }\n\n  /**\n   * Hides the image from view in the screen.\n   *\n   */\n  public hide(): void {\n    this.image.visible = false\n  }\n\n  /**\n   * Makes an invisible image visible again.\n   *\n   */\n  public show(): void {\n    this.image.visible = true\n  }\n}\n","import { UIDelay } from '../utils/timerComponents'\nimport { message, SFHeavyFont } from '../utils/default-ui-components'\n\n/**\n * Displays text in the center of the UI for a specific time\n *\n * @param {string} value string to display\n * @param {duration} duration time to keep the text visible (in seconds). Default: 3 seconds.\n * @param {Color4} [color=Color.Yellow()] text color, as a Color4. Default: black\n * @param {number} [size=60] font size, default 60\n * @param {boolean} bordersOff if true, text won't have a black margin around it\n *\n */\nexport function displayAnnouncement(\n  value: string,\n  duration?: number,\n  color?: Color4,\n  size?: number,\n  bordersOff?: boolean\n) {\n  message.visible = true\n  message.value = value\n\n  message.color = color ? color : Color4.Yellow()\n\n  message.fontSize = size ? size : 50\n  message.font = SFHeavyFont\n\n  message.outlineColor = Color4.Black()\n\n  message.outlineWidth = bordersOff ? 0 : 0.1\n\n  //message.width = value.length * message.fontSize\n  message.adaptWidth = false\n  message.textWrapping = true\n  message.width = 900\n\n  let dummyEnty = new Entity()\n  engine.addEntity(dummyEnty)\n\n  if (duration != -1) {\n    dummyEnty.addComponentOrReplace(\n      new UIDelay(duration ? duration : 3, () => {\n        message.visible = false\n      })\n    )\n  }\n}\n\n/**\n * Hides any announcement text that might be visible\n */\nexport function hideAnnouncements() {\n  message.visible = false\n}\n"],"names":["seconds","onTimeReachedCallback","TimerSystem","createAndAddToEngine","this","elapsedTime","targetTime","onTargetTimeReached","entity","_this","removeComponent","UIDelay_1","UIDelay","Component","entitiesWithDelay","engine","getComponentGroup","_instance","addSystem","dt","_b","__values","entities","ent","timerComponent","getComponent","canvas","UICanvas","visible","SFFont","Font","Fonts","SanFrancisco","SFHeavyFont","SanFrancisco_Heavy","lightTheme","Texture","darkTheme","message","UIText","vAlign","hAlign","hTextAlign","vTextAlign","font","fontSize","color","Color4","positionY","promptBackground","UIImage","width","height","PromptStyles","BarStyles","ButtonStyles","SwitchStyles","value","xOffset","yOffset","size","bordersOff","fixedDigits","_super","valueAsNum","uiText","toFixedLengthString","positionX","White","outlineColor","Black","outlineWidth","__extends","UICounter","amount","stringValue","toString","lenDiff","length","concat","toPrecision","Entity","buttonE","sourceWidth","sourceHeight","sourceLeft","sourceTop","buttonF","buttonRed","buttonDark","roundBlack","squareBlack","roundWhite","squareWhite","roundSilver","squareSilver","roundGold","squareGold","E","F","promptLargeBackground","promptSlantedBackground","NPCDialog","closeW","closeD","closeWLarge","closeDLarge","closeWNoBack","closeDNoBack","closeWNoBackLarge","closeDNoBackLarge","FDark","FWhite","EDark","EWhite","Timer","TimerLarge","ClickWhite","ClickDark","wOff","wOn","dOff","dOn","wLargeOff","wLargeOn","dLargeOff","dLargeOn","roundOff","roundRed","roundGreen","squareOff","squareRed","squareGreen","setSection","image","section","buttonIconPos","textLen","pos","fillColor","style","scale","startHidden","fullWidth","background","ROUNDBLACK","resources","ROUNDWHITE","ROUNDSILVER","ROUNDGOLD","SQUAREBLACK","SQUAREWHITE","SQUARESILVER","SQUAREGOLD","bar","UIContainerRect","Red","thickness","hide","UIBar","texture","MediumIcon","duration","dummyEnty","addEntity","addComponentOrReplace","SmallIcon","LargeIcon","CenterImage","instructions","onAccept","acceptLabel","useDarkTheme","UIOpenTime","Date","now","uiTheme","source","closeIcon","onClick","OnClick","close","text","adaptWidth","textWrapping","button","icon","isPointerBlocker","buttonLabel","accept","EButtonAction","Input","instance","subscribe","ActionButton","PRIMARY","e","OkPrompt","title","onReject","rejectLabel","buttonEIcon","buttonELabel","buttonFIcon","buttonFLabel","reject","FButtonAction","SECONDARY","OptionPrompt","placeholder","fillInBox","UIInputText","submittedText","onChanged","OnChanged","x","onTextSubmit","OnTextSubmit","FillInPrompt","LIGHT","DARK","LIGHTLARGE","DARKLARGE","LIGHTSLANTED","DARKSLANTED","CustomPrompt","elements","show","posX","posY","CustomPromptText","undefined","push","label","CustomPromptButton","onCheck","onUncheck","large","startChecked","checkBox","CustomPromptCheckBox","uiswitch","CustomPromptSwitch","iconTexture","CustomPromptIcon","onChange","texBox","CustomPromptTextBox","parent","RED","Gray","checked","uncheck","check","ROUNDGREEN","ROUNDRED","SQUAREGREEN","SQUARERED","currentText","CornerLabel","newString","LoadingIcon","Yellow"],"mappings":"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"}